{
  "openapi": "3.1.0",
  "info": {
    "title": "Artifacts API",
    "description": "\nArtifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.\n\nWebsite: https://artifactsmmo.com/\n\nDocumentation: https://docs.artifactsmmo.com/\n\nOpenAPI Spec: https://api.artifactsmmo.com/openapi.json\n",
    "version": "4.0"
  },
  "paths": {
    "/my/bank": {
      "get": {
        "tags": [
          "My account"
        ],
        "summary": "Get Bank Details",
        "description": "Fetch bank details.",
        "operationId": "get_bank_details_my_bank_get",
        "responses": {
          "200": {
            "description": "Successfully fetched bank details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankResponseSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/my/bank/items": {
      "get": {
        "tags": [
          "My account"
        ],
        "summary": "Get Bank Items",
        "description": "Fetch all items in your bank.",
        "operationId": "get_bank_items_my_bank_items_get",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "item_code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item code",
              "description": "Item to search in your bank."
            },
            "description": "Item to search in your bank."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_SimpleItemSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/my/grandexchange/orders": {
      "get": {
        "tags": [
          "My account"
        ],
        "summary": "Get Ge Sell Orders",
        "description": "Fetch your sell orders details.",
        "operationId": "get_ge_sell_orders_my_grandexchange_orders_get",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item code",
              "description": "The code of the item."
            },
            "description": "The code of the item."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched orders details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_GEOrderSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/my/grandexchange/history": {
      "get": {
        "tags": [
          "My account"
        ],
        "summary": "Get Ge Sell History",
        "description": "Fetch your sales history of the last 7 days.",
        "operationId": "get_ge_sell_history_my_grandexchange_history_get",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Order ID",
              "description": "Order ID to search in your history."
            },
            "description": "Order ID to search in your history."
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item code",
              "description": "Item to search in your history."
            },
            "description": "Item to search in your history."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched sales history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_GeOrderHistorySchema_"
                }
              }
            }
          }
        }
      }
    },
    "/my/details": {
      "get": {
        "tags": [
          "My account"
        ],
        "summary": "Get Account Details",
        "description": "Fetch account details.",
        "operationId": "get_account_details_my_details_get",
        "responses": {
          "200": {
            "description": "Successfully fetched account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyAccountDetailsSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/my/change_password": {
      "post": {
        "tags": [
          "My account"
        ],
        "summary": "Change Password",
        "description": "Change your account password. Changing the password reset the account token.",
        "operationId": "change_password_my_change_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema"
                }
              }
            }
          },
          "458": {
            "description": "Use a different password."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/my/{name}/action/move": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Move",
        "description": "Moves a character on the map using the map's X and Y position.",
        "operationId": "action_move_my__name__action_move_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DestinationSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The character has moved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterMovementResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "490": {
            "description": "Character already at destination."
          },
          "404": {
            "description": "Map not found."
          },
          "486": {
            "description": "An action is already in progress by your character."
          }
        }
      }
    },
    "/my/{name}/action/rest": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Rest",
        "description": "Recovers hit points by resting. (1 second per 5 HP, minimum 3 seconds)",
        "operationId": "action_rest_my__name__action_rest_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "The character has rested successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterRestResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          }
        }
      }
    },
    "/my/{name}/action/equip": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Equip Item",
        "description": "Equip an item on your character.",
        "operationId": "action_equip_item_my__name__action_equip_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EquipSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The item has been successfully equipped on your character.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EquipmentResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "496": {
            "description": "Character level is insufficient."
          },
          "491": {
            "description": "Slot is not empty."
          },
          "485": {
            "description": "This item is already equipped."
          },
          "484": {
            "description": "Character can't equip more than 100 utilitys in the same slot."
          },
          "497": {
            "description": "Character inventory is full."
          }
        }
      }
    },
    "/my/{name}/action/unequip": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Unequip Item",
        "description": "Unequip an item on your character.",
        "operationId": "action_unequip_item_my__name__action_unequip_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnequipSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The item has been successfully unequipped and added in his inventory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EquipmentResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          },
          "498": {
            "description": "Character not found."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "491": {
            "description": "Slot is empty."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "483": {
            "description": "Character has no enough HP to unequip this item."
          },
          "499": {
            "description": "Character in cooldown."
          }
        }
      }
    },
    "/my/{name}/action/use": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Use Item",
        "description": "Use an item as a consumable.",
        "operationId": "action_use_item_my__name__action_use_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleItemSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The item has been successfully used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UseItemResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "476": {
            "description": "This item is not a consumable."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "496": {
            "description": "Character level is insufficient."
          }
        }
      }
    },
    "/my/{name}/action/fight": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Fight",
        "description": "Start a fight against a monster on the character's map.",
        "operationId": "action_fight_my__name__action_fight_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "The fight ended successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterFightResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "598": {
            "description": "Monster not found on this map."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "497": {
            "description": "Character inventory is full."
          }
        }
      }
    },
    "/my/{name}/action/gathering": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Gathering",
        "description": "Harvest a resource on the character's map.",
        "operationId": "action_gathering_my__name__action_gathering_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "The resource has been successfully gathered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "598": {
            "description": "Resource not found on this map."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "493": {
            "description": "Not skill level required."
          },
          "497": {
            "description": "Character inventory is full."
          }
        }
      }
    },
    "/my/{name}/action/crafting": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Crafting",
        "description": "Crafting an item. The character must be on a map with a workshop.",
        "operationId": "action_crafting_my__name__action_crafting_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CraftingSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The item was successfully crafted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Craft not found."
          },
          "598": {
            "description": "Workshop not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "493": {
            "description": "Not skill level required."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          }
        }
      }
    },
    "/my/{name}/action/bank/deposit/gold": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Deposit Bank Gold",
        "description": "Deposit gold in a bank on the character's map.",
        "operationId": "action_deposit_bank_gold_my__name__action_bank_deposit_gold_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositWithdrawGoldSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Golds successfully deposited in your bank.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankGoldTransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "Bank not found on this map."
          },
          "492": {
            "description": "Insufficient gold on your character."
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "461": {
            "description": "A transaction is already in progress with this item/your gold in your bank."
          },
          "486": {
            "description": "An action is already in progress by your character."
          }
        }
      }
    },
    "/my/{name}/action/bank/deposit": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Deposit Bank",
        "description": "Deposit an item in a bank on the character's map.",
        "operationId": "action_deposit_bank_my__name__action_bank_deposit_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleItemSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully deposited in your bank.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankItemTransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "Bank not found on this map."
          },
          "404": {
            "description": "Item not found."
          },
          "461": {
            "description": "A transaction is already in progress with this item/your gold in your bank."
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "462": {
            "description": "Your bank is full."
          }
        }
      }
    },
    "/my/{name}/action/bank/withdraw": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Withdraw Bank",
        "description": "Take an item from your bank and put it in the character's inventory.",
        "operationId": "action_withdraw_bank_my__name__action_bank_withdraw_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleItemSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully withdraw from your bank.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankItemTransactionResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "461": {
            "description": "A transaction is already in progress with this item/your gold in your bank."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "598": {
            "description": "Bank not found on this map."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          }
        }
      }
    },
    "/my/{name}/action/bank/withdraw/gold": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Withdraw Bank Gold",
        "description": "Withdraw gold from your bank.",
        "operationId": "action_withdraw_bank_gold_my__name__action_bank_withdraw_gold_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositWithdrawGoldSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Golds successfully withdraw from your bank.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankGoldTransactionResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "461": {
            "description": "A transaction is already in progress with this item/your gold in your bank."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "598": {
            "description": "Bank not found on this map."
          },
          "460": {
            "description": "Insufficient gold in your bank."
          }
        }
      }
    },
    "/my/{name}/action/bank/buy_expansion": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Buy Bank Expansion",
        "description": "Buy a 20 slots bank expansion.",
        "operationId": "action_buy_bank_expansion_my__name__action_bank_buy_expansion_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "Bank expansion successfully bought.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankExtensionTransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "Bank not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "492": {
            "description": "Insufficient gold on your character."
          }
        }
      }
    },
    "/my/{name}/action/npc/buy": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Npc Buy Item",
        "description": "Buy an item from an NPC on the character's map.",
        "operationId": "action_npc_buy_item_my__name__action_npc_buy_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NpcMerchantBuySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully buy from the NPC.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NpcMerchantTransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "NPC not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "492": {
            "description": "Insufficient gold on your character."
          },
          "441": {
            "description": "This item cannot be purchased."
          },
          "404": {
            "description": "Item not found."
          }
        }
      }
    },
    "/my/{name}/action/npc/sell": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Npc Sell Item",
        "description": "Sell an item from an NPC on the character's map.",
        "operationId": "action_npc_sell_item_my__name__action_npc_sell_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NpcMerchantBuySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully sell to the NPC.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NpcMerchantTransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "NPC not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "442": {
            "description": "This item cannot be sold."
          },
          "404": {
            "description": "Item not found."
          }
        }
      }
    },
    "/my/{name}/action/recycling": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Recycling",
        "description": "Recycling an item. The character must be on a map with a workshop (only for equipments and weapons).",
        "operationId": "action_recycling_my__name__action_recycling_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecyclingSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The items were successfully recycled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecyclingResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          },
          "598": {
            "description": "Workshop not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "493": {
            "description": "Not skill level required."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "473": {
            "description": "This item cannot be recycled."
          }
        }
      }
    },
    "/my/{name}/action/grandexchange/buy": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Ge Buy Item",
        "description": "Buy an item at the Grand Exchange on the character's map.",
        "operationId": "action_ge_buy_item_my__name__action_grandexchange_buy_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GEBuyOrderSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully buy from the Grand Exchange.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GETransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "Grand Exchange not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "436": {
            "description": "A transaction is already in progress on this order by a another character."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "492": {
            "description": "Insufficient gold on your character."
          },
          "434": {
            "description": "This offer does not contain as many items."
          },
          "435": {
            "description": "You can't buy to yourself."
          },
          "404": {
            "description": "Order not found."
          }
        }
      }
    },
    "/my/{name}/action/grandexchange/sell": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Ge Create Sell Order",
        "description": "Create a sell order at the Grand Exchange on the character's map. Please note that a 5% sales tax is charged.",
        "operationId": "action_ge_create_sell_order_my__name__action_grandexchange_sell_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GEOrderCreationrSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The sell order has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GECreateOrderTransactionResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "404": {
            "description": "Item not found."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "492": {
            "description": "Insufficient gold on your character."
          },
          "433": {
            "description": "You can't create more than 100 orders at the same time."
          },
          "437": {
            "description": "This item cannot be sold."
          },
          "598": {
            "description": "Grand Exchange not found on this map."
          }
        }
      }
    },
    "/my/{name}/action/grandexchange/cancel": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Ge Cancel Sell Order",
        "description": "Cancel a sell order at the Grand Exchange on the character's map.",
        "operationId": "action_ge_cancel_sell_order_my__name__action_grandexchange_cancel_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GECancelOrderSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your sell order has been successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GETransactionResponseSchema"
                }
              }
            }
          },
          "598": {
            "description": "Grand Exchange not found on this map."
          },
          "498": {
            "description": "Character not found."
          },
          "497": {
            "description": "Character inventory is full."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "436": {
            "description": "A transaction is already in progress on this order by a another character."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "438": {
            "description": "You can't cancel an order that is not yours."
          },
          "404": {
            "description": "Order not found."
          }
        }
      }
    },
    "/my/{name}/action/task/complete": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Complete Task",
        "description": "Complete a task.",
        "operationId": "action_complete_task_my__name__action_task_complete_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "The task has been successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardDataResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "598": {
            "description": "Tasks Master not found on this map."
          },
          "488": {
            "description": "Character has not completed the task."
          },
          "487": {
            "description": "Character has no task."
          },
          "497": {
            "description": "Character inventory is full."
          }
        }
      }
    },
    "/my/{name}/action/task/exchange": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Task Exchange",
        "description": "Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.",
        "operationId": "action_task_exchange_my__name__action_task_exchange_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "The tasks coins have been successfully exchanged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardDataResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "598": {
            "description": "Tasks Master not found on this map."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          },
          "497": {
            "description": "Character inventory is full."
          }
        }
      }
    },
    "/my/{name}/action/task/new": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Accept New Task",
        "description": "Accepting a new task.",
        "operationId": "action_accept_new_task_my__name__action_task_new_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "New task successfully accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "598": {
            "description": "Tasks Master not found on this map."
          },
          "489": {
            "description": "Character already has a task."
          }
        }
      }
    },
    "/my/{name}/action/task/trade": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Task Trade",
        "description": "Trading items with a Tasks Master.",
        "operationId": "action_task_trade_my__name__action_task_trade_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleItemSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "You have successfully trade items to a Tasks Master.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTradeResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "598": {
            "description": "Tasks Master not found on this map."
          },
          "475": {
            "description": "Character have already completed the task or are trying to trade too many items."
          },
          "474": {
            "description": "Character does not have this task."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          }
        }
      }
    },
    "/my/{name}/action/task/cancel": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Task Cancel",
        "description": "Cancel a task for 1 tasks coin.",
        "operationId": "action_task_cancel_my__name__action_task_cancel_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "responses": {
          "200": {
            "description": "The task has been successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCancelledResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "598": {
            "description": "Tasks Master not found on this map."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          }
        }
      }
    },
    "/my/{name}/action/delete": {
      "post": {
        "tags": [
          "My characters"
        ],
        "summary": "Action Delete Item",
        "description": "Delete an item from your character's inventory.",
        "operationId": "action_delete_item_my__name__action_delete_post",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "Name of your character."
            },
            "description": "Name of your character."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleItemSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item successfully deleted from your character.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteItemResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          },
          "499": {
            "description": "Character in cooldown."
          },
          "486": {
            "description": "An action is already in progress by your character."
          },
          "478": {
            "description": "Missing item or insufficient quantity."
          }
        }
      }
    },
    "/my/logs": {
      "get": {
        "tags": [
          "My characters"
        ],
        "summary": "Get All Characters Logs",
        "description": "History of the last 100 actions of all your characters.",
        "operationId": "get_all_characters_logs_my_logs_get",
        "security": [
          {
            "JWTBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_LogSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Logs not found."
          },
          "498": {
            "description": "Character not found."
          }
        }
      }
    },
    "/my/characters": {
      "get": {
        "tags": [
          "My characters"
        ],
        "summary": "Get My Characters",
        "description": "List of your characters.",
        "operationId": "get_my_characters_my_characters_get",
        "responses": {
          "200": {
            "description": "Successfully fetched characters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyCharactersListSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/accounts/create": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Account",
        "operationId": "create_account_accounts_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAccountSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Account created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchema"
                }
              }
            }
          },
          "456": {
            "description": "Username already used."
          },
          "457": {
            "description": "Email already used."
          }
        }
      }
    },
    "/accounts/{account}/achievements": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get Account Achievements",
        "description": "Retrieve the achievements of a account.",
        "operationId": "get_account_achievements_accounts__account__achievements_get",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Account name",
              "description": "The character name."
            },
            "description": "The character name."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AchievementType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Type",
              "description": "Type of achievements."
            },
            "description": "Type of achievements."
          },
          {
            "name": "completed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Completed",
              "description": "Filter by completed achievements."
            },
            "description": "Filter by completed achievements."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched achievements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_AccountAchievementSchema_"
                }
              }
            }
          },
          "404": {
            "description": "Account not found."
          }
        }
      }
    },
    "/accounts/{account}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get Account",
        "description": "Retrieve the details of a character.",
        "operationId": "get_account_accounts__account__get",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Account name",
              "description": "The account name."
            },
            "description": "The account name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDetailsSchema"
                }
              }
            }
          },
          "404": {
            "description": "Account not found."
          }
        }
      }
    },
    "/achievements": {
      "get": {
        "tags": [
          "Achievements"
        ],
        "summary": "Get All Achievements",
        "description": "List of all achievements.",
        "operationId": "get_all_achievements_achievements_get",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AchievementType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Type",
              "description": "Type of achievements."
            },
            "description": "Type of achievements."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched achievements.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_AchievementSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/achievements/{code}": {
      "get": {
        "tags": [
          "Achievements"
        ],
        "summary": "Get Achievement",
        "description": "Retrieve the details of a achievement.",
        "operationId": "get_achievement_achievements__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "achievement code",
              "description": "The code of the achievement."
            },
            "description": "The code of the achievement."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched achievement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AchievementResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Achievement not found."
          }
        }
      }
    },
    "/badges": {
      "get": {
        "tags": [
          "Badges"
        ],
        "summary": "Get All Badges",
        "description": "List of all badges.",
        "operationId": "get_all_badges_badges_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched badges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_BadgeSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/badges/{code}": {
      "get": {
        "tags": [
          "Badges"
        ],
        "summary": "Get Badge",
        "description": "Retrieve the details of a badge.",
        "operationId": "get_badge_badges__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "achievement code",
              "description": "The code of the achievement."
            },
            "description": "The code of the achievement."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched badge.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadgeResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "badge not found."
          }
        }
      }
    },
    "/characters/create": {
      "post": {
        "tags": [
          "Characters"
        ],
        "summary": "Create Character",
        "description": "Create new character on your account. You can create up to 5 characters.",
        "operationId": "create_character_characters_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCharacterSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created character.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponseSchema"
                }
              }
            }
          },
          "494": {
            "description": "Name already used."
          },
          "495": {
            "description": "Maximum characters reached on your account."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/characters/delete": {
      "post": {
        "tags": [
          "Characters"
        ],
        "summary": "Delete Character",
        "description": "Delete character on your account.",
        "operationId": "delete_character_characters_delete_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCharacterSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully deleted character.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponseSchema"
                }
              }
            }
          },
          "498": {
            "description": "Character not found."
          }
        },
        "security": [
          {
            "JWTBearer": []
          }
        ]
      }
    },
    "/characters/{name}": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get Character",
        "description": "Retrieve the details of a character.",
        "operationId": "get_character_characters__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Character name",
              "description": "The character name."
            },
            "description": "The character name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched character.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Character not found."
          }
        }
      }
    },
    "/effects": {
      "get": {
        "tags": [
          "Effects"
        ],
        "summary": "Get All Effects",
        "description": "List of all effects. Effects are used by equipment, tools, runes, consumables and monsters. An effect is an action that produces an effect on the game.",
        "operationId": "get_all_effects_effects_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched effects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_EffectSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/effects/{code}": {
      "get": {
        "tags": [
          "Effects"
        ],
        "summary": "Get Effect",
        "description": "Retrieve the details of a badge.",
        "operationId": "get_effect_effects__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "achievement code",
              "description": "The code of the achievement."
            },
            "description": "The code of the achievement."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched effect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "effect not found."
          }
        }
      }
    },
    "/events/active": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get All Active Events",
        "description": "Fetch active events details.",
        "operationId": "get_all_active_events_events_active_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched events details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_ActiveEventSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get All Events",
        "description": "Fetch events details.",
        "operationId": "get_all_events_events_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched events details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_EventSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/grandexchange/history/{code}": {
      "get": {
        "tags": [
          "Grand Exchange"
        ],
        "summary": "Get Ge Sell History",
        "description": "Fetch the sales history of the item for the last 7 days.",
        "operationId": "get_ge_sell_history_grandexchange_history__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item code",
              "description": "The code of the item."
            },
            "description": "The code of the item."
          },
          {
            "name": "seller",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Seller",
              "description": "The seller (account name) of the item."
            },
            "description": "The seller (account name) of the item."
          },
          {
            "name": "buyer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Buyer",
              "description": "The buyer (account name) of the item."
            },
            "description": "The buyer (account name) of the item."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched orders history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_GeOrderHistorySchema_"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          }
        }
      }
    },
    "/grandexchange/orders": {
      "get": {
        "tags": [
          "Grand Exchange"
        ],
        "summary": "Get Ge Sell Orders",
        "description": "Fetch all sell orders.",
        "operationId": "get_ge_sell_orders_grandexchange_orders_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item code",
              "description": "The code of the item."
            },
            "description": "The code of the item."
          },
          {
            "name": "seller",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Seller",
              "description": "The seller (account name) of the item."
            },
            "description": "The seller (account name) of the item."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched orders details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_GEOrderSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/grandexchange/orders/{id}": {
      "get": {
        "tags": [
          "Grand Exchange"
        ],
        "summary": "Get Ge Sell Order",
        "description": "Retrieve the sell order of a item.",
        "operationId": "get_ge_sell_order_grandexchange_orders__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Order id",
              "description": "The id of the order."
            },
            "description": "The id of the order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GEOrderReponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          }
        }
      }
    },
    "/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get All Items",
        "description": "Fetch items details.",
        "operationId": "get_all_items_items_get",
        "parameters": [
          {
            "name": "min_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Minimum level",
              "description": "Minimum level items."
            },
            "description": "Minimum level items."
          },
          {
            "name": "max_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Maximum level",
              "description": "Maximum level items."
            },
            "description": "Maximum level items."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item name",
              "description": "Name of the item."
            },
            "description": "Name of the item."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ItemType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Type",
              "description": "Type of items."
            },
            "description": "Type of items."
          },
          {
            "name": "craft_skill",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CraftSkill_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Crafting skill",
              "description": "Skill to craft items."
            },
            "description": "Skill to craft items."
          },
          {
            "name": "craft_material",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Crafting material",
              "description": "Item code of items used as material for crafting."
            },
            "description": "Item code of items used as material for crafting."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch items details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_ItemSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/items/{code}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get Item",
        "description": "Retrieve the details of a item.",
        "operationId": "get_item_items__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Item code",
              "description": "The code of the item."
            },
            "description": "The code of the item."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Item not found."
          }
        }
      }
    },
    "/leaderboard/characters": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Get Characters Leaderboard",
        "description": "Fetch leaderboard details.",
        "operationId": "get_characters_leaderboard_leaderboard_characters_get",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CharacterLeaderboardType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Sort",
              "description": "Default sort by combat total XP."
            },
            "description": "Default sort by combat total XP."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched leaderboard.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_CharacterLeaderboardSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboard/accounts": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Get Accounts Leaderboard",
        "description": "Fetch leaderboard details.",
        "operationId": "get_accounts_leaderboard_leaderboard_accounts_get",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccountLeaderboardType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Sort",
              "description": "Default sort by achievements points."
            },
            "description": "Default sort by achievements points."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched leaderboard.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_AccountLeaderboardSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get All Maps",
        "description": "Fetch maps details.",
        "operationId": "get_all_maps_maps_get",
        "parameters": [
          {
            "name": "content_type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapContentType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Content type",
              "description": "Type of content on the map."
            },
            "description": "Type of content on the map."
          },
          {
            "name": "content_code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Content code",
              "description": "Content code on the map."
            },
            "description": "Content code on the map."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched maps details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_MapSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/maps/{x}/{y}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get Map",
        "description": "Retrieve the details of a map.",
        "operationId": "get_map_maps__x___y__get",
        "parameters": [
          {
            "name": "x",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Position X",
              "description": "The position x of the map."
            },
            "description": "The position x of the map."
          },
          {
            "name": "y",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Position Y",
              "description": "The position X of the map."
            },
            "description": "The position X of the map."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched map.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Map not found."
          }
        }
      }
    },
    "/monsters": {
      "get": {
        "tags": [
          "Monsters"
        ],
        "summary": "Get All Monsters",
        "description": "Fetch monsters details.",
        "operationId": "get_all_monsters_monsters_get",
        "parameters": [
          {
            "name": "min_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Minimum level",
              "description": "Monster minimum level."
            },
            "description": "Monster minimum level."
          },
          {
            "name": "max_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Maximum level",
              "description": "Monster maximum level."
            },
            "description": "Monster maximum level."
          },
          {
            "name": "drop",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Drop",
              "description": "Item code of the drop."
            },
            "description": "Item code of the drop."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched monsters details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_MonsterSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/monsters/{code}": {
      "get": {
        "tags": [
          "Monsters"
        ],
        "summary": "Get Monster",
        "description": "Retrieve the details of a monster.",
        "operationId": "get_monster_monsters__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Monster code",
              "description": "The code of the monster."
            },
            "description": "The code of the monster."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched monster.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonsterResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Monster not found."
          }
        }
      }
    },
    "/npcs": {
      "get": {
        "tags": [
          "NPCs"
        ],
        "summary": "Get All Npcs",
        "description": "Fetch NPCs details.",
        "operationId": "get_all_npcs_npcs_get",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NPCType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "NPC type",
              "description": "The type of the NPC."
            },
            "description": "The type of the NPC."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched NPCs details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_NPCSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/npcs/{code}": {
      "get": {
        "tags": [
          "NPCs"
        ],
        "summary": "Get Npc",
        "description": "Retrieve the details of a NPC.",
        "operationId": "get_npc_npcs__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "NPC code",
              "description": "The code of the NPC."
            },
            "description": "The code of the NPC."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched NPC.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NPCResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "NPC not found."
          }
        }
      }
    },
    "/npcs/{code}/items": {
      "get": {
        "tags": [
          "NPCs"
        ],
        "summary": "Get Npc Items",
        "description": "Retrieve the items list of a NPC. If the NPC has items to buy or sell, they will be displayed.",
        "operationId": "get_npc_items_npcs__code__items_get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "NPC code",
              "description": "The code of the NPC."
            },
            "description": "The code of the NPC."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched NPC.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_NPCItem_"
                }
              }
            }
          },
          "404": {
            "description": "NPC not found."
          }
        }
      }
    },
    "/resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get All Resources",
        "description": "Fetch resources details.",
        "operationId": "get_all_resources_resources_get",
        "parameters": [
          {
            "name": "min_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Minimum level",
              "description": "Skill minimum level."
            },
            "description": "Skill minimum level."
          },
          {
            "name": "max_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Maximum level",
              "description": "Skill maximum level."
            },
            "description": "Skill maximum level."
          },
          {
            "name": "skill",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GatheringSkill_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Skill code",
              "description": "The code of the skill."
            },
            "description": "The code of the skill."
          },
          {
            "name": "drop",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Drop",
              "description": "Item code of the drop."
            },
            "description": "Item code of the drop."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched resources details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_ResourceSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{code}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resource",
        "description": "Retrieve the details of a resource.",
        "operationId": "get_resource_resources__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Resource code",
              "description": "The code of the resource."
            },
            "description": "The code of the resource.",
            "example": "copper_rocks"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/tasks/list": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get All Tasks",
        "description": "Fetch the list of all tasks.",
        "operationId": "get_all_tasks_tasks_list_get",
        "parameters": [
          {
            "name": "min_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Minimum level",
              "description": "Minimum level."
            },
            "description": "Minimum level."
          },
          {
            "name": "max_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Maximum level",
              "description": "Maximum level."
            },
            "description": "Maximum level."
          },
          {
            "name": "skill",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Skill_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Skill code",
              "description": "The code of the skill."
            },
            "description": "The code of the skill."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TaskType_a-zA-Z0-9_-_____"
                }
              ],
              "title": "Type",
              "description": "The type of tasks."
            },
            "description": "The type of tasks."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched tasks details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_TaskFullSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/list/{code}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get Task",
        "description": "Retrieve the details of a task.",
        "operationId": "get_task_tasks_list__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Task code",
              "description": "The code of the task."
            },
            "description": "The code of the task."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFullResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Task not found."
          }
        }
      }
    },
    "/tasks/rewards": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get All Tasks Rewards",
        "description": "Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with a tasks master.",
        "operationId": "get_all_tasks_rewards_tasks_rewards_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 50,
              "title": "Size"
            },
            "description": "Page size"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched tasks rewards details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataPage_DropRateSchema_"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/rewards/{code}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get Tasks Reward",
        "description": "Retrieve the details of a tasks reward.",
        "operationId": "get_tasks_reward_tasks_rewards__code__get",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]+$",
              "title": "Tasks reward code",
              "description": "The code of the tasks reward."
            },
            "description": "The code of the tasks reward."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched tasks reward.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RewardResponseSchema"
                }
              }
            }
          },
          "404": {
            "description": "Tasks reward not found."
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Generate Token",
        "description": "Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.",
        "operationId": "generate_token_token_post",
        "responses": {
          "200": {
            "description": "Token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseSchema"
                }
              }
            }
          },
          "455": {
            "description": "Token generation failed."
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "Get Status",
        "description": "Return the status of the game server.",
        "operationId": "get_status__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountAchievementSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the achievement."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the achievement. "
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the achievement."
          },
          "points": {
            "type": "integer",
            "title": "Points",
            "description": "Points of the achievement. Used for the leaderboard."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AchievementType"
              }
            ],
            "description": "Type of achievement."
          },
          "target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target",
            "description": "Target of the achievement."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total to do."
          },
          "rewards": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AchievementRewardsSchema"
              }
            ],
            "description": "Rewards."
          },
          "current": {
            "type": "integer",
            "title": "Current",
            "description": "Current progress."
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "Completed at."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "description",
          "points",
          "type",
          "target",
          "total",
          "rewards",
          "current",
          "completed_at"
        ],
        "title": "AccountAchievementSchema"
      },
      "AccountDetails": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username."
          },
          "subscribed": {
            "type": "boolean",
            "title": "Subscribed",
            "description": "Subscribed for the current season."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountStatus"
              }
            ],
            "description": "Member status."
          },
          "badges": {
            "items": {},
            "type": "array",
            "title": "Badges",
            "description": "Account badges."
          },
          "achievements_points": {
            "type": "integer",
            "title": "Achievements Points",
            "description": "Achievement points."
          },
          "banned": {
            "type": "boolean",
            "title": "Banned",
            "description": "Banned."
          },
          "ban_reason": {
            "type": "string",
            "title": "Ban Reason",
            "description": "Ban reason."
          }
        },
        "type": "object",
        "required": [
          "username",
          "subscribed",
          "status",
          "achievements_points",
          "banned"
        ],
        "title": "AccountDetails"
      },
      "AccountDetailsSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AccountDetails"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AccountDetailsSchema"
      },
      "AccountLeaderboardSchema": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position",
            "description": "Position in the leaderboard."
          },
          "account": {
            "type": "string",
            "title": "Account",
            "description": "Account name."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountStatus"
              }
            ],
            "description": "Member status."
          },
          "achievements_points": {
            "type": "integer",
            "title": "Achievements Points",
            "description": "Achievements points."
          },
          "gold": {
            "type": "integer",
            "title": "Gold",
            "description": "Gold in the account."
          }
        },
        "type": "object",
        "required": [
          "position",
          "account",
          "status",
          "achievements_points",
          "gold"
        ],
        "title": "AccountLeaderboardSchema"
      },
      "AccountLeaderboardType": {
        "type": "string",
        "enum": [
          "achievements_points",
          "gold"
        ],
        "title": "AccountLeaderboardType"
      },
      "AccountLeaderboardType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/AccountLeaderboardType"
      },
      "AccountStatus": {
        "type": "string",
        "enum": [
          "standard",
          "founder",
          "gold_founder",
          "vip_founder"
        ],
        "title": "AccountStatus"
      },
      "AchievementResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AchievementSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "AchievementResponseSchema"
      },
      "AchievementRewardsSchema": {
        "properties": {
          "gold": {
            "type": "integer",
            "title": "Gold",
            "description": "Gold rewards."
          }
        },
        "type": "object",
        "required": [
          "gold"
        ],
        "title": "AchievementRewardsSchema"
      },
      "AchievementSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the achievement."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the achievement. "
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the achievement."
          },
          "points": {
            "type": "integer",
            "title": "Points",
            "description": "Points of the achievement. Used for the leaderboard."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AchievementType"
              }
            ],
            "description": "Type of achievement."
          },
          "target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target",
            "description": "Target of the achievement."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total to do."
          },
          "rewards": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AchievementRewardsSchema"
              }
            ],
            "description": "Rewards."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "description",
          "points",
          "type",
          "target",
          "total",
          "rewards"
        ],
        "title": "AchievementSchema"
      },
      "AchievementType": {
        "type": "string",
        "enum": [
          "combat_kill",
          "combat_drop",
          "combat_level",
          "gathering",
          "crafting",
          "recycling",
          "task",
          "other",
          "use"
        ],
        "title": "AchievementType"
      },
      "AchievementType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/AchievementType"
      },
      "ActionType": {
        "type": "string",
        "enum": [
          "movement",
          "fight",
          "crafting",
          "gathering",
          "buy_ge",
          "sell_ge",
          "buy_npc",
          "sell_npc",
          "cancel_ge",
          "delete_item",
          "deposit",
          "withdraw",
          "deposit_gold",
          "withdraw_gold",
          "equip",
          "unequip",
          "task",
          "christmas_exchange",
          "recycling",
          "rest",
          "use",
          "buy_bank_expansion"
        ],
        "title": "ActionType"
      },
      "ActiveEventSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the event."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the event."
          },
          "map": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapSchema"
              }
            ],
            "description": "Map of the event."
          },
          "previous_skin": {
            "type": "string",
            "title": "Previous Skin",
            "description": "Previous map skin."
          },
          "duration": {
            "type": "integer",
            "title": "Duration",
            "description": "Duration in minutes."
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Expiration",
            "description": "Expiration datetime."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Start datetime."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "map",
          "previous_skin",
          "duration",
          "expiration",
          "created_at"
        ],
        "title": "ActiveEventSchema"
      },
      "AddAccountSchema": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 32,
            "minLength": 6,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Username",
            "description": "Your desired username."
          },
          "password": {
            "type": "string",
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[^\\s]+$",
            "title": "Password",
            "description": "Your password."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "AddAccountSchema"
      },
      "AddCharacterSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 12,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Name",
            "description": "Your desired character name. It's unique and all players can see it."
          },
          "skin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSkin"
              }
            ],
            "description": "Your desired skin."
          }
        },
        "type": "object",
        "required": [
          "name",
          "skin"
        ],
        "title": "AddCharacterSchema"
      },
      "AnnouncementSchema": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Announcement text."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Datetime of the announcement."
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "AnnouncementSchema"
      },
      "BadgeConditionSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the condition."
          },
          "quantity": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quantity",
            "description": "Quantity of the condition (if any)."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity"
        ],
        "title": "BadgeConditionSchema"
      },
      "BadgeResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BadgeSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "BadgeResponseSchema"
      },
      "BadgeSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the badge. This is the badge's unique identifier (ID)."
          },
          "season": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Season",
            "description": "Season of the badge."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the badge."
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/BadgeConditionSchema"
            },
            "type": "array",
            "title": "Conditions",
            "description": "Conditions to get the badge."
          }
        },
        "type": "object",
        "required": [
          "code",
          "description",
          "conditions"
        ],
        "title": "BadgeSchema"
      },
      "BankExtensionSchema": {
        "properties": {
          "price": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Price",
            "description": "Price of the bank extension."
          }
        },
        "type": "object",
        "required": [
          "price"
        ],
        "title": "BankExtensionSchema"
      },
      "BankExtensionTransactionResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BankExtensionTransactionSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "BankExtensionTransactionResponseSchema"
      },
      "BankExtensionTransactionSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankExtensionSchema"
              }
            ],
            "description": "Transaction details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "transaction",
          "character"
        ],
        "title": "BankExtensionTransactionSchema"
      },
      "BankGoldTransactionResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BankGoldTransactionSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "BankGoldTransactionResponseSchema"
      },
      "BankGoldTransactionSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "bank": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GoldSchema"
              }
            ],
            "description": "Bank details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "bank",
          "character"
        ],
        "title": "BankGoldTransactionSchema"
      },
      "BankItemTransactionResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BankItemTransactionSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "BankItemTransactionResponseSchema"
      },
      "BankItemTransactionSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSchema"
              }
            ],
            "description": "Item details."
          },
          "bank": {
            "items": {
              "$ref": "#/components/schemas/SimpleItemSchema"
            },
            "type": "array",
            "title": "Bank",
            "description": "Items in your banks."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "item",
          "bank",
          "character"
        ],
        "title": "BankItemTransactionSchema"
      },
      "BankResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BankSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "BankResponseSchema"
      },
      "BankSchema": {
        "properties": {
          "slots": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Slots",
            "description": "Maximum slots in your bank."
          },
          "expansions": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Expansions",
            "description": "Bank expansions."
          },
          "next_expansion_cost": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Next Expansion Cost",
            "description": "Next expansion cost."
          },
          "gold": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Gold",
            "description": "Quantity of gold in your bank."
          }
        },
        "type": "object",
        "required": [
          "slots",
          "expansions",
          "next_expansion_cost",
          "gold"
        ],
        "title": "BankSchema"
      },
      "BlockedHitsSchema": {
        "properties": {
          "fire": {
            "type": "integer",
            "title": "Fire",
            "description": "The amount of fire hits blocked."
          },
          "earth": {
            "type": "integer",
            "title": "Earth",
            "description": "The amount of earth hits blocked."
          },
          "water": {
            "type": "integer",
            "title": "Water",
            "description": "The amount of water hits blocked."
          },
          "air": {
            "type": "integer",
            "title": "Air",
            "description": "The amount of air hits blocked."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The amount of total hits blocked."
          }
        },
        "type": "object",
        "required": [
          "fire",
          "earth",
          "water",
          "air",
          "total"
        ],
        "title": "BlockedHitsSchema"
      },
      "ChangePassword": {
        "properties": {
          "current_password": {
            "type": "string",
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[^\\s]+$",
            "title": "Current Password",
            "description": "Your password."
          },
          "new_password": {
            "type": "string",
            "maxLength": 50,
            "minLength": 5,
            "pattern": "^[^\\s]+$",
            "title": "New Password",
            "description": "New password."
          }
        },
        "type": "object",
        "required": [
          "current_password",
          "new_password"
        ],
        "title": "ChangePassword"
      },
      "CharacterFightDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "fight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FightSchema"
              }
            ],
            "description": "Fight details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "fight",
          "character"
        ],
        "title": "CharacterFightDataSchema"
      },
      "CharacterFightResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CharacterFightDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CharacterFightResponseSchema"
      },
      "CharacterLeaderboardSchema": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position",
            "description": "Position in the leaderboard."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Character name."
          },
          "account": {
            "type": "string",
            "title": "Account",
            "description": "Account name."
          },
          "skin": {
            "type": "string",
            "title": "Skin",
            "description": "Character skin code."
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Combat level."
          },
          "total_xp": {
            "type": "integer",
            "title": "Total Xp",
            "description": "Total XP of your character."
          },
          "mining_level": {
            "type": "integer",
            "title": "Mining Level",
            "description": "Mining level."
          },
          "mining_total_xp": {
            "type": "integer",
            "title": "Mining Total Xp",
            "description": "Mining total xp."
          },
          "woodcutting_level": {
            "type": "integer",
            "title": "Woodcutting Level",
            "description": "Woodcutting level."
          },
          "woodcutting_total_xp": {
            "type": "integer",
            "title": "Woodcutting Total Xp",
            "description": "Woodcutting total xp."
          },
          "fishing_level": {
            "type": "integer",
            "title": "Fishing Level",
            "description": "Fishing level."
          },
          "fishing_total_xp": {
            "type": "integer",
            "title": "Fishing Total Xp",
            "description": "Fishing total xp."
          },
          "weaponcrafting_level": {
            "type": "integer",
            "title": "Weaponcrafting Level",
            "description": "Weaponcrafting level."
          },
          "weaponcrafting_total_xp": {
            "type": "integer",
            "title": "Weaponcrafting Total Xp",
            "description": "Weaponcrafting total xp."
          },
          "gearcrafting_level": {
            "type": "integer",
            "title": "Gearcrafting Level",
            "description": "Gearcrafting level."
          },
          "gearcrafting_total_xp": {
            "type": "integer",
            "title": "Gearcrafting Total Xp",
            "description": "Gearcrafting total xp."
          },
          "jewelrycrafting_level": {
            "type": "integer",
            "title": "Jewelrycrafting Level",
            "description": "Jewelrycrafting level."
          },
          "jewelrycrafting_total_xp": {
            "type": "integer",
            "title": "Jewelrycrafting Total Xp",
            "description": "Jewelrycrafting total xp."
          },
          "cooking_level": {
            "type": "integer",
            "title": "Cooking Level",
            "description": "Cooking level."
          },
          "cooking_total_xp": {
            "type": "integer",
            "title": "Cooking Total Xp",
            "description": "Cooking total xp."
          },
          "alchemy_level": {
            "type": "integer",
            "title": "Alchemy Level",
            "description": "Alchemy level."
          },
          "alchemy_total_xp": {
            "type": "integer",
            "title": "Alchemy Total Xp",
            "description": "Alchemy total xp."
          },
          "gold": {
            "type": "integer",
            "title": "Gold",
            "description": "The numbers of gold on this character."
          }
        },
        "type": "object",
        "required": [
          "position",
          "name",
          "account",
          "skin",
          "level",
          "total_xp",
          "mining_level",
          "mining_total_xp",
          "woodcutting_level",
          "woodcutting_total_xp",
          "fishing_level",
          "fishing_total_xp",
          "weaponcrafting_level",
          "weaponcrafting_total_xp",
          "gearcrafting_level",
          "gearcrafting_total_xp",
          "jewelrycrafting_level",
          "jewelrycrafting_total_xp",
          "cooking_level",
          "cooking_total_xp",
          "alchemy_level",
          "alchemy_total_xp",
          "gold"
        ],
        "title": "CharacterLeaderboardSchema"
      },
      "CharacterLeaderboardType": {
        "type": "string",
        "enum": [
          "combat",
          "woodcutting",
          "mining",
          "fishing",
          "weaponcrafting",
          "gearcrafting",
          "jewelrycrafting",
          "cooking",
          "alchemy"
        ],
        "title": "CharacterLeaderboardType"
      },
      "CharacterLeaderboardType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/CharacterLeaderboardType"
      },
      "CharacterMovementDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details"
          },
          "destination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapSchema"
              }
            ],
            "description": "Destination details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Character details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "destination",
          "character"
        ],
        "title": "CharacterMovementDataSchema"
      },
      "CharacterMovementResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CharacterMovementDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CharacterMovementResponseSchema"
      },
      "CharacterResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CharacterSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CharacterResponseSchema"
      },
      "CharacterRestDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details"
          },
          "hp_restored": {
            "type": "integer",
            "title": "Hp Restored",
            "description": "The amount of HP restored."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Character details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "hp_restored",
          "character"
        ],
        "title": "CharacterRestDataSchema"
      },
      "CharacterRestResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CharacterRestDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CharacterRestResponseSchema"
      },
      "CharacterSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the character."
          },
          "account": {
            "type": "string",
            "title": "Account",
            "description": "Account name."
          },
          "skin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSkin"
              }
            ],
            "description": "Character skin code."
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Combat level."
          },
          "xp": {
            "type": "integer",
            "title": "Xp",
            "description": "The current xp level of the combat level."
          },
          "max_xp": {
            "type": "integer",
            "title": "Max Xp",
            "description": "XP required to level up the character."
          },
          "gold": {
            "type": "integer",
            "title": "Gold",
            "description": "The numbers of gold on this character."
          },
          "speed": {
            "type": "integer",
            "title": "Speed",
            "description": "*Not available, on the roadmap. Character movement speed."
          },
          "mining_level": {
            "type": "integer",
            "title": "Mining Level",
            "description": "Mining level."
          },
          "mining_xp": {
            "type": "integer",
            "title": "Mining Xp",
            "description": "The current xp level of the Mining skill."
          },
          "mining_max_xp": {
            "type": "integer",
            "title": "Mining Max Xp",
            "description": "Mining XP required to level up the skill."
          },
          "woodcutting_level": {
            "type": "integer",
            "title": "Woodcutting Level",
            "description": "Woodcutting level."
          },
          "woodcutting_xp": {
            "type": "integer",
            "title": "Woodcutting Xp",
            "description": "The current xp level of the Woodcutting skill."
          },
          "woodcutting_max_xp": {
            "type": "integer",
            "title": "Woodcutting Max Xp",
            "description": "Woodcutting XP required to level up the skill."
          },
          "fishing_level": {
            "type": "integer",
            "title": "Fishing Level",
            "description": "Fishing level."
          },
          "fishing_xp": {
            "type": "integer",
            "title": "Fishing Xp",
            "description": "The current xp level of the Fishing skill."
          },
          "fishing_max_xp": {
            "type": "integer",
            "title": "Fishing Max Xp",
            "description": "Fishing XP required to level up the skill."
          },
          "weaponcrafting_level": {
            "type": "integer",
            "title": "Weaponcrafting Level",
            "description": "Weaponcrafting level."
          },
          "weaponcrafting_xp": {
            "type": "integer",
            "title": "Weaponcrafting Xp",
            "description": "The current xp level of the Weaponcrafting skill."
          },
          "weaponcrafting_max_xp": {
            "type": "integer",
            "title": "Weaponcrafting Max Xp",
            "description": "Weaponcrafting XP required to level up the skill."
          },
          "gearcrafting_level": {
            "type": "integer",
            "title": "Gearcrafting Level",
            "description": "Gearcrafting level."
          },
          "gearcrafting_xp": {
            "type": "integer",
            "title": "Gearcrafting Xp",
            "description": "The current xp level of the Gearcrafting skill."
          },
          "gearcrafting_max_xp": {
            "type": "integer",
            "title": "Gearcrafting Max Xp",
            "description": "Gearcrafting XP required to level up the skill."
          },
          "jewelrycrafting_level": {
            "type": "integer",
            "title": "Jewelrycrafting Level",
            "description": "Jewelrycrafting level."
          },
          "jewelrycrafting_xp": {
            "type": "integer",
            "title": "Jewelrycrafting Xp",
            "description": "The current xp level of the Jewelrycrafting skill."
          },
          "jewelrycrafting_max_xp": {
            "type": "integer",
            "title": "Jewelrycrafting Max Xp",
            "description": "Jewelrycrafting XP required to level up the skill."
          },
          "cooking_level": {
            "type": "integer",
            "title": "Cooking Level",
            "description": "The current xp level of the Cooking skill."
          },
          "cooking_xp": {
            "type": "integer",
            "title": "Cooking Xp",
            "description": "Cooking XP."
          },
          "cooking_max_xp": {
            "type": "integer",
            "title": "Cooking Max Xp",
            "description": "Cooking XP required to level up the skill."
          },
          "alchemy_level": {
            "type": "integer",
            "title": "Alchemy Level",
            "description": "Alchemy level."
          },
          "alchemy_xp": {
            "type": "integer",
            "title": "Alchemy Xp",
            "description": "Alchemy XP."
          },
          "alchemy_max_xp": {
            "type": "integer",
            "title": "Alchemy Max Xp",
            "description": "Alchemy XP required to level up the skill."
          },
          "hp": {
            "type": "integer",
            "title": "Hp",
            "description": "Character actual HP."
          },
          "max_hp": {
            "type": "integer",
            "title": "Max Hp",
            "description": "Character max HP."
          },
          "haste": {
            "type": "integer",
            "title": "Haste",
            "description": "*Increase speed attack (reduce fight cooldown)"
          },
          "critical_strike": {
            "type": "integer",
            "title": "Critical Strike",
            "description": "% Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x)."
          },
          "wisdom": {
            "type": "integer",
            "title": "Wisdom",
            "description": "Wisdom increases the amount of XP gained from fights (1% extra per 10 wisdom)."
          },
          "prospecting": {
            "type": "integer",
            "title": "Prospecting",
            "description": "Prospecting increases the chances of getting better loot (1% extra per 10 PP)."
          },
          "attack_fire": {
            "type": "integer",
            "title": "Attack Fire",
            "description": "Fire attack."
          },
          "attack_earth": {
            "type": "integer",
            "title": "Attack Earth",
            "description": "Earth attack."
          },
          "attack_water": {
            "type": "integer",
            "title": "Attack Water",
            "description": "Water attack."
          },
          "attack_air": {
            "type": "integer",
            "title": "Attack Air",
            "description": "Air attack."
          },
          "dmg": {
            "type": "integer",
            "title": "Dmg",
            "description": "% Damage. Damage increases your attack in all elements."
          },
          "dmg_fire": {
            "type": "integer",
            "title": "Dmg Fire",
            "description": "% Fire damage. Damage increases your fire attack."
          },
          "dmg_earth": {
            "type": "integer",
            "title": "Dmg Earth",
            "description": "% Earth damage. Damage increases your earth attack."
          },
          "dmg_water": {
            "type": "integer",
            "title": "Dmg Water",
            "description": "% Water damage. Damage increases your water attack."
          },
          "dmg_air": {
            "type": "integer",
            "title": "Dmg Air",
            "description": "% Air damage. Damage increases your air attack."
          },
          "res_fire": {
            "type": "integer",
            "title": "Res Fire",
            "description": "% Fire resistance. Reduces fire attack."
          },
          "res_earth": {
            "type": "integer",
            "title": "Res Earth",
            "description": "% Earth resistance. Reduces earth attack."
          },
          "res_water": {
            "type": "integer",
            "title": "Res Water",
            "description": "% Water resistance. Reduces water attack."
          },
          "res_air": {
            "type": "integer",
            "title": "Res Air",
            "description": "% Air resistance. Reduces air attack."
          },
          "x": {
            "type": "integer",
            "title": "X",
            "description": "Character x coordinate."
          },
          "y": {
            "type": "integer",
            "title": "Y",
            "description": "Character y coordinate."
          },
          "cooldown": {
            "type": "integer",
            "title": "Cooldown",
            "description": "Cooldown in seconds."
          },
          "cooldown_expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Cooldown Expiration",
            "description": "Datetime Cooldown expiration."
          },
          "weapon_slot": {
            "type": "string",
            "title": "Weapon Slot",
            "description": "Weapon slot."
          },
          "rune_slot": {
            "type": "string",
            "title": "Rune Slot",
            "description": "Rune slot."
          },
          "shield_slot": {
            "type": "string",
            "title": "Shield Slot",
            "description": "Shield slot."
          },
          "helmet_slot": {
            "type": "string",
            "title": "Helmet Slot",
            "description": "Helmet slot."
          },
          "body_armor_slot": {
            "type": "string",
            "title": "Body Armor Slot",
            "description": "Body armor slot."
          },
          "leg_armor_slot": {
            "type": "string",
            "title": "Leg Armor Slot",
            "description": "Leg armor slot."
          },
          "boots_slot": {
            "type": "string",
            "title": "Boots Slot",
            "description": "Boots slot."
          },
          "ring1_slot": {
            "type": "string",
            "title": "Ring1 Slot",
            "description": "Ring 1 slot."
          },
          "ring2_slot": {
            "type": "string",
            "title": "Ring2 Slot",
            "description": "Ring 2 slot."
          },
          "amulet_slot": {
            "type": "string",
            "title": "Amulet Slot",
            "description": "Amulet slot."
          },
          "artifact1_slot": {
            "type": "string",
            "title": "Artifact1 Slot",
            "description": "Artifact 1 slot."
          },
          "artifact2_slot": {
            "type": "string",
            "title": "Artifact2 Slot",
            "description": "Artifact 2 slot."
          },
          "artifact3_slot": {
            "type": "string",
            "title": "Artifact3 Slot",
            "description": "Artifact 3 slot."
          },
          "utility1_slot": {
            "type": "string",
            "title": "Utility1 Slot",
            "description": "Utility 1 slot."
          },
          "utility1_slot_quantity": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Utility1 Slot Quantity",
            "description": "Utility 1 quantity."
          },
          "utility2_slot": {
            "type": "string",
            "title": "Utility2 Slot",
            "description": "Utility 2 slot."
          },
          "utility2_slot_quantity": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Utility2 Slot Quantity",
            "description": "Utility 2 quantity."
          },
          "bag_slot": {
            "type": "string",
            "title": "Bag Slot",
            "description": "Bag slot."
          },
          "task": {
            "type": "string",
            "title": "Task",
            "description": "Task in progress."
          },
          "task_type": {
            "type": "string",
            "title": "Task Type",
            "description": "Task type."
          },
          "task_progress": {
            "type": "integer",
            "title": "Task Progress",
            "description": "Task progression."
          },
          "task_total": {
            "type": "integer",
            "title": "Task Total",
            "description": "Task total objective."
          },
          "inventory_max_items": {
            "type": "integer",
            "title": "Inventory Max Items",
            "description": "Inventory max items."
          },
          "inventory": {
            "items": {
              "$ref": "#/components/schemas/InventorySlot"
            },
            "type": "array",
            "title": "Inventory",
            "description": "List of inventory slots."
          }
        },
        "type": "object",
        "required": [
          "name",
          "account",
          "skin",
          "level",
          "xp",
          "max_xp",
          "gold",
          "speed",
          "mining_level",
          "mining_xp",
          "mining_max_xp",
          "woodcutting_level",
          "woodcutting_xp",
          "woodcutting_max_xp",
          "fishing_level",
          "fishing_xp",
          "fishing_max_xp",
          "weaponcrafting_level",
          "weaponcrafting_xp",
          "weaponcrafting_max_xp",
          "gearcrafting_level",
          "gearcrafting_xp",
          "gearcrafting_max_xp",
          "jewelrycrafting_level",
          "jewelrycrafting_xp",
          "jewelrycrafting_max_xp",
          "cooking_level",
          "cooking_xp",
          "cooking_max_xp",
          "alchemy_level",
          "alchemy_xp",
          "alchemy_max_xp",
          "hp",
          "max_hp",
          "haste",
          "critical_strike",
          "wisdom",
          "prospecting",
          "attack_fire",
          "attack_earth",
          "attack_water",
          "attack_air",
          "dmg",
          "dmg_fire",
          "dmg_earth",
          "dmg_water",
          "dmg_air",
          "res_fire",
          "res_earth",
          "res_water",
          "res_air",
          "x",
          "y",
          "cooldown",
          "weapon_slot",
          "rune_slot",
          "shield_slot",
          "helmet_slot",
          "body_armor_slot",
          "leg_armor_slot",
          "boots_slot",
          "ring1_slot",
          "ring2_slot",
          "amulet_slot",
          "artifact1_slot",
          "artifact2_slot",
          "artifact3_slot",
          "utility1_slot",
          "utility1_slot_quantity",
          "utility2_slot",
          "utility2_slot_quantity",
          "bag_slot",
          "task",
          "task_type",
          "task_progress",
          "task_total",
          "inventory_max_items"
        ],
        "title": "CharacterSchema"
      },
      "CharacterSkin": {
        "type": "string",
        "enum": [
          "men1",
          "men2",
          "men3",
          "women1",
          "women2",
          "women3"
        ],
        "title": "CharacterSkin"
      },
      "CooldownSchema": {
        "properties": {
          "total_seconds": {
            "type": "integer",
            "title": "Total Seconds",
            "description": "The total seconds of the cooldown."
          },
          "remaining_seconds": {
            "type": "integer",
            "title": "Remaining Seconds",
            "description": "The remaining seconds of the cooldown."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At",
            "description": "The start of the cooldown."
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Expiration",
            "description": "The expiration of the cooldown."
          },
          "reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionType"
              }
            ],
            "description": "The reason of the cooldown."
          }
        },
        "type": "object",
        "required": [
          "total_seconds",
          "remaining_seconds",
          "started_at",
          "expiration",
          "reason"
        ],
        "title": "CooldownSchema"
      },
      "CraftSchema": {
        "properties": {
          "skill": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CraftSkill"
              }
            ],
            "title": "Skill code",
            "description": "Skill required to craft the item."
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "The skill level required to craft the item."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/SimpleItemSchema"
            },
            "type": "array",
            "title": "Items",
            "description": "List of items required to craft the item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Quantity of items crafted."
          }
        },
        "type": "object",
        "title": "CraftSchema"
      },
      "CraftSkill": {
        "type": "string",
        "enum": [
          "weaponcrafting",
          "gearcrafting",
          "jewelrycrafting",
          "cooking",
          "woodcutting",
          "mining",
          "alchemy"
        ],
        "title": "CraftSkill"
      },
      "CraftSkill_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/CraftSkill"
      },
      "CraftingSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Craft code",
            "description": "Craft code."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Quantity of items to craft.",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "code"
        ],
        "title": "CraftingSchema"
      },
      "DataPage_AccountAchievementSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AccountAchievementSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[AccountAchievementSchema]"
      },
      "DataPage_AccountLeaderboardSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AccountLeaderboardSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[AccountLeaderboardSchema]"
      },
      "DataPage_AchievementSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AchievementSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[AchievementSchema]"
      },
      "DataPage_ActiveEventSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ActiveEventSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[ActiveEventSchema]"
      },
      "DataPage_BadgeSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/BadgeSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[BadgeSchema]"
      },
      "DataPage_CharacterLeaderboardSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CharacterLeaderboardSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[CharacterLeaderboardSchema]"
      },
      "DataPage_DropRateSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DropRateSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[DropRateSchema]"
      },
      "DataPage_EffectSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EffectSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[EffectSchema]"
      },
      "DataPage_EventSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EventSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[EventSchema]"
      },
      "DataPage_GEOrderSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/GEOrderSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[GEOrderSchema]"
      },
      "DataPage_GeOrderHistorySchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/GeOrderHistorySchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[GeOrderHistorySchema]"
      },
      "DataPage_ItemSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ItemSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[ItemSchema]"
      },
      "DataPage_LogSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/LogSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[LogSchema]"
      },
      "DataPage_MapSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/MapSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[MapSchema]"
      },
      "DataPage_MonsterSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/MonsterSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[MonsterSchema]"
      },
      "DataPage_NPCItem_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/NPCItem"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[NPCItem]"
      },
      "DataPage_NPCSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/NPCSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[NPCSchema]"
      },
      "DataPage_ResourceSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ResourceSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[ResourceSchema]"
      },
      "DataPage_SimpleItemSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SimpleItemSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[SimpleItemSchema]"
      },
      "DataPage_TaskFullSchema_": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TaskFullSchema"
            },
            "type": "array",
            "title": "Data"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "page": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Page"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "pages": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "data",
          "total",
          "page",
          "size"
        ],
        "title": "DataPage[TaskFullSchema]"
      },
      "DeleteCharacterSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 12,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Name",
            "description": "Character name."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DeleteCharacterSchema"
      },
      "DeleteItemResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeleteItemSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "DeleteItemResponseSchema"
      },
      "DeleteItemSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleItemSchema"
              }
            ],
            "description": "Item details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "item",
          "character"
        ],
        "title": "DeleteItemSchema"
      },
      "DepositWithdrawGoldSchema": {
        "properties": {
          "quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Quantity of gold."
          }
        },
        "type": "object",
        "required": [
          "quantity"
        ],
        "title": "DepositWithdrawGoldSchema"
      },
      "DestinationSchema": {
        "properties": {
          "x": {
            "type": "integer",
            "title": "X",
            "description": "The x coordinate of the destination."
          },
          "y": {
            "type": "integer",
            "title": "Y",
            "description": "The y coordinate of the destination."
          }
        },
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "title": "DestinationSchema"
      },
      "DropRateSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Item code",
            "description": "Item code."
          },
          "rate": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Rate",
            "description": "Chance rate. (1/rate)"
          },
          "min_quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Min Quantity",
            "description": "Minimum quantity."
          },
          "max_quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Quantity",
            "description": "Maximum quantity."
          }
        },
        "type": "object",
        "required": [
          "code",
          "rate",
          "min_quantity",
          "max_quantity"
        ],
        "title": "DropRateSchema"
      },
      "DropSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code of the item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the item."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity"
        ],
        "title": "DropSchema"
      },
      "EffectResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EffectSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "EffectResponseSchema"
      },
      "EffectSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the monster."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code of the effect. This is the effect's unique identifier (ID)."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the effect. This is a brief description of the effect."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EffectType"
              }
            ],
            "description": "Type of the effect."
          },
          "subtype": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EffectSubtype"
              }
            ],
            "description": "Subtype of the effect."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "description",
          "type",
          "subtype"
        ],
        "title": "EffectSchema"
      },
      "EffectSubtype": {
        "type": "string",
        "enum": [
          "stat",
          "other",
          "heal",
          "buff",
          "debuff",
          "special",
          "gathering",
          "teleport",
          "gold"
        ],
        "title": "EffectSubtype"
      },
      "EffectType": {
        "type": "string",
        "enum": [
          "equipment",
          "consumable",
          "combat",
          "item"
        ],
        "title": "EffectType"
      },
      "EquipRequestSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "slot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSlot"
              }
            ],
            "description": "Item slot."
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSchema"
              }
            ],
            "description": "Item details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "slot",
          "item",
          "character"
        ],
        "title": "EquipRequestSchema"
      },
      "EquipSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Code",
            "description": "Item code."
          },
          "slot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSlot"
              }
            ],
            "description": "Item slot."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity. Applicable to utilitys only.",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "code",
          "slot"
        ],
        "title": "EquipSchema"
      },
      "EquipmentResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EquipRequestSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "EquipmentResponseSchema"
      },
      "EventContentSchema": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the event."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code content."
          }
        },
        "type": "object",
        "required": [
          "type",
          "code"
        ],
        "title": "EventContentSchema"
      },
      "EventMapSchema": {
        "properties": {
          "x": {
            "type": "integer",
            "title": "X",
            "description": "Position X of the map."
          },
          "y": {
            "type": "integer",
            "title": "Y",
            "description": "Position Y of the map."
          }
        },
        "type": "object",
        "required": [
          "x",
          "y"
        ],
        "title": "EventMapSchema"
      },
      "EventSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the event."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the event."
          },
          "maps": {
            "items": {
              "$ref": "#/components/schemas/EventMapSchema"
            },
            "type": "array",
            "title": "Maps",
            "description": "Map list of the event."
          },
          "skin": {
            "type": "string",
            "title": "Skin",
            "description": "Map skin of the event."
          },
          "duration": {
            "type": "integer",
            "title": "Duration",
            "description": "Duration in minutes."
          },
          "rate": {
            "type": "integer",
            "title": "Rate",
            "description": "Rate spawn of the event. (1/rate every minute)"
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventContentSchema"
              }
            ],
            "description": "Content of the event."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "maps",
          "skin",
          "duration",
          "rate",
          "content"
        ],
        "title": "EventSchema"
      },
      "FightResult": {
        "type": "string",
        "enum": [
          "win",
          "loss"
        ],
        "title": "FightResult"
      },
      "FightSchema": {
        "properties": {
          "xp": {
            "type": "integer",
            "title": "Xp",
            "description": "The amount of xp gained by the fight."
          },
          "gold": {
            "type": "integer",
            "title": "Gold",
            "description": "The amount of gold gained by the fight."
          },
          "drops": {
            "items": {
              "$ref": "#/components/schemas/DropSchema"
            },
            "type": "array",
            "title": "Drops",
            "description": "The items dropped by the fight."
          },
          "turns": {
            "type": "integer",
            "title": "Turns",
            "description": "Numbers of the turns of the combat."
          },
          "monster_blocked_hits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockedHitsSchema"
              }
            ],
            "description": "The amount of blocked hits by the monster."
          },
          "player_blocked_hits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockedHitsSchema"
              }
            ],
            "description": "The amount of blocked hits by the player."
          },
          "logs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Logs",
            "description": "The fight logs."
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FightResult"
              }
            ],
            "description": "The result of the fight."
          }
        },
        "type": "object",
        "required": [
          "xp",
          "gold",
          "drops",
          "turns",
          "monster_blocked_hits",
          "player_blocked_hits",
          "logs",
          "result"
        ],
        "title": "FightSchema"
      },
      "GEBuyOrderSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Order id."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          }
        },
        "type": "object",
        "required": [
          "id",
          "quantity"
        ],
        "title": "GEBuyOrderSchema"
      },
      "GECancelOrderSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Order id."
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "GECancelOrderSchema"
      },
      "GECreateOrderTransactionResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GEOrderTransactionSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GECreateOrderTransactionResponseSchema"
      },
      "GEOrderCreatedSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Order id."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Order created at."
          },
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          },
          "price": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Price",
            "description": "Item price per unit."
          },
          "total_price": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Total Price",
            "description": "Total price."
          },
          "tax": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Tax",
            "description": "Order creation tax (3%, minimum 1)"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "code",
          "quantity",
          "price",
          "total_price",
          "tax"
        ],
        "title": "GEOrderCreatedSchema"
      },
      "GEOrderCreationrSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          },
          "price": {
            "type": "integer",
            "maximum": 1000000000.0,
            "minimum": 1.0,
            "title": "Price",
            "description": "Item price per unit."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity",
          "price"
        ],
        "title": "GEOrderCreationrSchema"
      },
      "GEOrderReponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GEOrderSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GEOrderReponseSchema"
      },
      "GEOrderSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Order id."
          },
          "seller": {
            "type": "string",
            "title": "Seller",
            "description": "Seller account name."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          },
          "price": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Price",
            "description": "Item price per unit."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Order created at."
          }
        },
        "type": "object",
        "required": [
          "id",
          "seller",
          "code",
          "quantity",
          "price",
          "created_at"
        ],
        "title": "GEOrderSchema"
      },
      "GEOrderTransactionSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GEOrderCreatedSchema"
              }
            ],
            "description": "Order details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Character details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "order",
          "character"
        ],
        "title": "GEOrderTransactionSchema"
      },
      "GETransactionListSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GETransactionSchema"
              }
            ],
            "description": "Transaction details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Character details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "order",
          "character"
        ],
        "title": "GETransactionListSchema"
      },
      "GETransactionResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GETransactionListSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "GETransactionResponseSchema"
      },
      "GETransactionSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Order id."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Item quantity."
          },
          "price": {
            "type": "integer",
            "title": "Price",
            "description": "Item price."
          },
          "total_price": {
            "type": "integer",
            "title": "Total Price",
            "description": "Total price of the transaction."
          }
        },
        "type": "object",
        "required": [
          "id",
          "code",
          "quantity",
          "price",
          "total_price"
        ],
        "title": "GETransactionSchema"
      },
      "GatheringSkill": {
        "type": "string",
        "enum": [
          "mining",
          "woodcutting",
          "fishing",
          "alchemy"
        ],
        "title": "GatheringSkill"
      },
      "GatheringSkill_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/GatheringSkill"
      },
      "GeOrderHistorySchema": {
        "properties": {
          "order_id": {
            "type": "string",
            "title": "Order Id",
            "description": "Order id."
          },
          "seller": {
            "type": "string",
            "title": "Seller",
            "description": "Seller account name."
          },
          "buyer": {
            "type": "string",
            "title": "Buyer",
            "description": "Buyer account name."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          },
          "price": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Price",
            "description": "Item price per unit."
          },
          "sold_at": {
            "type": "string",
            "format": "date-time",
            "title": "Sold At",
            "description": "Sale datetime."
          }
        },
        "type": "object",
        "required": [
          "order_id",
          "seller",
          "buyer",
          "code",
          "quantity",
          "price",
          "sold_at"
        ],
        "title": "GeOrderHistorySchema"
      },
      "GoldSchema": {
        "properties": {
          "quantity": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Quantity",
            "description": "Quantity of gold."
          }
        },
        "type": "object",
        "required": [
          "quantity"
        ],
        "title": "GoldSchema"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InventorySlot": {
        "properties": {
          "slot": {
            "type": "integer",
            "title": "Slot",
            "description": "Inventory slot identifier."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Quantity in the slot."
          }
        },
        "type": "object",
        "required": [
          "slot",
          "code",
          "quantity"
        ],
        "title": "InventorySlot"
      },
      "ItemResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ItemSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ItemResponseSchema"
      },
      "ItemSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Item name."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code. This is the item's unique identifier (ID)."
          },
          "level": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Level",
            "description": "Item level."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Item type."
          },
          "subtype": {
            "type": "string",
            "title": "Subtype",
            "description": "Item subtype."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Item description."
          },
          "effects": {
            "items": {
              "$ref": "#/components/schemas/SimpleEffectSchema"
            },
            "type": "array",
            "title": "Effects",
            "description": "List of object effects. For equipment, it will include item stats."
          },
          "craft": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CraftSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "Craft information. If applicable."
          },
          "tradeable": {
            "type": "boolean",
            "title": "Tradeable",
            "description": "Item tradeable status. A non-tradeable item cannot be exchanged or sold."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "level",
          "type",
          "subtype",
          "description",
          "tradeable"
        ],
        "title": "ItemSchema"
      },
      "ItemSlot": {
        "type": "string",
        "enum": [
          "weapon",
          "shield",
          "helmet",
          "body_armor",
          "leg_armor",
          "boots",
          "ring1",
          "ring2",
          "amulet",
          "artifact1",
          "artifact2",
          "artifact3",
          "utility1",
          "utility2",
          "bag",
          "rune"
        ],
        "title": "ItemSlot"
      },
      "ItemType": {
        "type": "string",
        "enum": [
          "utility",
          "body_armor",
          "weapon",
          "resource",
          "leg_armor",
          "helmet",
          "boots",
          "shield",
          "amulet",
          "ring",
          "artifact",
          "currency",
          "consumable",
          "rune",
          "bag"
        ],
        "title": "ItemType"
      },
      "ItemType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/ItemType"
      },
      "LogSchema": {
        "properties": {
          "character": {
            "type": "string",
            "title": "Character",
            "description": "Character name."
          },
          "account": {
            "type": "string",
            "title": "Account",
            "description": "Account character."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LogType"
              }
            ],
            "description": "Type of action."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of action."
          },
          "content": {
            "title": "Content",
            "description": "Content of action."
          },
          "cooldown": {
            "type": "integer",
            "title": "Cooldown",
            "description": "Cooldown in seconds."
          },
          "cooldown_expiration": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cooldown Expiration",
            "description": "Datetime of cooldown expiration."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Datetime of creation."
          }
        },
        "type": "object",
        "required": [
          "character",
          "account",
          "type",
          "description",
          "content",
          "cooldown",
          "cooldown_expiration",
          "created_at"
        ],
        "title": "LogSchema"
      },
      "LogType": {
        "type": "string",
        "enum": [
          "spawn",
          "movement",
          "fight",
          "crafting",
          "gathering",
          "buy_ge",
          "sell_ge",
          "buy_npc",
          "sell_npc",
          "cancel_ge",
          "delete_item",
          "deposit",
          "withdraw",
          "deposit_gold",
          "withdraw_gold",
          "equip",
          "unequip",
          "new_task",
          "task_exchange",
          "task_cancelled",
          "task_completed",
          "task_trade",
          "christmas_exchange",
          "recycling",
          "rest",
          "use",
          "buy_bank_expansion",
          "achievement"
        ],
        "title": "LogType"
      },
      "MapContentSchema": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Type of the content."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Code of the content."
          }
        },
        "type": "object",
        "required": [
          "type",
          "code"
        ],
        "title": "MapContentSchema"
      },
      "MapContentType": {
        "type": "string",
        "enum": [
          "monster",
          "resource",
          "workshop",
          "bank",
          "grand_exchange",
          "tasks_master",
          "npc"
        ],
        "title": "MapContentType"
      },
      "MapContentType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/MapContentType"
      },
      "MapResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MapSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "MapResponseSchema"
      },
      "MapSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the map."
          },
          "skin": {
            "type": "string",
            "title": "Skin",
            "description": "Skin of the map."
          },
          "x": {
            "type": "integer",
            "title": "X",
            "description": "Position X of the map."
          },
          "y": {
            "type": "integer",
            "title": "Y",
            "description": "Position Y of the map."
          },
          "content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MapContentSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "Content of the map."
          }
        },
        "type": "object",
        "required": [
          "name",
          "skin",
          "x",
          "y",
          "content"
        ],
        "title": "MapSchema"
      },
      "MonsterResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MonsterSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "MonsterResponseSchema"
      },
      "MonsterSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the monster."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code of the monster. This is the monster's unique identifier (ID)."
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Monster level."
          },
          "hp": {
            "type": "integer",
            "title": "Hp",
            "description": "Monster hit points."
          },
          "attack_fire": {
            "type": "integer",
            "title": "Attack Fire",
            "description": "Monster fire attack."
          },
          "attack_earth": {
            "type": "integer",
            "title": "Attack Earth",
            "description": "Monster earth attack."
          },
          "attack_water": {
            "type": "integer",
            "title": "Attack Water",
            "description": "Monster water attack."
          },
          "attack_air": {
            "type": "integer",
            "title": "Attack Air",
            "description": "Monster air attack."
          },
          "res_fire": {
            "type": "integer",
            "title": "Res Fire",
            "description": "Monster % fire resistance."
          },
          "res_earth": {
            "type": "integer",
            "title": "Res Earth",
            "description": "Monster % earth resistance."
          },
          "res_water": {
            "type": "integer",
            "title": "Res Water",
            "description": "Monster % water resistance."
          },
          "res_air": {
            "type": "integer",
            "title": "Res Air",
            "description": "Monster % air resistance."
          },
          "critical_strike": {
            "type": "integer",
            "title": "Critical Strike",
            "description": "Monster % critical strike."
          },
          "effects": {
            "items": {
              "$ref": "#/components/schemas/SimpleEffectSchema"
            },
            "type": "array",
            "title": "Effects",
            "description": "List of effects."
          },
          "min_gold": {
            "type": "integer",
            "title": "Min Gold",
            "description": "Monster minimum gold drop. "
          },
          "max_gold": {
            "type": "integer",
            "title": "Max Gold",
            "description": "Monster maximum gold drop. "
          },
          "drops": {
            "items": {
              "$ref": "#/components/schemas/DropRateSchema"
            },
            "type": "array",
            "title": "Drops",
            "description": "Monster drops. This is a list of items that the monster drops after killing the monster. "
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "level",
          "hp",
          "attack_fire",
          "attack_earth",
          "attack_water",
          "attack_air",
          "res_fire",
          "res_earth",
          "res_water",
          "res_air",
          "critical_strike",
          "min_gold",
          "max_gold",
          "drops"
        ],
        "title": "MonsterSchema"
      },
      "MyAccountDetails": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "Email."
          },
          "subscribed": {
            "type": "boolean",
            "title": "Subscribed",
            "description": "Subscribed for the current season."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountStatus"
              }
            ],
            "description": "Member status."
          },
          "badges": {
            "items": {},
            "type": "array",
            "title": "Badges",
            "description": "Account badges."
          },
          "gems": {
            "type": "integer",
            "title": "Gems",
            "description": "Gems."
          },
          "achievements_points": {
            "type": "integer",
            "title": "Achievements Points",
            "description": "Achievement points."
          },
          "banned": {
            "type": "boolean",
            "title": "Banned",
            "description": "Banned."
          },
          "ban_reason": {
            "type": "string",
            "title": "Ban Reason",
            "description": "Ban reason."
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "subscribed",
          "status",
          "gems",
          "achievements_points",
          "banned"
        ],
        "title": "MyAccountDetails"
      },
      "MyAccountDetailsSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MyAccountDetails"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "MyAccountDetailsSchema"
      },
      "MyCharactersListSchema": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CharacterSchema"
            },
            "type": "array",
            "title": "Data",
            "description": "List of your characters."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "MyCharactersListSchema"
      },
      "NPCItem": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code of the NPC. This is the NPC's unique identifier (ID)."
          },
          "npc": {
            "type": "string",
            "title": "Npc",
            "description": "Code of the NPC that sells/buys the item."
          },
          "buy_price": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Buy Price",
            "description": "Price to buy the item."
          },
          "sell_price": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sell Price",
            "description": "Price to sell the item."
          }
        },
        "type": "object",
        "required": [
          "code",
          "npc",
          "buy_price",
          "sell_price"
        ],
        "title": "NPCItem"
      },
      "NPCResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NPCSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "NPCResponseSchema"
      },
      "NPCSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the NPC."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code of the NPC. This is the NPC's unique identifier (ID)."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the NPC."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NPCType"
              }
            ],
            "description": "Type of the NPC."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "description",
          "type"
        ],
        "title": "NPCSchema"
      },
      "NPCType": {
        "type": "string",
        "const": "merchant",
        "title": "NPCType"
      },
      "NPCType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/NPCType"
      },
      "NpcItemTransactionSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Item quantity."
          },
          "price": {
            "type": "integer",
            "title": "Price",
            "description": "Item price."
          },
          "total_price": {
            "type": "integer",
            "title": "Total Price",
            "description": "Total price of the transaction."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity",
          "price",
          "total_price"
        ],
        "title": "NpcItemTransactionSchema"
      },
      "NpcMerchantBuySchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity"
        ],
        "title": "NpcMerchantBuySchema"
      },
      "NpcMerchantTransactionResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NpcMerchantTransactionSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "NpcMerchantTransactionResponseSchema"
      },
      "NpcMerchantTransactionSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NpcItemTransactionSchema"
              }
            ],
            "description": "Transaction details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Character details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "transaction",
          "character"
        ],
        "title": "NpcMerchantTransactionSchema"
      },
      "RecyclingDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecyclingItemsSchema"
              }
            ],
            "description": "Craft details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "details",
          "character"
        ],
        "title": "RecyclingDataSchema"
      },
      "RecyclingItemsSchema": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DropSchema"
            },
            "type": "array",
            "title": "Items",
            "description": "Objects received."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "RecyclingItemsSchema"
      },
      "RecyclingResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecyclingDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RecyclingResponseSchema"
      },
      "RecyclingSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Item code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Quantity of items to recycle.",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "code"
        ],
        "title": "RecyclingSchema"
      },
      "ResourceResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResourceSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "ResourceResponseSchema"
      },
      "ResourceSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the resource"
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code of the resource. This is the resource's unique identifier (ID)."
          },
          "skill": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GatheringSkill"
              }
            ],
            "title": "Skill code",
            "description": "The skill required to gather this resource."
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "The skill level required to gather this resource."
          },
          "drops": {
            "items": {
              "$ref": "#/components/schemas/DropRateSchema"
            },
            "type": "array",
            "title": "Drops",
            "description": "The drops of this resource."
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "skill",
          "level",
          "drops"
        ],
        "title": "ResourceSchema"
      },
      "ResponseSchema": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ResponseSchema"
      },
      "RewardDataResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RewardDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RewardDataResponseSchema"
      },
      "RewardDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "rewards": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardsSchema"
              }
            ],
            "description": "Reward details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "rewards",
          "character"
        ],
        "title": "RewardDataSchema"
      },
      "RewardResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DropRateSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RewardResponseSchema"
      },
      "RewardsSchema": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SimpleItemSchema"
            },
            "type": "array",
            "title": "Items",
            "description": "Items rewards."
          },
          "gold": {
            "type": "integer",
            "title": "Gold",
            "description": "Gold rewards."
          }
        },
        "type": "object",
        "required": [
          "items",
          "gold"
        ],
        "title": "RewardsSchema"
      },
      "SimpleEffectSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Code",
            "description": "Effect code."
          },
          "value": {
            "type": "integer",
            "title": "Value",
            "description": "Effect value."
          }
        },
        "type": "object",
        "required": [
          "code",
          "value"
        ],
        "title": "SimpleEffectSchema"
      },
      "SimpleItemSchema": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity"
        ],
        "title": "SimpleItemSchema"
      },
      "Skill": {
        "type": "string",
        "enum": [
          "weaponcrafting",
          "gearcrafting",
          "jewelrycrafting",
          "cooking",
          "woodcutting",
          "mining",
          "alchemy",
          "fishing"
        ],
        "title": "Skill"
      },
      "SkillDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SkillInfoSchema"
              }
            ],
            "description": "Craft details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "details",
          "character"
        ],
        "title": "SkillDataSchema"
      },
      "SkillInfoSchema": {
        "properties": {
          "xp": {
            "type": "integer",
            "title": "Xp",
            "description": "The amount of xp gained."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/DropSchema"
            },
            "type": "array",
            "title": "Items",
            "description": "Objects received."
          }
        },
        "type": "object",
        "required": [
          "xp",
          "items"
        ],
        "title": "SkillInfoSchema"
      },
      "SkillResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SkillDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "SkillResponseSchema"
      },
      "Skill_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/Skill"
      },
      "StatusResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/StatusSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "StatusResponseSchema"
      },
      "StatusSchema": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Server status"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Game version."
          },
          "max_level": {
            "type": "integer",
            "title": "Max Level",
            "description": "Maximum level."
          },
          "characters_online": {
            "type": "integer",
            "title": "Characters Online",
            "description": "Characters online."
          },
          "server_time": {
            "type": "string",
            "format": "date-time",
            "title": "Server Time",
            "description": "Server time."
          },
          "announcements": {
            "items": {
              "$ref": "#/components/schemas/AnnouncementSchema"
            },
            "type": "array",
            "title": "Announcements",
            "description": "Server announcements."
          },
          "last_wipe": {
            "type": "string",
            "title": "Last Wipe",
            "description": "Last server wipe."
          },
          "next_wipe": {
            "type": "string",
            "title": "Next Wipe",
            "description": "Next server wipe."
          }
        },
        "type": "object",
        "required": [
          "status",
          "version",
          "max_level",
          "characters_online",
          "server_time",
          "announcements",
          "last_wipe",
          "next_wipe"
        ],
        "title": "StatusSchema"
      },
      "TaskCancelledResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskCancelledSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskCancelledResponseSchema"
      },
      "TaskCancelledSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "character"
        ],
        "title": "TaskCancelledSchema"
      },
      "TaskDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "task": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskSchema"
              }
            ],
            "description": "Task details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "task",
          "character"
        ],
        "title": "TaskDataSchema"
      },
      "TaskFullResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskFullSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskFullResponseSchema"
      },
      "TaskFullSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Task objective."
          },
          "level": {
            "type": "integer",
            "title": "Level",
            "description": "Task level."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskType"
              }
            ],
            "title": "Type",
            "description": "The type of task."
          },
          "min_quantity": {
            "type": "integer",
            "title": "Min Quantity",
            "description": "Minimum amount of task."
          },
          "max_quantity": {
            "type": "integer",
            "title": "Max Quantity",
            "description": "Maximum amount of task."
          },
          "skill": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skill",
            "description": "Skill required to complete the task."
          },
          "rewards": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardsSchema"
              }
            ],
            "description": "Rewards."
          }
        },
        "type": "object",
        "required": [
          "code",
          "level",
          "type",
          "min_quantity",
          "max_quantity",
          "skill",
          "rewards"
        ],
        "title": "TaskFullSchema"
      },
      "TaskResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskResponseSchema"
      },
      "TaskSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Task objective."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskType"
              }
            ],
            "title": "Type",
            "description": "The type of task."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total required to complete the task."
          },
          "rewards": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardsSchema"
              }
            ],
            "description": "Rewards for completing the task."
          }
        },
        "type": "object",
        "required": [
          "code",
          "type",
          "total",
          "rewards"
        ],
        "title": "TaskSchema"
      },
      "TaskTradeDataSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "trade": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskTradeSchema"
              }
            ],
            "description": "Reward details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "trade",
          "character"
        ],
        "title": "TaskTradeDataSchema"
      },
      "TaskTradeResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TaskTradeDataSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "TaskTradeResponseSchema"
      },
      "TaskTradeSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Item code."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "Item quantity."
          }
        },
        "type": "object",
        "required": [
          "code",
          "quantity"
        ],
        "title": "TaskTradeSchema"
      },
      "TaskType": {
        "type": "string",
        "enum": [
          "monsters",
          "items"
        ],
        "title": "TaskType"
      },
      "TaskType_a-zA-Z0-9_-_____": {
        "$ref": "#/components/schemas/TaskType"
      },
      "TokenResponseSchema": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "TokenResponseSchema"
      },
      "UnequipSchema": {
        "properties": {
          "slot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSlot"
              }
            ],
            "description": "Item slot."
          },
          "quantity": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Quantity",
            "description": "Item quantity. Applicable to utilitys only.",
            "default": 1
          }
        },
        "type": "object",
        "required": [
          "slot"
        ],
        "title": "UnequipSchema"
      },
      "UseItemResponseSchema": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UseItemSchema"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "UseItemResponseSchema"
      },
      "UseItemSchema": {
        "properties": {
          "cooldown": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CooldownSchema"
              }
            ],
            "description": "Cooldown details."
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSchema"
              }
            ],
            "description": "Item details."
          },
          "character": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSchema"
              }
            ],
            "description": "Player details."
          }
        },
        "type": "object",
        "required": [
          "cooldown",
          "item",
          "character"
        ],
        "title": "UseItemSchema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "JWTBearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
