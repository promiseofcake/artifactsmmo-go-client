// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HTTPBasicScopes = "HTTPBasic.Scopes"
	JWTBearerScopes = "JWTBearer.Scopes"
)

// Defines values for AccountLeaderboardType.
const (
	AccountLeaderboardTypeAchievementsPoints AccountLeaderboardType = "achievements_points"
	AccountLeaderboardTypeGold               AccountLeaderboardType = "gold"
)

// Defines values for AccountStatus.
const (
	Founder     AccountStatus = "founder"
	GoldFounder AccountStatus = "gold_founder"
	Standard    AccountStatus = "standard"
	VipFounder  AccountStatus = "vip_founder"
)

// Defines values for AchievementType.
const (
	AchievementTypeCombatDrop  AchievementType = "combat_drop"
	AchievementTypeCombatKill  AchievementType = "combat_kill"
	AchievementTypeCombatLevel AchievementType = "combat_level"
	AchievementTypeCrafting    AchievementType = "crafting"
	AchievementTypeGathering   AchievementType = "gathering"
	AchievementTypeOther       AchievementType = "other"
	AchievementTypeRecycling   AchievementType = "recycling"
	AchievementTypeTask        AchievementType = "task"
	AchievementTypeUse         AchievementType = "use"
)

// Defines values for ActionType.
const (
	ActionTypeBuyBankExpansion  ActionType = "buy_bank_expansion"
	ActionTypeBuyGe             ActionType = "buy_ge"
	ActionTypeBuyNpc            ActionType = "buy_npc"
	ActionTypeCancelGe          ActionType = "cancel_ge"
	ActionTypeChristmasExchange ActionType = "christmas_exchange"
	ActionTypeCrafting          ActionType = "crafting"
	ActionTypeDeleteItem        ActionType = "delete_item"
	ActionTypeDeposit           ActionType = "deposit"
	ActionTypeDepositGold       ActionType = "deposit_gold"
	ActionTypeEquip             ActionType = "equip"
	ActionTypeFight             ActionType = "fight"
	ActionTypeGathering         ActionType = "gathering"
	ActionTypeMovement          ActionType = "movement"
	ActionTypeRecycling         ActionType = "recycling"
	ActionTypeRest              ActionType = "rest"
	ActionTypeSellGe            ActionType = "sell_ge"
	ActionTypeSellNpc           ActionType = "sell_npc"
	ActionTypeTask              ActionType = "task"
	ActionTypeUnequip           ActionType = "unequip"
	ActionTypeUse               ActionType = "use"
	ActionTypeWithdraw          ActionType = "withdraw"
	ActionTypeWithdrawGold      ActionType = "withdraw_gold"
)

// Defines values for CharacterLeaderboardType.
const (
	CharacterLeaderboardTypeAlchemy         CharacterLeaderboardType = "alchemy"
	CharacterLeaderboardTypeCombat          CharacterLeaderboardType = "combat"
	CharacterLeaderboardTypeCooking         CharacterLeaderboardType = "cooking"
	CharacterLeaderboardTypeFishing         CharacterLeaderboardType = "fishing"
	CharacterLeaderboardTypeGearcrafting    CharacterLeaderboardType = "gearcrafting"
	CharacterLeaderboardTypeJewelrycrafting CharacterLeaderboardType = "jewelrycrafting"
	CharacterLeaderboardTypeMining          CharacterLeaderboardType = "mining"
	CharacterLeaderboardTypeWeaponcrafting  CharacterLeaderboardType = "weaponcrafting"
	CharacterLeaderboardTypeWoodcutting     CharacterLeaderboardType = "woodcutting"
)

// Defines values for CharacterSkin.
const (
	Men1   CharacterSkin = "men1"
	Men2   CharacterSkin = "men2"
	Men3   CharacterSkin = "men3"
	Women1 CharacterSkin = "women1"
	Women2 CharacterSkin = "women2"
	Women3 CharacterSkin = "women3"
)

// Defines values for CraftSkill.
const (
	CraftSkillAlchemy         CraftSkill = "alchemy"
	CraftSkillCooking         CraftSkill = "cooking"
	CraftSkillGearcrafting    CraftSkill = "gearcrafting"
	CraftSkillJewelrycrafting CraftSkill = "jewelrycrafting"
	CraftSkillMining          CraftSkill = "mining"
	CraftSkillWeaponcrafting  CraftSkill = "weaponcrafting"
	CraftSkillWoodcutting     CraftSkill = "woodcutting"
)

// Defines values for EffectSubtype.
const (
	EffectSubtypeBuff      EffectSubtype = "buff"
	EffectSubtypeDebuff    EffectSubtype = "debuff"
	EffectSubtypeGathering EffectSubtype = "gathering"
	EffectSubtypeGold      EffectSubtype = "gold"
	EffectSubtypeHeal      EffectSubtype = "heal"
	EffectSubtypeOther     EffectSubtype = "other"
	EffectSubtypeSpecial   EffectSubtype = "special"
	EffectSubtypeStat      EffectSubtype = "stat"
	EffectSubtypeTeleport  EffectSubtype = "teleport"
)

// Defines values for EffectType.
const (
	EffectTypeCombat     EffectType = "combat"
	EffectTypeConsumable EffectType = "consumable"
	EffectTypeEquipment  EffectType = "equipment"
)

// Defines values for FightResult.
const (
	Loss FightResult = "loss"
	Win  FightResult = "win"
)

// Defines values for GatheringSkill.
const (
	GatheringSkillAlchemy     GatheringSkill = "alchemy"
	GatheringSkillFishing     GatheringSkill = "fishing"
	GatheringSkillMining      GatheringSkill = "mining"
	GatheringSkillWoodcutting GatheringSkill = "woodcutting"
)

// Defines values for ItemSlot.
const (
	Amulet    ItemSlot = "amulet"
	Artifact1 ItemSlot = "artifact1"
	Artifact2 ItemSlot = "artifact2"
	Artifact3 ItemSlot = "artifact3"
	Bag       ItemSlot = "bag"
	BodyArmor ItemSlot = "body_armor"
	Boots     ItemSlot = "boots"
	Helmet    ItemSlot = "helmet"
	LegArmor  ItemSlot = "leg_armor"
	Ring1     ItemSlot = "ring1"
	Ring2     ItemSlot = "ring2"
	Rune      ItemSlot = "rune"
	Shield    ItemSlot = "shield"
	Utility1  ItemSlot = "utility1"
	Utility2  ItemSlot = "utility2"
	Weapon    ItemSlot = "weapon"
)

// Defines values for ItemType.
const (
	ItemTypeAmulet     ItemType = "amulet"
	ItemTypeArtifact   ItemType = "artifact"
	ItemTypeBag        ItemType = "bag"
	ItemTypeBodyArmor  ItemType = "body_armor"
	ItemTypeBoots      ItemType = "boots"
	ItemTypeConsumable ItemType = "consumable"
	ItemTypeCurrency   ItemType = "currency"
	ItemTypeHelmet     ItemType = "helmet"
	ItemTypeLegArmor   ItemType = "leg_armor"
	ItemTypeResource   ItemType = "resource"
	ItemTypeRing       ItemType = "ring"
	ItemTypeRune       ItemType = "rune"
	ItemTypeShield     ItemType = "shield"
	ItemTypeUtility    ItemType = "utility"
	ItemTypeWeapon     ItemType = "weapon"
)

// Defines values for LogType.
const (
	Achievement       LogType = "achievement"
	BuyBankExpansion  LogType = "buy_bank_expansion"
	BuyGe             LogType = "buy_ge"
	BuyNpc            LogType = "buy_npc"
	CancelGe          LogType = "cancel_ge"
	ChristmasExchange LogType = "christmas_exchange"
	Crafting          LogType = "crafting"
	DeleteItem        LogType = "delete_item"
	Deposit           LogType = "deposit"
	DepositGold       LogType = "deposit_gold"
	Equip             LogType = "equip"
	Fight             LogType = "fight"
	Gathering         LogType = "gathering"
	Movement          LogType = "movement"
	NewTask           LogType = "new_task"
	Recycling         LogType = "recycling"
	Rest              LogType = "rest"
	SellGe            LogType = "sell_ge"
	SellNpc           LogType = "sell_npc"
	Spawn             LogType = "spawn"
	TaskCancelled     LogType = "task_cancelled"
	TaskCompleted     LogType = "task_completed"
	TaskExchange      LogType = "task_exchange"
	TaskTrade         LogType = "task_trade"
	Unequip           LogType = "unequip"
	Use               LogType = "use"
	Withdraw          LogType = "withdraw"
	WithdrawGold      LogType = "withdraw_gold"
)

// Defines values for MapContentType.
const (
	Bank          MapContentType = "bank"
	GrandExchange MapContentType = "grand_exchange"
	Monster       MapContentType = "monster"
	Npc           MapContentType = "npc"
	Resource      MapContentType = "resource"
	TasksMaster   MapContentType = "tasks_master"
	Workshop      MapContentType = "workshop"
)

// Defines values for NPCType.
const (
	Merchant NPCType = "merchant"
)

// Defines values for Skill.
const (
	SkillAlchemy         Skill = "alchemy"
	SkillCooking         Skill = "cooking"
	SkillFishing         Skill = "fishing"
	SkillGearcrafting    Skill = "gearcrafting"
	SkillJewelrycrafting Skill = "jewelrycrafting"
	SkillMining          Skill = "mining"
	SkillWeaponcrafting  Skill = "weaponcrafting"
	SkillWoodcutting     Skill = "woodcutting"
)

// Defines values for TaskType.
const (
	Items    TaskType = "items"
	Monsters TaskType = "monsters"
)

// AccountAchievementSchema defines model for AccountAchievementSchema.
type AccountAchievementSchema struct {
	// Code Code of the achievement.
	Code string `json:"code"`

	// CompletedAt Completed at.
	CompletedAt AccountAchievementSchema_CompletedAt `json:"completed_at"`

	// Current Current progress.
	Current int `json:"current"`

	// Description Description of the achievement.
	Description string `json:"description"`

	// Name Name of the achievement.
	Name string `json:"name"`

	// Points Points of the achievement. Used for the leaderboard.
	Points int `json:"points"`

	// Rewards Rewards.
	Rewards AchievementRewardsSchema `json:"rewards"`

	// Target Target of the achievement.
	Target AccountAchievementSchema_Target `json:"target"`

	// Total Total to do.
	Total int `json:"total"`

	// Type Type of achievement.
	Type AchievementType `json:"type"`
}

// AccountAchievementSchemaCompletedAt0 defines model for .
type AccountAchievementSchemaCompletedAt0 = time.Time

// AccountAchievementSchemaCompletedAt1 defines model for .
type AccountAchievementSchemaCompletedAt1 = interface{}

// AccountAchievementSchema_CompletedAt Completed at.
type AccountAchievementSchema_CompletedAt struct {
	union json.RawMessage
}

// AccountAchievementSchemaTarget0 defines model for .
type AccountAchievementSchemaTarget0 = string

// AccountAchievementSchemaTarget1 defines model for .
type AccountAchievementSchemaTarget1 = interface{}

// AccountAchievementSchema_Target Target of the achievement.
type AccountAchievementSchema_Target struct {
	union json.RawMessage
}

// AccountDetails defines model for AccountDetails.
type AccountDetails struct {
	// AchievementsPoints Achievement points.
	AchievementsPoints int `json:"achievements_points"`

	// Badges Account badges.
	Badges *[]interface{} `json:"badges,omitempty"`

	// BanReason Ban reason.
	BanReason *string `json:"ban_reason,omitempty"`

	// Banned Banned.
	Banned bool `json:"banned"`

	// Status Member status.
	Status AccountStatus `json:"status"`

	// Subscribed Subscribed for the current season.
	Subscribed bool `json:"subscribed"`

	// Username Username.
	Username string `json:"username"`
}

// AccountDetailsSchema defines model for AccountDetailsSchema.
type AccountDetailsSchema struct {
	Data AccountDetails `json:"data"`
}

// AccountLeaderboardSchema defines model for AccountLeaderboardSchema.
type AccountLeaderboardSchema struct {
	// Account Account name.
	Account string `json:"account"`

	// AchievementsPoints Achievements points.
	AchievementsPoints int `json:"achievements_points"`

	// Gold Gold in the account.
	Gold int `json:"gold"`

	// Position Position in the leaderboard.
	Position int `json:"position"`

	// Status Member status.
	Status AccountStatus `json:"status"`
}

// AccountLeaderboardType defines model for AccountLeaderboardType.
type AccountLeaderboardType string

// AccountLeaderboardTypeAZAZ09 defines model for AccountLeaderboardType_a-zA-Z0-9_-_____.
type AccountLeaderboardTypeAZAZ09 = AccountLeaderboardType

// AccountStatus defines model for AccountStatus.
type AccountStatus string

// AchievementResponseSchema defines model for AchievementResponseSchema.
type AchievementResponseSchema struct {
	Data AchievementSchema `json:"data"`
}

// AchievementRewardsSchema defines model for AchievementRewardsSchema.
type AchievementRewardsSchema struct {
	// Gold Gold rewards.
	Gold int `json:"gold"`
}

// AchievementSchema defines model for AchievementSchema.
type AchievementSchema struct {
	// Code Code of the achievement.
	Code string `json:"code"`

	// Description Description of the achievement.
	Description string `json:"description"`

	// Name Name of the achievement.
	Name string `json:"name"`

	// Points Points of the achievement. Used for the leaderboard.
	Points int `json:"points"`

	// Rewards Rewards.
	Rewards AchievementRewardsSchema `json:"rewards"`

	// Target Target of the achievement.
	Target AchievementSchema_Target `json:"target"`

	// Total Total to do.
	Total int `json:"total"`

	// Type Type of achievement.
	Type AchievementType `json:"type"`
}

// AchievementSchemaTarget0 defines model for .
type AchievementSchemaTarget0 = string

// AchievementSchemaTarget1 defines model for .
type AchievementSchemaTarget1 = interface{}

// AchievementSchema_Target Target of the achievement.
type AchievementSchema_Target struct {
	union json.RawMessage
}

// AchievementType defines model for AchievementType.
type AchievementType string

// AchievementTypeAZAZ09 defines model for AchievementType_a-zA-Z0-9_-_____.
type AchievementTypeAZAZ09 = AchievementType

// ActionType defines model for ActionType.
type ActionType string

// ActiveEventSchema defines model for ActiveEventSchema.
type ActiveEventSchema struct {
	// Code Code of the event.
	Code string `json:"code"`

	// CreatedAt Start datetime.
	CreatedAt time.Time `json:"created_at"`

	// Duration Duration in minutes.
	Duration int `json:"duration"`

	// Expiration Expiration datetime.
	Expiration time.Time `json:"expiration"`

	// Map Map of the event.
	Map MapSchema `json:"map"`

	// Name Name of the event.
	Name string `json:"name"`

	// PreviousSkin Previous map skin.
	PreviousSkin string `json:"previous_skin"`
}

// AddAccountSchema defines model for AddAccountSchema.
type AddAccountSchema struct {
	Email *openapi_types.Email `json:"email,omitempty"`

	// Password Your password.
	Password string `json:"password"`

	// Username Your desired username.
	Username string `json:"username"`
}

// AddCharacterSchema defines model for AddCharacterSchema.
type AddCharacterSchema struct {
	// Name Your desired character name. It's unique and all players can see it.
	Name string `json:"name"`

	// Skin Your desired skin.
	Skin CharacterSkin `json:"skin"`
}

// AnnouncementSchema defines model for AnnouncementSchema.
type AnnouncementSchema struct {
	// CreatedAt Datetime of the announcement.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Message Announcement text.
	Message string `json:"message"`
}

// BadgeConditionSchema defines model for BadgeConditionSchema.
type BadgeConditionSchema struct {
	// Code Code of the condition.
	Code string `json:"code"`

	// Quantity Quantity of the condition (if any).
	Quantity BadgeConditionSchema_Quantity `json:"quantity"`
}

// BadgeConditionSchemaQuantity0 defines model for .
type BadgeConditionSchemaQuantity0 = int

// BadgeConditionSchemaQuantity1 defines model for .
type BadgeConditionSchemaQuantity1 = interface{}

// BadgeConditionSchema_Quantity Quantity of the condition (if any).
type BadgeConditionSchema_Quantity struct {
	union json.RawMessage
}

// BadgeResponseSchema defines model for BadgeResponseSchema.
type BadgeResponseSchema struct {
	Data BadgeSchema `json:"data"`
}

// BadgeSchema defines model for BadgeSchema.
type BadgeSchema struct {
	// Code Code of the badge. This is the badge's unique identifier (ID).
	Code string `json:"code"`

	// Conditions Conditions to get the badge.
	Conditions []BadgeConditionSchema `json:"conditions"`

	// Description Description of the badge.
	Description string `json:"description"`

	// Season Season of the badge.
	Season *BadgeSchema_Season `json:"season,omitempty"`
}

// BadgeSchemaSeason0 defines model for .
type BadgeSchemaSeason0 = int

// BadgeSchemaSeason1 defines model for .
type BadgeSchemaSeason1 = interface{}

// BadgeSchema_Season Season of the badge.
type BadgeSchema_Season struct {
	union json.RawMessage
}

// BankExtensionSchema defines model for BankExtensionSchema.
type BankExtensionSchema struct {
	// Price Price of the bank extension.
	Price int `json:"price"`
}

// BankExtensionTransactionResponseSchema defines model for BankExtensionTransactionResponseSchema.
type BankExtensionTransactionResponseSchema struct {
	Data BankExtensionTransactionSchema `json:"data"`
}

// BankExtensionTransactionSchema defines model for BankExtensionTransactionSchema.
type BankExtensionTransactionSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Transaction Transaction details.
	Transaction BankExtensionSchema `json:"transaction"`
}

// BankGoldTransactionResponseSchema defines model for BankGoldTransactionResponseSchema.
type BankGoldTransactionResponseSchema struct {
	Data BankGoldTransactionSchema `json:"data"`
}

// BankGoldTransactionSchema defines model for BankGoldTransactionSchema.
type BankGoldTransactionSchema struct {
	// Bank Bank details.
	Bank GoldSchema `json:"bank"`

	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`
}

// BankItemTransactionResponseSchema defines model for BankItemTransactionResponseSchema.
type BankItemTransactionResponseSchema struct {
	Data BankItemTransactionSchema `json:"data"`
}

// BankItemTransactionSchema defines model for BankItemTransactionSchema.
type BankItemTransactionSchema struct {
	// Bank Items in your banks.
	Bank []SimpleItemSchema `json:"bank"`

	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`
}

// BankResponseSchema defines model for BankResponseSchema.
type BankResponseSchema struct {
	Data BankSchema `json:"data"`
}

// BankSchema defines model for BankSchema.
type BankSchema struct {
	// Expansions Bank expansions.
	Expansions int `json:"expansions"`

	// Gold Quantity of gold in your bank.
	Gold int `json:"gold"`

	// NextExpansionCost Next expansion cost.
	NextExpansionCost int `json:"next_expansion_cost"`

	// Slots Maximum slots in your bank.
	Slots int `json:"slots"`
}

// BlockedHitsSchema defines model for BlockedHitsSchema.
type BlockedHitsSchema struct {
	// Air The amount of air hits blocked.
	Air int `json:"air"`

	// Earth The amount of earth hits blocked.
	Earth int `json:"earth"`

	// Fire The amount of fire hits blocked.
	Fire int `json:"fire"`

	// Total The amount of total hits blocked.
	Total int `json:"total"`

	// Water The amount of water hits blocked.
	Water int `json:"water"`
}

// ChangePassword defines model for ChangePassword.
type ChangePassword struct {
	// CurrentPassword Your password.
	CurrentPassword string `json:"current_password"`

	// NewPassword New password.
	NewPassword string `json:"new_password"`
}

// CharacterFightDataSchema defines model for CharacterFightDataSchema.
type CharacterFightDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Fight Fight details.
	Fight FightSchema `json:"fight"`
}

// CharacterFightResponseSchema defines model for CharacterFightResponseSchema.
type CharacterFightResponseSchema struct {
	Data CharacterFightDataSchema `json:"data"`
}

// CharacterLeaderboardSchema defines model for CharacterLeaderboardSchema.
type CharacterLeaderboardSchema struct {
	// Account Account name.
	Account string `json:"account"`

	// AlchemyLevel Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`

	// AlchemyTotalXp Alchemy total xp.
	AlchemyTotalXp int `json:"alchemy_total_xp"`

	// CookingLevel Cooking level.
	CookingLevel int `json:"cooking_level"`

	// CookingTotalXp Cooking total xp.
	CookingTotalXp int `json:"cooking_total_xp"`

	// FishingLevel Fishing level.
	FishingLevel int `json:"fishing_level"`

	// FishingTotalXp Fishing total xp.
	FishingTotalXp int `json:"fishing_total_xp"`

	// GearcraftingLevel Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`

	// GearcraftingTotalXp Gearcrafting total xp.
	GearcraftingTotalXp int `json:"gearcrafting_total_xp"`

	// Gold The numbers of gold on this character.
	Gold int `json:"gold"`

	// JewelrycraftingLevel Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`

	// JewelrycraftingTotalXp Jewelrycrafting total xp.
	JewelrycraftingTotalXp int `json:"jewelrycrafting_total_xp"`

	// Level Combat level.
	Level int `json:"level"`

	// MiningLevel Mining level.
	MiningLevel int `json:"mining_level"`

	// MiningTotalXp Mining total xp.
	MiningTotalXp int `json:"mining_total_xp"`

	// Name Character name.
	Name string `json:"name"`

	// Position Position in the leaderboard.
	Position int `json:"position"`

	// Skin Character skin code.
	Skin string `json:"skin"`

	// TotalXp Total XP of your character.
	TotalXp int `json:"total_xp"`

	// WeaponcraftingLevel Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`

	// WeaponcraftingTotalXp Weaponcrafting total xp.
	WeaponcraftingTotalXp int `json:"weaponcrafting_total_xp"`

	// WoodcuttingLevel Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`

	// WoodcuttingTotalXp Woodcutting total xp.
	WoodcuttingTotalXp int `json:"woodcutting_total_xp"`
}

// CharacterLeaderboardType defines model for CharacterLeaderboardType.
type CharacterLeaderboardType string

// CharacterLeaderboardTypeAZAZ09 defines model for CharacterLeaderboardType_a-zA-Z0-9_-_____.
type CharacterLeaderboardTypeAZAZ09 = CharacterLeaderboardType

// CharacterMovementDataSchema defines model for CharacterMovementDataSchema.
type CharacterMovementDataSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details
	Cooldown CooldownSchema `json:"cooldown"`

	// Destination Destination details.
	Destination MapSchema `json:"destination"`
}

// CharacterMovementResponseSchema defines model for CharacterMovementResponseSchema.
type CharacterMovementResponseSchema struct {
	Data CharacterMovementDataSchema `json:"data"`
}

// CharacterResponseSchema defines model for CharacterResponseSchema.
type CharacterResponseSchema struct {
	Data CharacterSchema `json:"data"`
}

// CharacterRestDataSchema defines model for CharacterRestDataSchema.
type CharacterRestDataSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details
	Cooldown CooldownSchema `json:"cooldown"`

	// HpRestored The amount of HP restored.
	HpRestored int `json:"hp_restored"`
}

// CharacterRestResponseSchema defines model for CharacterRestResponseSchema.
type CharacterRestResponseSchema struct {
	Data CharacterRestDataSchema `json:"data"`
}

// CharacterSchema defines model for CharacterSchema.
type CharacterSchema struct {
	// Account Account name.
	Account string `json:"account"`

	// AlchemyLevel Alchemy level.
	AlchemyLevel int `json:"alchemy_level"`

	// AlchemyMaxXp Alchemy XP required to level up the skill.
	AlchemyMaxXp int `json:"alchemy_max_xp"`

	// AlchemyXp Alchemy XP.
	AlchemyXp int `json:"alchemy_xp"`

	// AmuletSlot Amulet slot.
	AmuletSlot string `json:"amulet_slot"`

	// Artifact1Slot Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`

	// Artifact2Slot Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`

	// Artifact3Slot Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`

	// AttackAir Air attack.
	AttackAir int `json:"attack_air"`

	// AttackEarth Earth attack.
	AttackEarth int `json:"attack_earth"`

	// AttackFire Fire attack.
	AttackFire int `json:"attack_fire"`

	// AttackWater Water attack.
	AttackWater int `json:"attack_water"`

	// BagSlot Bag slot.
	BagSlot string `json:"bag_slot"`

	// BodyArmorSlot Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`

	// BootsSlot Boots slot.
	BootsSlot string `json:"boots_slot"`

	// CookingLevel The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`

	// CookingMaxXp Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`

	// CookingXp Cooking XP.
	CookingXp int `json:"cooking_xp"`

	// Cooldown Cooldown in seconds.
	Cooldown int `json:"cooldown"`

	// CooldownExpiration Datetime Cooldown expiration.
	CooldownExpiration *time.Time `json:"cooldown_expiration,omitempty"`

	// CriticalStrike % Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x).
	CriticalStrike int `json:"critical_strike"`

	// Dmg % Damage. Damage increases your attack in all elements.
	Dmg int `json:"dmg"`

	// DmgAir % Air damage. Damage increases your air attack.
	DmgAir int `json:"dmg_air"`

	// DmgEarth % Earth damage. Damage increases your earth attack.
	DmgEarth int `json:"dmg_earth"`

	// DmgFire % Fire damage. Damage increases your fire attack.
	DmgFire int `json:"dmg_fire"`

	// DmgWater % Water damage. Damage increases your water attack.
	DmgWater int `json:"dmg_water"`

	// FishingLevel Fishing level.
	FishingLevel int `json:"fishing_level"`

	// FishingMaxXp Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`

	// FishingXp The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`

	// GearcraftingLevel Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`

	// GearcraftingMaxXp Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`

	// GearcraftingXp The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`

	// Gold The numbers of gold on this character.
	Gold int `json:"gold"`

	// Haste *Increase speed attack (reduce fight cooldown)
	Haste int `json:"haste"`

	// HelmetSlot Helmet slot.
	HelmetSlot string `json:"helmet_slot"`

	// Hp Character actual HP.
	Hp int `json:"hp"`

	// Inventory List of inventory slots.
	Inventory *[]InventorySlot `json:"inventory,omitempty"`

	// InventoryMaxItems Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`

	// JewelrycraftingLevel Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`

	// JewelrycraftingMaxXp Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`

	// JewelrycraftingXp The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`

	// LegArmorSlot Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`

	// Level Combat level.
	Level int `json:"level"`

	// MaxHp Character max HP.
	MaxHp int `json:"max_hp"`

	// MaxXp XP required to level up the character.
	MaxXp int `json:"max_xp"`

	// MiningLevel Mining level.
	MiningLevel int `json:"mining_level"`

	// MiningMaxXp Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`

	// MiningXp The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`

	// Name Name of the character.
	Name string `json:"name"`

	// Prospecting Prospecting increases the chances of getting better loot (1% extra per 10 PP).
	Prospecting int `json:"prospecting"`

	// ResAir % Air resistance. Reduces air attack.
	ResAir int `json:"res_air"`

	// ResEarth % Earth resistance. Reduces earth attack.
	ResEarth int `json:"res_earth"`

	// ResFire % Fire resistance. Reduces fire attack.
	ResFire int `json:"res_fire"`

	// ResWater % Water resistance. Reduces water attack.
	ResWater int `json:"res_water"`

	// Ring1Slot Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`

	// Ring2Slot Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`

	// RuneSlot Rune slot.
	RuneSlot string `json:"rune_slot"`

	// ShieldSlot Shield slot.
	ShieldSlot string `json:"shield_slot"`

	// Skin Character skin code.
	Skin CharacterSkin `json:"skin"`

	// Speed *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`

	// Task Task in progress.
	Task string `json:"task"`

	// TaskProgress Task progression.
	TaskProgress int `json:"task_progress"`

	// TaskTotal Task total objective.
	TaskTotal int `json:"task_total"`

	// TaskType Task type.
	TaskType string `json:"task_type"`

	// Utility1Slot Utility 1 slot.
	Utility1Slot string `json:"utility1_slot"`

	// Utility1SlotQuantity Utility 1 quantity.
	Utility1SlotQuantity int `json:"utility1_slot_quantity"`

	// Utility2Slot Utility 2 slot.
	Utility2Slot string `json:"utility2_slot"`

	// Utility2SlotQuantity Utility 2 quantity.
	Utility2SlotQuantity int `json:"utility2_slot_quantity"`

	// WeaponSlot Weapon slot.
	WeaponSlot string `json:"weapon_slot"`

	// WeaponcraftingLevel Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`

	// WeaponcraftingMaxXp Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`

	// WeaponcraftingXp The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`

	// Wisdom Wisdom increases the amount of XP gained from fights (1% extra per 10 wisdom).
	Wisdom int `json:"wisdom"`

	// WoodcuttingLevel Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`

	// WoodcuttingMaxXp Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`

	// WoodcuttingXp The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`

	// X Character x coordinate.
	X int `json:"x"`

	// Xp The current xp level of the combat level.
	Xp int `json:"xp"`

	// Y Character y coordinate.
	Y int `json:"y"`
}

// CharacterSkin defines model for CharacterSkin.
type CharacterSkin string

// CooldownSchema defines model for CooldownSchema.
type CooldownSchema struct {
	// Expiration The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`

	// Reason The reason of the cooldown.
	Reason ActionType `json:"reason"`

	// RemainingSeconds The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`

	// StartedAt The start of the cooldown.
	StartedAt time.Time `json:"started_at"`

	// TotalSeconds The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
}

// CraftSchema defines model for CraftSchema.
type CraftSchema struct {
	// Items List of items required to craft the item.
	Items *[]SimpleItemSchema `json:"items,omitempty"`

	// Level The skill level required to craft the item.
	Level *int `json:"level,omitempty"`

	// Quantity Quantity of items crafted.
	Quantity *int `json:"quantity,omitempty"`

	// Skill Skill required to craft the item.
	Skill *CraftSkill `json:"skill,omitempty"`
}

// CraftSkill defines model for CraftSkill.
type CraftSkill string

// CraftSkillAZAZ09 defines model for CraftSkill_a-zA-Z0-9_-_____.
type CraftSkillAZAZ09 = CraftSkill

// CraftingSchema defines model for CraftingSchema.
type CraftingSchema struct {
	// Code Craft code.
	Code string `json:"code"`

	// Quantity Quantity of items to craft.
	Quantity *int `json:"quantity,omitempty"`
}

// DataPageAccountAchievementSchema defines model for DataPage_AccountAchievementSchema_.
type DataPageAccountAchievementSchema struct {
	Data  []AccountAchievementSchema              `json:"data"`
	Page  DataPageAccountAchievementSchema_Page   `json:"page"`
	Pages *DataPageAccountAchievementSchema_Pages `json:"pages,omitempty"`
	Size  DataPageAccountAchievementSchema_Size   `json:"size"`
	Total DataPageAccountAchievementSchema_Total  `json:"total"`
}

// DataPageAccountAchievementSchemaPage0 defines model for .
type DataPageAccountAchievementSchemaPage0 = int

// DataPageAccountAchievementSchemaPage1 defines model for .
type DataPageAccountAchievementSchemaPage1 = interface{}

// DataPageAccountAchievementSchema_Page defines model for DataPageAccountAchievementSchema.Page.
type DataPageAccountAchievementSchema_Page struct {
	union json.RawMessage
}

// DataPageAccountAchievementSchemaPages0 defines model for .
type DataPageAccountAchievementSchemaPages0 = int

// DataPageAccountAchievementSchemaPages1 defines model for .
type DataPageAccountAchievementSchemaPages1 = interface{}

// DataPageAccountAchievementSchema_Pages defines model for DataPageAccountAchievementSchema.Pages.
type DataPageAccountAchievementSchema_Pages struct {
	union json.RawMessage
}

// DataPageAccountAchievementSchemaSize0 defines model for .
type DataPageAccountAchievementSchemaSize0 = int

// DataPageAccountAchievementSchemaSize1 defines model for .
type DataPageAccountAchievementSchemaSize1 = interface{}

// DataPageAccountAchievementSchema_Size defines model for DataPageAccountAchievementSchema.Size.
type DataPageAccountAchievementSchema_Size struct {
	union json.RawMessage
}

// DataPageAccountAchievementSchemaTotal0 defines model for .
type DataPageAccountAchievementSchemaTotal0 = int

// DataPageAccountAchievementSchemaTotal1 defines model for .
type DataPageAccountAchievementSchemaTotal1 = interface{}

// DataPageAccountAchievementSchema_Total defines model for DataPageAccountAchievementSchema.Total.
type DataPageAccountAchievementSchema_Total struct {
	union json.RawMessage
}

// DataPageAccountLeaderboardSchema defines model for DataPage_AccountLeaderboardSchema_.
type DataPageAccountLeaderboardSchema struct {
	Data  []AccountLeaderboardSchema              `json:"data"`
	Page  DataPageAccountLeaderboardSchema_Page   `json:"page"`
	Pages *DataPageAccountLeaderboardSchema_Pages `json:"pages,omitempty"`
	Size  DataPageAccountLeaderboardSchema_Size   `json:"size"`
	Total DataPageAccountLeaderboardSchema_Total  `json:"total"`
}

// DataPageAccountLeaderboardSchemaPage0 defines model for .
type DataPageAccountLeaderboardSchemaPage0 = int

// DataPageAccountLeaderboardSchemaPage1 defines model for .
type DataPageAccountLeaderboardSchemaPage1 = interface{}

// DataPageAccountLeaderboardSchema_Page defines model for DataPageAccountLeaderboardSchema.Page.
type DataPageAccountLeaderboardSchema_Page struct {
	union json.RawMessage
}

// DataPageAccountLeaderboardSchemaPages0 defines model for .
type DataPageAccountLeaderboardSchemaPages0 = int

// DataPageAccountLeaderboardSchemaPages1 defines model for .
type DataPageAccountLeaderboardSchemaPages1 = interface{}

// DataPageAccountLeaderboardSchema_Pages defines model for DataPageAccountLeaderboardSchema.Pages.
type DataPageAccountLeaderboardSchema_Pages struct {
	union json.RawMessage
}

// DataPageAccountLeaderboardSchemaSize0 defines model for .
type DataPageAccountLeaderboardSchemaSize0 = int

// DataPageAccountLeaderboardSchemaSize1 defines model for .
type DataPageAccountLeaderboardSchemaSize1 = interface{}

// DataPageAccountLeaderboardSchema_Size defines model for DataPageAccountLeaderboardSchema.Size.
type DataPageAccountLeaderboardSchema_Size struct {
	union json.RawMessage
}

// DataPageAccountLeaderboardSchemaTotal0 defines model for .
type DataPageAccountLeaderboardSchemaTotal0 = int

// DataPageAccountLeaderboardSchemaTotal1 defines model for .
type DataPageAccountLeaderboardSchemaTotal1 = interface{}

// DataPageAccountLeaderboardSchema_Total defines model for DataPageAccountLeaderboardSchema.Total.
type DataPageAccountLeaderboardSchema_Total struct {
	union json.RawMessage
}

// DataPageAchievementSchema defines model for DataPage_AchievementSchema_.
type DataPageAchievementSchema struct {
	Data  []AchievementSchema              `json:"data"`
	Page  DataPageAchievementSchema_Page   `json:"page"`
	Pages *DataPageAchievementSchema_Pages `json:"pages,omitempty"`
	Size  DataPageAchievementSchema_Size   `json:"size"`
	Total DataPageAchievementSchema_Total  `json:"total"`
}

// DataPageAchievementSchemaPage0 defines model for .
type DataPageAchievementSchemaPage0 = int

// DataPageAchievementSchemaPage1 defines model for .
type DataPageAchievementSchemaPage1 = interface{}

// DataPageAchievementSchema_Page defines model for DataPageAchievementSchema.Page.
type DataPageAchievementSchema_Page struct {
	union json.RawMessage
}

// DataPageAchievementSchemaPages0 defines model for .
type DataPageAchievementSchemaPages0 = int

// DataPageAchievementSchemaPages1 defines model for .
type DataPageAchievementSchemaPages1 = interface{}

// DataPageAchievementSchema_Pages defines model for DataPageAchievementSchema.Pages.
type DataPageAchievementSchema_Pages struct {
	union json.RawMessage
}

// DataPageAchievementSchemaSize0 defines model for .
type DataPageAchievementSchemaSize0 = int

// DataPageAchievementSchemaSize1 defines model for .
type DataPageAchievementSchemaSize1 = interface{}

// DataPageAchievementSchema_Size defines model for DataPageAchievementSchema.Size.
type DataPageAchievementSchema_Size struct {
	union json.RawMessage
}

// DataPageAchievementSchemaTotal0 defines model for .
type DataPageAchievementSchemaTotal0 = int

// DataPageAchievementSchemaTotal1 defines model for .
type DataPageAchievementSchemaTotal1 = interface{}

// DataPageAchievementSchema_Total defines model for DataPageAchievementSchema.Total.
type DataPageAchievementSchema_Total struct {
	union json.RawMessage
}

// DataPageActiveEventSchema defines model for DataPage_ActiveEventSchema_.
type DataPageActiveEventSchema struct {
	Data  []ActiveEventSchema              `json:"data"`
	Page  DataPageActiveEventSchema_Page   `json:"page"`
	Pages *DataPageActiveEventSchema_Pages `json:"pages,omitempty"`
	Size  DataPageActiveEventSchema_Size   `json:"size"`
	Total DataPageActiveEventSchema_Total  `json:"total"`
}

// DataPageActiveEventSchemaPage0 defines model for .
type DataPageActiveEventSchemaPage0 = int

// DataPageActiveEventSchemaPage1 defines model for .
type DataPageActiveEventSchemaPage1 = interface{}

// DataPageActiveEventSchema_Page defines model for DataPageActiveEventSchema.Page.
type DataPageActiveEventSchema_Page struct {
	union json.RawMessage
}

// DataPageActiveEventSchemaPages0 defines model for .
type DataPageActiveEventSchemaPages0 = int

// DataPageActiveEventSchemaPages1 defines model for .
type DataPageActiveEventSchemaPages1 = interface{}

// DataPageActiveEventSchema_Pages defines model for DataPageActiveEventSchema.Pages.
type DataPageActiveEventSchema_Pages struct {
	union json.RawMessage
}

// DataPageActiveEventSchemaSize0 defines model for .
type DataPageActiveEventSchemaSize0 = int

// DataPageActiveEventSchemaSize1 defines model for .
type DataPageActiveEventSchemaSize1 = interface{}

// DataPageActiveEventSchema_Size defines model for DataPageActiveEventSchema.Size.
type DataPageActiveEventSchema_Size struct {
	union json.RawMessage
}

// DataPageActiveEventSchemaTotal0 defines model for .
type DataPageActiveEventSchemaTotal0 = int

// DataPageActiveEventSchemaTotal1 defines model for .
type DataPageActiveEventSchemaTotal1 = interface{}

// DataPageActiveEventSchema_Total defines model for DataPageActiveEventSchema.Total.
type DataPageActiveEventSchema_Total struct {
	union json.RawMessage
}

// DataPageBadgeSchema defines model for DataPage_BadgeSchema_.
type DataPageBadgeSchema struct {
	Data  []BadgeSchema              `json:"data"`
	Page  DataPageBadgeSchema_Page   `json:"page"`
	Pages *DataPageBadgeSchema_Pages `json:"pages,omitempty"`
	Size  DataPageBadgeSchema_Size   `json:"size"`
	Total DataPageBadgeSchema_Total  `json:"total"`
}

// DataPageBadgeSchemaPage0 defines model for .
type DataPageBadgeSchemaPage0 = int

// DataPageBadgeSchemaPage1 defines model for .
type DataPageBadgeSchemaPage1 = interface{}

// DataPageBadgeSchema_Page defines model for DataPageBadgeSchema.Page.
type DataPageBadgeSchema_Page struct {
	union json.RawMessage
}

// DataPageBadgeSchemaPages0 defines model for .
type DataPageBadgeSchemaPages0 = int

// DataPageBadgeSchemaPages1 defines model for .
type DataPageBadgeSchemaPages1 = interface{}

// DataPageBadgeSchema_Pages defines model for DataPageBadgeSchema.Pages.
type DataPageBadgeSchema_Pages struct {
	union json.RawMessage
}

// DataPageBadgeSchemaSize0 defines model for .
type DataPageBadgeSchemaSize0 = int

// DataPageBadgeSchemaSize1 defines model for .
type DataPageBadgeSchemaSize1 = interface{}

// DataPageBadgeSchema_Size defines model for DataPageBadgeSchema.Size.
type DataPageBadgeSchema_Size struct {
	union json.RawMessage
}

// DataPageBadgeSchemaTotal0 defines model for .
type DataPageBadgeSchemaTotal0 = int

// DataPageBadgeSchemaTotal1 defines model for .
type DataPageBadgeSchemaTotal1 = interface{}

// DataPageBadgeSchema_Total defines model for DataPageBadgeSchema.Total.
type DataPageBadgeSchema_Total struct {
	union json.RawMessage
}

// DataPageCharacterLeaderboardSchema defines model for DataPage_CharacterLeaderboardSchema_.
type DataPageCharacterLeaderboardSchema struct {
	Data  []CharacterLeaderboardSchema              `json:"data"`
	Page  DataPageCharacterLeaderboardSchema_Page   `json:"page"`
	Pages *DataPageCharacterLeaderboardSchema_Pages `json:"pages,omitempty"`
	Size  DataPageCharacterLeaderboardSchema_Size   `json:"size"`
	Total DataPageCharacterLeaderboardSchema_Total  `json:"total"`
}

// DataPageCharacterLeaderboardSchemaPage0 defines model for .
type DataPageCharacterLeaderboardSchemaPage0 = int

// DataPageCharacterLeaderboardSchemaPage1 defines model for .
type DataPageCharacterLeaderboardSchemaPage1 = interface{}

// DataPageCharacterLeaderboardSchema_Page defines model for DataPageCharacterLeaderboardSchema.Page.
type DataPageCharacterLeaderboardSchema_Page struct {
	union json.RawMessage
}

// DataPageCharacterLeaderboardSchemaPages0 defines model for .
type DataPageCharacterLeaderboardSchemaPages0 = int

// DataPageCharacterLeaderboardSchemaPages1 defines model for .
type DataPageCharacterLeaderboardSchemaPages1 = interface{}

// DataPageCharacterLeaderboardSchema_Pages defines model for DataPageCharacterLeaderboardSchema.Pages.
type DataPageCharacterLeaderboardSchema_Pages struct {
	union json.RawMessage
}

// DataPageCharacterLeaderboardSchemaSize0 defines model for .
type DataPageCharacterLeaderboardSchemaSize0 = int

// DataPageCharacterLeaderboardSchemaSize1 defines model for .
type DataPageCharacterLeaderboardSchemaSize1 = interface{}

// DataPageCharacterLeaderboardSchema_Size defines model for DataPageCharacterLeaderboardSchema.Size.
type DataPageCharacterLeaderboardSchema_Size struct {
	union json.RawMessage
}

// DataPageCharacterLeaderboardSchemaTotal0 defines model for .
type DataPageCharacterLeaderboardSchemaTotal0 = int

// DataPageCharacterLeaderboardSchemaTotal1 defines model for .
type DataPageCharacterLeaderboardSchemaTotal1 = interface{}

// DataPageCharacterLeaderboardSchema_Total defines model for DataPageCharacterLeaderboardSchema.Total.
type DataPageCharacterLeaderboardSchema_Total struct {
	union json.RawMessage
}

// DataPageDropRateSchema defines model for DataPage_DropRateSchema_.
type DataPageDropRateSchema struct {
	Data  []DropRateSchema              `json:"data"`
	Page  DataPageDropRateSchema_Page   `json:"page"`
	Pages *DataPageDropRateSchema_Pages `json:"pages,omitempty"`
	Size  DataPageDropRateSchema_Size   `json:"size"`
	Total DataPageDropRateSchema_Total  `json:"total"`
}

// DataPageDropRateSchemaPage0 defines model for .
type DataPageDropRateSchemaPage0 = int

// DataPageDropRateSchemaPage1 defines model for .
type DataPageDropRateSchemaPage1 = interface{}

// DataPageDropRateSchema_Page defines model for DataPageDropRateSchema.Page.
type DataPageDropRateSchema_Page struct {
	union json.RawMessage
}

// DataPageDropRateSchemaPages0 defines model for .
type DataPageDropRateSchemaPages0 = int

// DataPageDropRateSchemaPages1 defines model for .
type DataPageDropRateSchemaPages1 = interface{}

// DataPageDropRateSchema_Pages defines model for DataPageDropRateSchema.Pages.
type DataPageDropRateSchema_Pages struct {
	union json.RawMessage
}

// DataPageDropRateSchemaSize0 defines model for .
type DataPageDropRateSchemaSize0 = int

// DataPageDropRateSchemaSize1 defines model for .
type DataPageDropRateSchemaSize1 = interface{}

// DataPageDropRateSchema_Size defines model for DataPageDropRateSchema.Size.
type DataPageDropRateSchema_Size struct {
	union json.RawMessage
}

// DataPageDropRateSchemaTotal0 defines model for .
type DataPageDropRateSchemaTotal0 = int

// DataPageDropRateSchemaTotal1 defines model for .
type DataPageDropRateSchemaTotal1 = interface{}

// DataPageDropRateSchema_Total defines model for DataPageDropRateSchema.Total.
type DataPageDropRateSchema_Total struct {
	union json.RawMessage
}

// DataPageEffectSchema defines model for DataPage_EffectSchema_.
type DataPageEffectSchema struct {
	Data  []EffectSchema              `json:"data"`
	Page  DataPageEffectSchema_Page   `json:"page"`
	Pages *DataPageEffectSchema_Pages `json:"pages,omitempty"`
	Size  DataPageEffectSchema_Size   `json:"size"`
	Total DataPageEffectSchema_Total  `json:"total"`
}

// DataPageEffectSchemaPage0 defines model for .
type DataPageEffectSchemaPage0 = int

// DataPageEffectSchemaPage1 defines model for .
type DataPageEffectSchemaPage1 = interface{}

// DataPageEffectSchema_Page defines model for DataPageEffectSchema.Page.
type DataPageEffectSchema_Page struct {
	union json.RawMessage
}

// DataPageEffectSchemaPages0 defines model for .
type DataPageEffectSchemaPages0 = int

// DataPageEffectSchemaPages1 defines model for .
type DataPageEffectSchemaPages1 = interface{}

// DataPageEffectSchema_Pages defines model for DataPageEffectSchema.Pages.
type DataPageEffectSchema_Pages struct {
	union json.RawMessage
}

// DataPageEffectSchemaSize0 defines model for .
type DataPageEffectSchemaSize0 = int

// DataPageEffectSchemaSize1 defines model for .
type DataPageEffectSchemaSize1 = interface{}

// DataPageEffectSchema_Size defines model for DataPageEffectSchema.Size.
type DataPageEffectSchema_Size struct {
	union json.RawMessage
}

// DataPageEffectSchemaTotal0 defines model for .
type DataPageEffectSchemaTotal0 = int

// DataPageEffectSchemaTotal1 defines model for .
type DataPageEffectSchemaTotal1 = interface{}

// DataPageEffectSchema_Total defines model for DataPageEffectSchema.Total.
type DataPageEffectSchema_Total struct {
	union json.RawMessage
}

// DataPageEventSchema defines model for DataPage_EventSchema_.
type DataPageEventSchema struct {
	Data  []EventSchema              `json:"data"`
	Page  DataPageEventSchema_Page   `json:"page"`
	Pages *DataPageEventSchema_Pages `json:"pages,omitempty"`
	Size  DataPageEventSchema_Size   `json:"size"`
	Total DataPageEventSchema_Total  `json:"total"`
}

// DataPageEventSchemaPage0 defines model for .
type DataPageEventSchemaPage0 = int

// DataPageEventSchemaPage1 defines model for .
type DataPageEventSchemaPage1 = interface{}

// DataPageEventSchema_Page defines model for DataPageEventSchema.Page.
type DataPageEventSchema_Page struct {
	union json.RawMessage
}

// DataPageEventSchemaPages0 defines model for .
type DataPageEventSchemaPages0 = int

// DataPageEventSchemaPages1 defines model for .
type DataPageEventSchemaPages1 = interface{}

// DataPageEventSchema_Pages defines model for DataPageEventSchema.Pages.
type DataPageEventSchema_Pages struct {
	union json.RawMessage
}

// DataPageEventSchemaSize0 defines model for .
type DataPageEventSchemaSize0 = int

// DataPageEventSchemaSize1 defines model for .
type DataPageEventSchemaSize1 = interface{}

// DataPageEventSchema_Size defines model for DataPageEventSchema.Size.
type DataPageEventSchema_Size struct {
	union json.RawMessage
}

// DataPageEventSchemaTotal0 defines model for .
type DataPageEventSchemaTotal0 = int

// DataPageEventSchemaTotal1 defines model for .
type DataPageEventSchemaTotal1 = interface{}

// DataPageEventSchema_Total defines model for DataPageEventSchema.Total.
type DataPageEventSchema_Total struct {
	union json.RawMessage
}

// DataPageGEOrderSchema defines model for DataPage_GEOrderSchema_.
type DataPageGEOrderSchema struct {
	Data  []GEOrderSchema              `json:"data"`
	Page  DataPageGEOrderSchema_Page   `json:"page"`
	Pages *DataPageGEOrderSchema_Pages `json:"pages,omitempty"`
	Size  DataPageGEOrderSchema_Size   `json:"size"`
	Total DataPageGEOrderSchema_Total  `json:"total"`
}

// DataPageGEOrderSchemaPage0 defines model for .
type DataPageGEOrderSchemaPage0 = int

// DataPageGEOrderSchemaPage1 defines model for .
type DataPageGEOrderSchemaPage1 = interface{}

// DataPageGEOrderSchema_Page defines model for DataPageGEOrderSchema.Page.
type DataPageGEOrderSchema_Page struct {
	union json.RawMessage
}

// DataPageGEOrderSchemaPages0 defines model for .
type DataPageGEOrderSchemaPages0 = int

// DataPageGEOrderSchemaPages1 defines model for .
type DataPageGEOrderSchemaPages1 = interface{}

// DataPageGEOrderSchema_Pages defines model for DataPageGEOrderSchema.Pages.
type DataPageGEOrderSchema_Pages struct {
	union json.RawMessage
}

// DataPageGEOrderSchemaSize0 defines model for .
type DataPageGEOrderSchemaSize0 = int

// DataPageGEOrderSchemaSize1 defines model for .
type DataPageGEOrderSchemaSize1 = interface{}

// DataPageGEOrderSchema_Size defines model for DataPageGEOrderSchema.Size.
type DataPageGEOrderSchema_Size struct {
	union json.RawMessage
}

// DataPageGEOrderSchemaTotal0 defines model for .
type DataPageGEOrderSchemaTotal0 = int

// DataPageGEOrderSchemaTotal1 defines model for .
type DataPageGEOrderSchemaTotal1 = interface{}

// DataPageGEOrderSchema_Total defines model for DataPageGEOrderSchema.Total.
type DataPageGEOrderSchema_Total struct {
	union json.RawMessage
}

// DataPageGeOrderHistorySchema defines model for DataPage_GeOrderHistorySchema_.
type DataPageGeOrderHistorySchema struct {
	Data  []GeOrderHistorySchema              `json:"data"`
	Page  DataPageGeOrderHistorySchema_Page   `json:"page"`
	Pages *DataPageGeOrderHistorySchema_Pages `json:"pages,omitempty"`
	Size  DataPageGeOrderHistorySchema_Size   `json:"size"`
	Total DataPageGeOrderHistorySchema_Total  `json:"total"`
}

// DataPageGeOrderHistorySchemaPage0 defines model for .
type DataPageGeOrderHistorySchemaPage0 = int

// DataPageGeOrderHistorySchemaPage1 defines model for .
type DataPageGeOrderHistorySchemaPage1 = interface{}

// DataPageGeOrderHistorySchema_Page defines model for DataPageGeOrderHistorySchema.Page.
type DataPageGeOrderHistorySchema_Page struct {
	union json.RawMessage
}

// DataPageGeOrderHistorySchemaPages0 defines model for .
type DataPageGeOrderHistorySchemaPages0 = int

// DataPageGeOrderHistorySchemaPages1 defines model for .
type DataPageGeOrderHistorySchemaPages1 = interface{}

// DataPageGeOrderHistorySchema_Pages defines model for DataPageGeOrderHistorySchema.Pages.
type DataPageGeOrderHistorySchema_Pages struct {
	union json.RawMessage
}

// DataPageGeOrderHistorySchemaSize0 defines model for .
type DataPageGeOrderHistorySchemaSize0 = int

// DataPageGeOrderHistorySchemaSize1 defines model for .
type DataPageGeOrderHistorySchemaSize1 = interface{}

// DataPageGeOrderHistorySchema_Size defines model for DataPageGeOrderHistorySchema.Size.
type DataPageGeOrderHistorySchema_Size struct {
	union json.RawMessage
}

// DataPageGeOrderHistorySchemaTotal0 defines model for .
type DataPageGeOrderHistorySchemaTotal0 = int

// DataPageGeOrderHistorySchemaTotal1 defines model for .
type DataPageGeOrderHistorySchemaTotal1 = interface{}

// DataPageGeOrderHistorySchema_Total defines model for DataPageGeOrderHistorySchema.Total.
type DataPageGeOrderHistorySchema_Total struct {
	union json.RawMessage
}

// DataPageItemSchema defines model for DataPage_ItemSchema_.
type DataPageItemSchema struct {
	Data  []ItemSchema              `json:"data"`
	Page  DataPageItemSchema_Page   `json:"page"`
	Pages *DataPageItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageItemSchema_Size   `json:"size"`
	Total DataPageItemSchema_Total  `json:"total"`
}

// DataPageItemSchemaPage0 defines model for .
type DataPageItemSchemaPage0 = int

// DataPageItemSchemaPage1 defines model for .
type DataPageItemSchemaPage1 = interface{}

// DataPageItemSchema_Page defines model for DataPageItemSchema.Page.
type DataPageItemSchema_Page struct {
	union json.RawMessage
}

// DataPageItemSchemaPages0 defines model for .
type DataPageItemSchemaPages0 = int

// DataPageItemSchemaPages1 defines model for .
type DataPageItemSchemaPages1 = interface{}

// DataPageItemSchema_Pages defines model for DataPageItemSchema.Pages.
type DataPageItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageItemSchemaSize0 defines model for .
type DataPageItemSchemaSize0 = int

// DataPageItemSchemaSize1 defines model for .
type DataPageItemSchemaSize1 = interface{}

// DataPageItemSchema_Size defines model for DataPageItemSchema.Size.
type DataPageItemSchema_Size struct {
	union json.RawMessage
}

// DataPageItemSchemaTotal0 defines model for .
type DataPageItemSchemaTotal0 = int

// DataPageItemSchemaTotal1 defines model for .
type DataPageItemSchemaTotal1 = interface{}

// DataPageItemSchema_Total defines model for DataPageItemSchema.Total.
type DataPageItemSchema_Total struct {
	union json.RawMessage
}

// DataPageLogSchema defines model for DataPage_LogSchema_.
type DataPageLogSchema struct {
	Data  []LogSchema              `json:"data"`
	Page  DataPageLogSchema_Page   `json:"page"`
	Pages *DataPageLogSchema_Pages `json:"pages,omitempty"`
	Size  DataPageLogSchema_Size   `json:"size"`
	Total DataPageLogSchema_Total  `json:"total"`
}

// DataPageLogSchemaPage0 defines model for .
type DataPageLogSchemaPage0 = int

// DataPageLogSchemaPage1 defines model for .
type DataPageLogSchemaPage1 = interface{}

// DataPageLogSchema_Page defines model for DataPageLogSchema.Page.
type DataPageLogSchema_Page struct {
	union json.RawMessage
}

// DataPageLogSchemaPages0 defines model for .
type DataPageLogSchemaPages0 = int

// DataPageLogSchemaPages1 defines model for .
type DataPageLogSchemaPages1 = interface{}

// DataPageLogSchema_Pages defines model for DataPageLogSchema.Pages.
type DataPageLogSchema_Pages struct {
	union json.RawMessage
}

// DataPageLogSchemaSize0 defines model for .
type DataPageLogSchemaSize0 = int

// DataPageLogSchemaSize1 defines model for .
type DataPageLogSchemaSize1 = interface{}

// DataPageLogSchema_Size defines model for DataPageLogSchema.Size.
type DataPageLogSchema_Size struct {
	union json.RawMessage
}

// DataPageLogSchemaTotal0 defines model for .
type DataPageLogSchemaTotal0 = int

// DataPageLogSchemaTotal1 defines model for .
type DataPageLogSchemaTotal1 = interface{}

// DataPageLogSchema_Total defines model for DataPageLogSchema.Total.
type DataPageLogSchema_Total struct {
	union json.RawMessage
}

// DataPageMapSchema defines model for DataPage_MapSchema_.
type DataPageMapSchema struct {
	Data  []MapSchema              `json:"data"`
	Page  DataPageMapSchema_Page   `json:"page"`
	Pages *DataPageMapSchema_Pages `json:"pages,omitempty"`
	Size  DataPageMapSchema_Size   `json:"size"`
	Total DataPageMapSchema_Total  `json:"total"`
}

// DataPageMapSchemaPage0 defines model for .
type DataPageMapSchemaPage0 = int

// DataPageMapSchemaPage1 defines model for .
type DataPageMapSchemaPage1 = interface{}

// DataPageMapSchema_Page defines model for DataPageMapSchema.Page.
type DataPageMapSchema_Page struct {
	union json.RawMessage
}

// DataPageMapSchemaPages0 defines model for .
type DataPageMapSchemaPages0 = int

// DataPageMapSchemaPages1 defines model for .
type DataPageMapSchemaPages1 = interface{}

// DataPageMapSchema_Pages defines model for DataPageMapSchema.Pages.
type DataPageMapSchema_Pages struct {
	union json.RawMessage
}

// DataPageMapSchemaSize0 defines model for .
type DataPageMapSchemaSize0 = int

// DataPageMapSchemaSize1 defines model for .
type DataPageMapSchemaSize1 = interface{}

// DataPageMapSchema_Size defines model for DataPageMapSchema.Size.
type DataPageMapSchema_Size struct {
	union json.RawMessage
}

// DataPageMapSchemaTotal0 defines model for .
type DataPageMapSchemaTotal0 = int

// DataPageMapSchemaTotal1 defines model for .
type DataPageMapSchemaTotal1 = interface{}

// DataPageMapSchema_Total defines model for DataPageMapSchema.Total.
type DataPageMapSchema_Total struct {
	union json.RawMessage
}

// DataPageMonsterSchema defines model for DataPage_MonsterSchema_.
type DataPageMonsterSchema struct {
	Data  []MonsterSchema              `json:"data"`
	Page  DataPageMonsterSchema_Page   `json:"page"`
	Pages *DataPageMonsterSchema_Pages `json:"pages,omitempty"`
	Size  DataPageMonsterSchema_Size   `json:"size"`
	Total DataPageMonsterSchema_Total  `json:"total"`
}

// DataPageMonsterSchemaPage0 defines model for .
type DataPageMonsterSchemaPage0 = int

// DataPageMonsterSchemaPage1 defines model for .
type DataPageMonsterSchemaPage1 = interface{}

// DataPageMonsterSchema_Page defines model for DataPageMonsterSchema.Page.
type DataPageMonsterSchema_Page struct {
	union json.RawMessage
}

// DataPageMonsterSchemaPages0 defines model for .
type DataPageMonsterSchemaPages0 = int

// DataPageMonsterSchemaPages1 defines model for .
type DataPageMonsterSchemaPages1 = interface{}

// DataPageMonsterSchema_Pages defines model for DataPageMonsterSchema.Pages.
type DataPageMonsterSchema_Pages struct {
	union json.RawMessage
}

// DataPageMonsterSchemaSize0 defines model for .
type DataPageMonsterSchemaSize0 = int

// DataPageMonsterSchemaSize1 defines model for .
type DataPageMonsterSchemaSize1 = interface{}

// DataPageMonsterSchema_Size defines model for DataPageMonsterSchema.Size.
type DataPageMonsterSchema_Size struct {
	union json.RawMessage
}

// DataPageMonsterSchemaTotal0 defines model for .
type DataPageMonsterSchemaTotal0 = int

// DataPageMonsterSchemaTotal1 defines model for .
type DataPageMonsterSchemaTotal1 = interface{}

// DataPageMonsterSchema_Total defines model for DataPageMonsterSchema.Total.
type DataPageMonsterSchema_Total struct {
	union json.RawMessage
}

// DataPageNPCItem defines model for DataPage_NPCItem_.
type DataPageNPCItem struct {
	Data  []NPCItem              `json:"data"`
	Page  DataPageNPCItem_Page   `json:"page"`
	Pages *DataPageNPCItem_Pages `json:"pages,omitempty"`
	Size  DataPageNPCItem_Size   `json:"size"`
	Total DataPageNPCItem_Total  `json:"total"`
}

// DataPageNPCItemPage0 defines model for .
type DataPageNPCItemPage0 = int

// DataPageNPCItemPage1 defines model for .
type DataPageNPCItemPage1 = interface{}

// DataPageNPCItem_Page defines model for DataPageNPCItem.Page.
type DataPageNPCItem_Page struct {
	union json.RawMessage
}

// DataPageNPCItemPages0 defines model for .
type DataPageNPCItemPages0 = int

// DataPageNPCItemPages1 defines model for .
type DataPageNPCItemPages1 = interface{}

// DataPageNPCItem_Pages defines model for DataPageNPCItem.Pages.
type DataPageNPCItem_Pages struct {
	union json.RawMessage
}

// DataPageNPCItemSize0 defines model for .
type DataPageNPCItemSize0 = int

// DataPageNPCItemSize1 defines model for .
type DataPageNPCItemSize1 = interface{}

// DataPageNPCItem_Size defines model for DataPageNPCItem.Size.
type DataPageNPCItem_Size struct {
	union json.RawMessage
}

// DataPageNPCItemTotal0 defines model for .
type DataPageNPCItemTotal0 = int

// DataPageNPCItemTotal1 defines model for .
type DataPageNPCItemTotal1 = interface{}

// DataPageNPCItem_Total defines model for DataPageNPCItem.Total.
type DataPageNPCItem_Total struct {
	union json.RawMessage
}

// DataPageNPCSchema defines model for DataPage_NPCSchema_.
type DataPageNPCSchema struct {
	Data  []NPCSchema              `json:"data"`
	Page  DataPageNPCSchema_Page   `json:"page"`
	Pages *DataPageNPCSchema_Pages `json:"pages,omitempty"`
	Size  DataPageNPCSchema_Size   `json:"size"`
	Total DataPageNPCSchema_Total  `json:"total"`
}

// DataPageNPCSchemaPage0 defines model for .
type DataPageNPCSchemaPage0 = int

// DataPageNPCSchemaPage1 defines model for .
type DataPageNPCSchemaPage1 = interface{}

// DataPageNPCSchema_Page defines model for DataPageNPCSchema.Page.
type DataPageNPCSchema_Page struct {
	union json.RawMessage
}

// DataPageNPCSchemaPages0 defines model for .
type DataPageNPCSchemaPages0 = int

// DataPageNPCSchemaPages1 defines model for .
type DataPageNPCSchemaPages1 = interface{}

// DataPageNPCSchema_Pages defines model for DataPageNPCSchema.Pages.
type DataPageNPCSchema_Pages struct {
	union json.RawMessage
}

// DataPageNPCSchemaSize0 defines model for .
type DataPageNPCSchemaSize0 = int

// DataPageNPCSchemaSize1 defines model for .
type DataPageNPCSchemaSize1 = interface{}

// DataPageNPCSchema_Size defines model for DataPageNPCSchema.Size.
type DataPageNPCSchema_Size struct {
	union json.RawMessage
}

// DataPageNPCSchemaTotal0 defines model for .
type DataPageNPCSchemaTotal0 = int

// DataPageNPCSchemaTotal1 defines model for .
type DataPageNPCSchemaTotal1 = interface{}

// DataPageNPCSchema_Total defines model for DataPageNPCSchema.Total.
type DataPageNPCSchema_Total struct {
	union json.RawMessage
}

// DataPageResourceSchema defines model for DataPage_ResourceSchema_.
type DataPageResourceSchema struct {
	Data  []ResourceSchema              `json:"data"`
	Page  DataPageResourceSchema_Page   `json:"page"`
	Pages *DataPageResourceSchema_Pages `json:"pages,omitempty"`
	Size  DataPageResourceSchema_Size   `json:"size"`
	Total DataPageResourceSchema_Total  `json:"total"`
}

// DataPageResourceSchemaPage0 defines model for .
type DataPageResourceSchemaPage0 = int

// DataPageResourceSchemaPage1 defines model for .
type DataPageResourceSchemaPage1 = interface{}

// DataPageResourceSchema_Page defines model for DataPageResourceSchema.Page.
type DataPageResourceSchema_Page struct {
	union json.RawMessage
}

// DataPageResourceSchemaPages0 defines model for .
type DataPageResourceSchemaPages0 = int

// DataPageResourceSchemaPages1 defines model for .
type DataPageResourceSchemaPages1 = interface{}

// DataPageResourceSchema_Pages defines model for DataPageResourceSchema.Pages.
type DataPageResourceSchema_Pages struct {
	union json.RawMessage
}

// DataPageResourceSchemaSize0 defines model for .
type DataPageResourceSchemaSize0 = int

// DataPageResourceSchemaSize1 defines model for .
type DataPageResourceSchemaSize1 = interface{}

// DataPageResourceSchema_Size defines model for DataPageResourceSchema.Size.
type DataPageResourceSchema_Size struct {
	union json.RawMessage
}

// DataPageResourceSchemaTotal0 defines model for .
type DataPageResourceSchemaTotal0 = int

// DataPageResourceSchemaTotal1 defines model for .
type DataPageResourceSchemaTotal1 = interface{}

// DataPageResourceSchema_Total defines model for DataPageResourceSchema.Total.
type DataPageResourceSchema_Total struct {
	union json.RawMessage
}

// DataPageSimpleItemSchema defines model for DataPage_SimpleItemSchema_.
type DataPageSimpleItemSchema struct {
	Data  []SimpleItemSchema              `json:"data"`
	Page  DataPageSimpleItemSchema_Page   `json:"page"`
	Pages *DataPageSimpleItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageSimpleItemSchema_Size   `json:"size"`
	Total DataPageSimpleItemSchema_Total  `json:"total"`
}

// DataPageSimpleItemSchemaPage0 defines model for .
type DataPageSimpleItemSchemaPage0 = int

// DataPageSimpleItemSchemaPage1 defines model for .
type DataPageSimpleItemSchemaPage1 = interface{}

// DataPageSimpleItemSchema_Page defines model for DataPageSimpleItemSchema.Page.
type DataPageSimpleItemSchema_Page struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaPages0 defines model for .
type DataPageSimpleItemSchemaPages0 = int

// DataPageSimpleItemSchemaPages1 defines model for .
type DataPageSimpleItemSchemaPages1 = interface{}

// DataPageSimpleItemSchema_Pages defines model for DataPageSimpleItemSchema.Pages.
type DataPageSimpleItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaSize0 defines model for .
type DataPageSimpleItemSchemaSize0 = int

// DataPageSimpleItemSchemaSize1 defines model for .
type DataPageSimpleItemSchemaSize1 = interface{}

// DataPageSimpleItemSchema_Size defines model for DataPageSimpleItemSchema.Size.
type DataPageSimpleItemSchema_Size struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaTotal0 defines model for .
type DataPageSimpleItemSchemaTotal0 = int

// DataPageSimpleItemSchemaTotal1 defines model for .
type DataPageSimpleItemSchemaTotal1 = interface{}

// DataPageSimpleItemSchema_Total defines model for DataPageSimpleItemSchema.Total.
type DataPageSimpleItemSchema_Total struct {
	union json.RawMessage
}

// DataPageTaskFullSchema defines model for DataPage_TaskFullSchema_.
type DataPageTaskFullSchema struct {
	Data  []TaskFullSchema              `json:"data"`
	Page  DataPageTaskFullSchema_Page   `json:"page"`
	Pages *DataPageTaskFullSchema_Pages `json:"pages,omitempty"`
	Size  DataPageTaskFullSchema_Size   `json:"size"`
	Total DataPageTaskFullSchema_Total  `json:"total"`
}

// DataPageTaskFullSchemaPage0 defines model for .
type DataPageTaskFullSchemaPage0 = int

// DataPageTaskFullSchemaPage1 defines model for .
type DataPageTaskFullSchemaPage1 = interface{}

// DataPageTaskFullSchema_Page defines model for DataPageTaskFullSchema.Page.
type DataPageTaskFullSchema_Page struct {
	union json.RawMessage
}

// DataPageTaskFullSchemaPages0 defines model for .
type DataPageTaskFullSchemaPages0 = int

// DataPageTaskFullSchemaPages1 defines model for .
type DataPageTaskFullSchemaPages1 = interface{}

// DataPageTaskFullSchema_Pages defines model for DataPageTaskFullSchema.Pages.
type DataPageTaskFullSchema_Pages struct {
	union json.RawMessage
}

// DataPageTaskFullSchemaSize0 defines model for .
type DataPageTaskFullSchemaSize0 = int

// DataPageTaskFullSchemaSize1 defines model for .
type DataPageTaskFullSchemaSize1 = interface{}

// DataPageTaskFullSchema_Size defines model for DataPageTaskFullSchema.Size.
type DataPageTaskFullSchema_Size struct {
	union json.RawMessage
}

// DataPageTaskFullSchemaTotal0 defines model for .
type DataPageTaskFullSchemaTotal0 = int

// DataPageTaskFullSchemaTotal1 defines model for .
type DataPageTaskFullSchemaTotal1 = interface{}

// DataPageTaskFullSchema_Total defines model for DataPageTaskFullSchema.Total.
type DataPageTaskFullSchema_Total struct {
	union json.RawMessage
}

// DeleteCharacterSchema defines model for DeleteCharacterSchema.
type DeleteCharacterSchema struct {
	// Name Character name.
	Name string `json:"name"`
}

// DeleteItemResponseSchema defines model for DeleteItemResponseSchema.
type DeleteItemResponseSchema struct {
	Data DeleteItemSchema `json:"data"`
}

// DeleteItemSchema defines model for DeleteItemSchema.
type DeleteItemSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item SimpleItemSchema `json:"item"`
}

// DepositWithdrawGoldSchema defines model for DepositWithdrawGoldSchema.
type DepositWithdrawGoldSchema struct {
	// Quantity Quantity of gold.
	Quantity int `json:"quantity"`
}

// DestinationSchema defines model for DestinationSchema.
type DestinationSchema struct {
	// X The x coordinate of the destination.
	X int `json:"x"`

	// Y The y coordinate of the destination.
	Y int `json:"y"`
}

// DropRateSchema defines model for DropRateSchema.
type DropRateSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// MaxQuantity Maximum quantity.
	MaxQuantity int `json:"max_quantity"`

	// MinQuantity Minimum quantity.
	MinQuantity int `json:"min_quantity"`

	// Rate Chance rate. (1/rate)
	Rate int `json:"rate"`
}

// DropSchema defines model for DropSchema.
type DropSchema struct {
	// Code The code of the item.
	Code string `json:"code"`

	// Quantity The quantity of the item.
	Quantity int `json:"quantity"`
}

// EffectResponseSchema defines model for EffectResponseSchema.
type EffectResponseSchema struct {
	Data EffectSchema `json:"data"`
}

// EffectSchema defines model for EffectSchema.
type EffectSchema struct {
	// Code The code of the effect. This is the effect's unique identifier (ID).
	Code string `json:"code"`

	// Description Description of the effect. This is a brief description of the effect.
	Description string `json:"description"`

	// Name Name of the monster.
	Name string `json:"name"`

	// Subtype Subtype of the effect.
	Subtype EffectSubtype `json:"subtype"`

	// Type Type of the effect.
	Type EffectType `json:"type"`
}

// EffectSubtype defines model for EffectSubtype.
type EffectSubtype string

// EffectType defines model for EffectType.
type EffectType string

// EquipRequestSchema defines model for EquipRequestSchema.
type EquipRequestSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`

	// Slot Item slot.
	Slot ItemSlot `json:"slot"`
}

// EquipSchema defines model for EquipSchema.
type EquipSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity. Applicable to utilities only.
	Quantity *int `json:"quantity,omitempty"`

	// Slot Item slot.
	Slot ItemSlot `json:"slot"`
}

// EquipmentResponseSchema defines model for EquipmentResponseSchema.
type EquipmentResponseSchema struct {
	Data EquipRequestSchema `json:"data"`
}

// EventContentSchema defines model for EventContentSchema.
type EventContentSchema struct {
	// Code Code content.
	Code string `json:"code"`

	// Type Type of the event.
	Type string `json:"type"`
}

// EventMapSchema defines model for EventMapSchema.
type EventMapSchema struct {
	// X Position X of the map.
	X int `json:"x"`

	// Y Position Y of the map.
	Y int `json:"y"`
}

// EventSchema defines model for EventSchema.
type EventSchema struct {
	// Code Code of the event.
	Code string `json:"code"`

	// Content Content of the event.
	Content EventContentSchema `json:"content"`

	// Duration Duration in minutes.
	Duration int `json:"duration"`

	// Maps Map list of the event.
	Maps []EventMapSchema `json:"maps"`

	// Name Name of the event.
	Name string `json:"name"`

	// Rate Rate spawn of the event. (1/rate every minute)
	Rate int `json:"rate"`

	// Skin Map skin of the event.
	Skin string `json:"skin"`
}

// FightResult defines model for FightResult.
type FightResult string

// FightSchema defines model for FightSchema.
type FightSchema struct {
	// Drops The items dropped from the fight.
	Drops []DropSchema `json:"drops"`

	// Gold The amount of gold gained from the fight.
	Gold int `json:"gold"`

	// Logs The fight logs.
	Logs []string `json:"logs"`

	// MonsterBlockedHits The amount of blocked hits by the monster.
	MonsterBlockedHits BlockedHitsSchema `json:"monster_blocked_hits"`

	// PlayerBlockedHits The amount of blocked hits by the player.
	PlayerBlockedHits BlockedHitsSchema `json:"player_blocked_hits"`

	// Result The result of the fight.
	Result FightResult `json:"result"`

	// Turns Numbers of the turns of the combat.
	Turns int `json:"turns"`

	// Xp The amount of xp gained from the fight.
	Xp int `json:"xp"`
}

// GEBuyOrderSchema defines model for GEBuyOrderSchema.
type GEBuyOrderSchema struct {
	// Id Order id.
	Id string `json:"id"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// GECancelOrderSchema defines model for GECancelOrderSchema.
type GECancelOrderSchema struct {
	// Id Order id.
	Id string `json:"id"`
}

// GECreateOrderTransactionResponseSchema defines model for GECreateOrderTransactionResponseSchema.
type GECreateOrderTransactionResponseSchema struct {
	Data GEOrderTransactionSchema `json:"data"`
}

// GEOrderCreatedSchema defines model for GEOrderCreatedSchema.
type GEOrderCreatedSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// CreatedAt Order created at.
	CreatedAt time.Time `json:"created_at"`

	// Id Order id.
	Id string `json:"id"`

	// Price Item price per unit.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// Tax Order creation tax (3%, minimum 1)
	Tax int `json:"tax"`

	// TotalPrice Total price.
	TotalPrice int `json:"total_price"`
}

// GEOrderCreationrSchema defines model for GEOrderCreationrSchema.
type GEOrderCreationrSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Price Item price per unit.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// GEOrderReponseSchema defines model for GEOrderReponseSchema.
type GEOrderReponseSchema struct {
	Data GEOrderSchema `json:"data"`
}

// GEOrderSchema defines model for GEOrderSchema.
type GEOrderSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// CreatedAt Order created at.
	CreatedAt time.Time `json:"created_at"`

	// Id Order id.
	Id string `json:"id"`

	// Price Item price per unit.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// Seller Seller account name.
	Seller string `json:"seller"`
}

// GEOrderTransactionSchema defines model for GEOrderTransactionSchema.
type GEOrderTransactionSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Order Order details.
	Order GEOrderCreatedSchema `json:"order"`
}

// GETransactionListSchema defines model for GETransactionListSchema.
type GETransactionListSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Order Transaction details.
	Order GETransactionSchema `json:"order"`
}

// GETransactionResponseSchema defines model for GETransactionResponseSchema.
type GETransactionResponseSchema struct {
	Data GETransactionListSchema `json:"data"`
}

// GETransactionSchema defines model for GETransactionSchema.
type GETransactionSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Id Order id.
	Id string `json:"id"`

	// Price Item price.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// TotalPrice Total price of the transaction.
	TotalPrice int `json:"total_price"`
}

// GatheringSkill defines model for GatheringSkill.
type GatheringSkill string

// GatheringSkillAZAZ09 defines model for GatheringSkill_a-zA-Z0-9_-_____.
type GatheringSkillAZAZ09 = GatheringSkill

// GeOrderHistorySchema defines model for GeOrderHistorySchema.
type GeOrderHistorySchema struct {
	// Buyer Buyer account name.
	Buyer string `json:"buyer"`

	// Code Item code.
	Code string `json:"code"`

	// OrderId Order id.
	OrderId string `json:"order_id"`

	// Price Item price per unit.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// Seller Seller account name.
	Seller string `json:"seller"`

	// SoldAt Sale datetime.
	SoldAt time.Time `json:"sold_at"`
}

// GoldSchema defines model for GoldSchema.
type GoldSchema struct {
	// Quantity Quantity of gold.
	Quantity int `json:"quantity"`
}

// InventorySlot defines model for InventorySlot.
type InventorySlot struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Quantity in the slot.
	Quantity int `json:"quantity"`

	// Slot Inventory slot identifier.
	Slot int `json:"slot"`
}

// ItemResponseSchema defines model for ItemResponseSchema.
type ItemResponseSchema struct {
	Data ItemSchema `json:"data"`
}

// ItemSchema defines model for ItemSchema.
type ItemSchema struct {
	// Code Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`

	// Craft Craft information. If applicable.
	Craft *ItemSchema_Craft `json:"craft,omitempty"`

	// Description Item description.
	Description string `json:"description"`

	// Effects List of object effects. For equipment, it will include item stats.
	Effects *[]SimpleEffectSchema `json:"effects,omitempty"`

	// Level Item level.
	Level int `json:"level"`

	// Name Item name.
	Name string `json:"name"`

	// Subtype Item subtype.
	Subtype string `json:"subtype"`

	// Tradeable Item tradeable status. A non-tradeable item cannot be exchanged or sold.
	Tradeable bool `json:"tradeable"`

	// Type Item type.
	Type string `json:"type"`
}

// ItemSchemaCraft1 defines model for .
type ItemSchemaCraft1 = interface{}

// ItemSchema_Craft Craft information. If applicable.
type ItemSchema_Craft struct {
	union json.RawMessage
}

// ItemSlot defines model for ItemSlot.
type ItemSlot string

// ItemType defines model for ItemType.
type ItemType string

// ItemTypeAZAZ09 defines model for ItemType_a-zA-Z0-9_-_____.
type ItemTypeAZAZ09 = ItemType

// LogSchema defines model for LogSchema.
type LogSchema struct {
	// Account Account character.
	Account string `json:"account"`

	// Character Character name.
	Character string `json:"character"`

	// Content Content of action.
	Content interface{} `json:"content"`

	// Cooldown Cooldown in seconds.
	Cooldown int `json:"cooldown"`

	// CooldownExpiration Datetime of cooldown expiration.
	CooldownExpiration LogSchema_CooldownExpiration `json:"cooldown_expiration"`

	// CreatedAt Datetime of creation.
	CreatedAt time.Time `json:"created_at"`

	// Description Description of action.
	Description string `json:"description"`

	// Type Type of action.
	Type LogType `json:"type"`
}

// LogSchemaCooldownExpiration0 defines model for .
type LogSchemaCooldownExpiration0 = time.Time

// LogSchemaCooldownExpiration1 defines model for .
type LogSchemaCooldownExpiration1 = interface{}

// LogSchema_CooldownExpiration Datetime of cooldown expiration.
type LogSchema_CooldownExpiration struct {
	union json.RawMessage
}

// LogType defines model for LogType.
type LogType string

// MapContentSchema defines model for MapContentSchema.
type MapContentSchema struct {
	// Code Code of the content.
	Code string `json:"code"`

	// Type Type of the content.
	Type string `json:"type"`
}

// MapContentType defines model for MapContentType.
type MapContentType string

// MapContentTypeAZAZ09 defines model for MapContentType_a-zA-Z0-9_-_____.
type MapContentTypeAZAZ09 = MapContentType

// MapResponseSchema defines model for MapResponseSchema.
type MapResponseSchema struct {
	Data MapSchema `json:"data"`
}

// MapSchema defines model for MapSchema.
type MapSchema struct {
	// Content Content of the map.
	Content MapSchema_Content `json:"content"`

	// Name Name of the map.
	Name string `json:"name"`

	// Skin Skin of the map.
	Skin string `json:"skin"`

	// X Position X of the map.
	X int `json:"x"`

	// Y Position Y of the map.
	Y int `json:"y"`
}

// MapSchemaContent1 defines model for .
type MapSchemaContent1 = interface{}

// MapSchema_Content Content of the map.
type MapSchema_Content struct {
	union json.RawMessage
}

// MonsterResponseSchema defines model for MonsterResponseSchema.
type MonsterResponseSchema struct {
	Data MonsterSchema `json:"data"`
}

// MonsterSchema defines model for MonsterSchema.
type MonsterSchema struct {
	// AttackAir Monster air attack.
	AttackAir int `json:"attack_air"`

	// AttackEarth Monster earth attack.
	AttackEarth int `json:"attack_earth"`

	// AttackFire Monster fire attack.
	AttackFire int `json:"attack_fire"`

	// AttackWater Monster water attack.
	AttackWater int `json:"attack_water"`

	// Code The code of the monster. This is the monster's unique identifier (ID).
	Code string `json:"code"`

	// CriticalStrike Monster % critical strike.
	CriticalStrike int `json:"critical_strike"`

	// Drops Monster drops. This is a list of items that the monster drops after killing the monster.
	Drops []DropRateSchema `json:"drops"`

	// Effects List of effects.
	Effects *[]SimpleEffectSchema `json:"effects,omitempty"`

	// Hp Monster hit points.
	Hp int `json:"hp"`

	// Level Monster level.
	Level int `json:"level"`

	// MaxGold Monster maximum gold drop.
	MaxGold int `json:"max_gold"`

	// MinGold Monster minimum gold drop.
	MinGold int `json:"min_gold"`

	// Name Name of the monster.
	Name string `json:"name"`

	// ResAir Monster % air resistance.
	ResAir int `json:"res_air"`

	// ResEarth Monster % earth resistance.
	ResEarth int `json:"res_earth"`

	// ResFire Monster % fire resistance.
	ResFire int `json:"res_fire"`

	// ResWater Monster % water resistance.
	ResWater int `json:"res_water"`
}

// MyAccountDetails defines model for MyAccountDetails.
type MyAccountDetails struct {
	// AchievementsPoints Achievement points.
	AchievementsPoints int `json:"achievements_points"`

	// Badges Account badges.
	Badges *[]interface{} `json:"badges,omitempty"`

	// BanReason Ban reason.
	BanReason *string `json:"ban_reason,omitempty"`

	// Banned Banned.
	Banned bool `json:"banned"`

	// Email Email.
	Email openapi_types.Email `json:"email"`

	// Gems Gems.
	Gems int `json:"gems"`

	// Status Member status.
	Status AccountStatus `json:"status"`

	// Subscribed Subscribed for the current season.
	Subscribed bool `json:"subscribed"`

	// Username Username.
	Username string `json:"username"`
}

// MyAccountDetailsSchema defines model for MyAccountDetailsSchema.
type MyAccountDetailsSchema struct {
	Data MyAccountDetails `json:"data"`
}

// MyCharactersListSchema defines model for MyCharactersListSchema.
type MyCharactersListSchema struct {
	// Data List of your characters.
	Data []CharacterSchema `json:"data"`
}

// NPCItem defines model for NPCItem.
type NPCItem struct {
	// BuyPrice Price to buy the item.
	BuyPrice NPCItem_BuyPrice `json:"buy_price"`

	// Code The code of the NPC. This is the NPC's unique identifier (ID).
	Code string `json:"code"`

	// Npc Code of the NPC that sells/buys the item.
	Npc string `json:"npc"`

	// SellPrice Price to sell the item.
	SellPrice NPCItem_SellPrice `json:"sell_price"`
}

// NPCItemBuyPrice0 defines model for .
type NPCItemBuyPrice0 = int

// NPCItemBuyPrice1 defines model for .
type NPCItemBuyPrice1 = interface{}

// NPCItem_BuyPrice Price to buy the item.
type NPCItem_BuyPrice struct {
	union json.RawMessage
}

// NPCItemSellPrice0 defines model for .
type NPCItemSellPrice0 = int

// NPCItemSellPrice1 defines model for .
type NPCItemSellPrice1 = interface{}

// NPCItem_SellPrice Price to sell the item.
type NPCItem_SellPrice struct {
	union json.RawMessage
}

// NPCResponseSchema defines model for NPCResponseSchema.
type NPCResponseSchema struct {
	Data NPCSchema `json:"data"`
}

// NPCSchema defines model for NPCSchema.
type NPCSchema struct {
	// Code The code of the NPC. This is the NPC's unique identifier (ID).
	Code string `json:"code"`

	// Description Description of the NPC.
	Description string `json:"description"`

	// Name Name of the NPC.
	Name string `json:"name"`

	// Type Type of the NPC.
	Type NPCType `json:"type"`
}

// NPCType defines model for NPCType.
type NPCType string

// NPCTypeAZAZ09 defines model for NPCType_a-zA-Z0-9_-_____.
type NPCTypeAZAZ09 = NPCType

// NpcItemTransactionSchema defines model for NpcItemTransactionSchema.
type NpcItemTransactionSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Price Item price.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// TotalPrice Total price of the transaction.
	TotalPrice int `json:"total_price"`
}

// NpcMerchantBuySchema defines model for NpcMerchantBuySchema.
type NpcMerchantBuySchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// NpcMerchantTransactionResponseSchema defines model for NpcMerchantTransactionResponseSchema.
type NpcMerchantTransactionResponseSchema struct {
	Data NpcMerchantTransactionSchema `json:"data"`
}

// NpcMerchantTransactionSchema defines model for NpcMerchantTransactionSchema.
type NpcMerchantTransactionSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Transaction Transaction details.
	Transaction NpcItemTransactionSchema `json:"transaction"`
}

// RecyclingDataSchema defines model for RecyclingDataSchema.
type RecyclingDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Details Craft details.
	Details RecyclingItemsSchema `json:"details"`
}

// RecyclingItemsSchema defines model for RecyclingItemsSchema.
type RecyclingItemsSchema struct {
	// Items Objects received.
	Items []DropSchema `json:"items"`
}

// RecyclingResponseSchema defines model for RecyclingResponseSchema.
type RecyclingResponseSchema struct {
	Data RecyclingDataSchema `json:"data"`
}

// RecyclingSchema defines model for RecyclingSchema.
type RecyclingSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Quantity of items to recycle.
	Quantity *int `json:"quantity,omitempty"`
}

// ResourceResponseSchema defines model for ResourceResponseSchema.
type ResourceResponseSchema struct {
	Data ResourceSchema `json:"data"`
}

// ResourceSchema defines model for ResourceSchema.
type ResourceSchema struct {
	// Code The code of the resource. This is the resource's unique identifier (ID).
	Code string `json:"code"`

	// Drops The drops of this resource.
	Drops []DropRateSchema `json:"drops"`

	// Level The skill level required to gather this resource.
	Level int `json:"level"`

	// Name The name of the resource
	Name string `json:"name"`

	// Skill The skill required to gather this resource.
	Skill GatheringSkill `json:"skill"`
}

// ResponseSchema defines model for ResponseSchema.
type ResponseSchema struct {
	Message string `json:"message"`
}

// RewardDataResponseSchema defines model for RewardDataResponseSchema.
type RewardDataResponseSchema struct {
	Data RewardDataSchema `json:"data"`
}

// RewardDataSchema defines model for RewardDataSchema.
type RewardDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Rewards Reward details.
	Rewards RewardsSchema `json:"rewards"`
}

// RewardResponseSchema defines model for RewardResponseSchema.
type RewardResponseSchema struct {
	Data DropRateSchema `json:"data"`
}

// RewardsSchema defines model for RewardsSchema.
type RewardsSchema struct {
	// Gold Gold rewards.
	Gold int `json:"gold"`

	// Items Items rewards.
	Items []SimpleItemSchema `json:"items"`
}

// SimpleEffectSchema defines model for SimpleEffectSchema.
type SimpleEffectSchema struct {
	// Code Effect code.
	Code string `json:"code"`

	// Value Effect value.
	Value int `json:"value"`
}

// SimpleItemSchema defines model for SimpleItemSchema.
type SimpleItemSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// Skill defines model for Skill.
type Skill string

// SkillDataSchema defines model for SkillDataSchema.
type SkillDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Details Craft details.
	Details SkillInfoSchema `json:"details"`
}

// SkillInfoSchema defines model for SkillInfoSchema.
type SkillInfoSchema struct {
	// Items Objects received.
	Items []DropSchema `json:"items"`

	// Xp The amount of xp gained.
	Xp int `json:"xp"`
}

// SkillResponseSchema defines model for SkillResponseSchema.
type SkillResponseSchema struct {
	Data SkillDataSchema `json:"data"`
}

// SkillAZAZ09 defines model for Skill_a-zA-Z0-9_-_____.
type SkillAZAZ09 = Skill

// StatusResponseSchema defines model for StatusResponseSchema.
type StatusResponseSchema struct {
	Data StatusSchema `json:"data"`
}

// StatusSchema defines model for StatusSchema.
type StatusSchema struct {
	// Announcements Server announcements.
	Announcements []AnnouncementSchema `json:"announcements"`

	// CharactersOnline Characters online.
	CharactersOnline int `json:"characters_online"`

	// LastWipe Last server wipe.
	LastWipe string `json:"last_wipe"`

	// MaxLevel Maximum level.
	MaxLevel int `json:"max_level"`

	// NextWipe Next server wipe.
	NextWipe string `json:"next_wipe"`

	// ServerTime Server time.
	ServerTime time.Time `json:"server_time"`

	// Status Server status
	Status string `json:"status"`

	// Version Game version.
	Version string `json:"version"`
}

// TaskCancelledResponseSchema defines model for TaskCancelledResponseSchema.
type TaskCancelledResponseSchema struct {
	Data TaskCancelledSchema `json:"data"`
}

// TaskCancelledSchema defines model for TaskCancelledSchema.
type TaskCancelledSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`
}

// TaskDataSchema defines model for TaskDataSchema.
type TaskDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Task Task details.
	Task TaskSchema `json:"task"`
}

// TaskFullResponseSchema defines model for TaskFullResponseSchema.
type TaskFullResponseSchema struct {
	Data TaskFullSchema `json:"data"`
}

// TaskFullSchema defines model for TaskFullSchema.
type TaskFullSchema struct {
	// Code Task objective.
	Code string `json:"code"`

	// Level Task level.
	Level int `json:"level"`

	// MaxQuantity Maximum amount of task.
	MaxQuantity int `json:"max_quantity"`

	// MinQuantity Minimum amount of task.
	MinQuantity int `json:"min_quantity"`

	// Rewards Rewards.
	Rewards RewardsSchema `json:"rewards"`

	// Skill Skill required to complete the task.
	Skill TaskFullSchema_Skill `json:"skill"`

	// Type The type of task.
	Type TaskType `json:"type"`
}

// TaskFullSchemaSkill0 defines model for .
type TaskFullSchemaSkill0 = string

// TaskFullSchemaSkill1 defines model for .
type TaskFullSchemaSkill1 = interface{}

// TaskFullSchema_Skill Skill required to complete the task.
type TaskFullSchema_Skill struct {
	union json.RawMessage
}

// TaskResponseSchema defines model for TaskResponseSchema.
type TaskResponseSchema struct {
	Data TaskDataSchema `json:"data"`
}

// TaskSchema defines model for TaskSchema.
type TaskSchema struct {
	// Code Task objective.
	Code string `json:"code"`

	// Rewards Rewards for completing the task.
	Rewards RewardsSchema `json:"rewards"`

	// Total The total required to complete the task.
	Total int `json:"total"`

	// Type The type of task.
	Type TaskType `json:"type"`
}

// TaskTradeDataSchema defines model for TaskTradeDataSchema.
type TaskTradeDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Trade Reward details.
	Trade TaskTradeSchema `json:"trade"`
}

// TaskTradeResponseSchema defines model for TaskTradeResponseSchema.
type TaskTradeResponseSchema struct {
	Data TaskTradeDataSchema `json:"data"`
}

// TaskTradeSchema defines model for TaskTradeSchema.
type TaskTradeSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// TaskType defines model for TaskType.
type TaskType string

// TaskTypeAZAZ09 defines model for TaskType_a-zA-Z0-9_-_____.
type TaskTypeAZAZ09 = TaskType

// TokenResponseSchema defines model for TokenResponseSchema.
type TokenResponseSchema struct {
	Token string `json:"token"`
}

// UnequipSchema defines model for UnequipSchema.
type UnequipSchema struct {
	// Quantity Item quantity. Applicable to utilities only.
	Quantity *int `json:"quantity,omitempty"`

	// Slot Item slot.
	Slot ItemSlot `json:"slot"`
}

// UseItemResponseSchema defines model for UseItemResponseSchema.
type UseItemResponseSchema struct {
	Data UseItemSchema `json:"data"`
}

// UseItemSchema defines model for UseItemSchema.
type UseItemSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`
}

// GetAccountAchievementsAccountsAccountAchievementsGetParams defines parameters for GetAccountAchievementsAccountsAccountAchievementsGet.
type GetAccountAchievementsAccountsAccountAchievementsGetParams struct {
	// Type Type of achievements.
	Type *AchievementTypeAZAZ09 `form:"type,omitempty" json:"type,omitempty"`

	// Completed Filter by completed achievements.
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllAchievementsAchievementsGetParams defines parameters for GetAllAchievementsAchievementsGet.
type GetAllAchievementsAchievementsGetParams struct {
	// Type Type of achievements.
	Type *AchievementTypeAZAZ09 `form:"type,omitempty" json:"type,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllBadgesBadgesGetParams defines parameters for GetAllBadgesBadgesGet.
type GetAllBadgesBadgesGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllEffectsEffectsGetParams defines parameters for GetAllEffectsEffectsGet.
type GetAllEffectsEffectsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllEventsEventsGetParams defines parameters for GetAllEventsEventsGet.
type GetAllEventsEventsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllActiveEventsEventsActiveGetParams defines parameters for GetAllActiveEventsEventsActiveGet.
type GetAllActiveEventsEventsActiveGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetGeSellHistoryGrandexchangeHistoryCodeGetParams defines parameters for GetGeSellHistoryGrandexchangeHistoryCodeGet.
type GetGeSellHistoryGrandexchangeHistoryCodeGetParams struct {
	// Seller The seller (account name) of the item.
	Seller *string `form:"seller,omitempty" json:"seller,omitempty"`

	// Buyer The buyer (account name) of the item.
	Buyer *string `form:"buyer,omitempty" json:"buyer,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetGeSellOrdersGrandexchangeOrdersGetParams defines parameters for GetGeSellOrdersGrandexchangeOrdersGet.
type GetGeSellOrdersGrandexchangeOrdersGetParams struct {
	// Code The code of the item.
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// Seller The seller (account name) of the item.
	Seller *string `form:"seller,omitempty" json:"seller,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllItemsItemsGetParams defines parameters for GetAllItemsItemsGet.
type GetAllItemsItemsGetParams struct {
	// MinLevel Minimum level items.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Maximum level items.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Name Name of the item.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Type Type of items.
	Type *ItemTypeAZAZ09 `form:"type,omitempty" json:"type,omitempty"`

	// CraftSkill Skill to craft items.
	CraftSkill *CraftSkillAZAZ09 `form:"craft_skill,omitempty" json:"craft_skill,omitempty"`

	// CraftMaterial Item code of items used as material for crafting.
	CraftMaterial *string `form:"craft_material,omitempty" json:"craft_material,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAccountsLeaderboardLeaderboardAccountsGetParams defines parameters for GetAccountsLeaderboardLeaderboardAccountsGet.
type GetAccountsLeaderboardLeaderboardAccountsGetParams struct {
	// Sort Default sort by achievements points.
	Sort *AccountLeaderboardTypeAZAZ09 `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetCharactersLeaderboardLeaderboardCharactersGetParams defines parameters for GetCharactersLeaderboardLeaderboardCharactersGet.
type GetCharactersLeaderboardLeaderboardCharactersGetParams struct {
	// Sort Default sort by combat total XP.
	Sort *CharacterLeaderboardTypeAZAZ09 `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllMapsMapsGetParams defines parameters for GetAllMapsMapsGet.
type GetAllMapsMapsGetParams struct {
	// ContentType Type of content on the map.
	ContentType *MapContentTypeAZAZ09 `form:"content_type,omitempty" json:"content_type,omitempty"`

	// ContentCode Content code on the map.
	ContentCode *string `form:"content_code,omitempty" json:"content_code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllMonstersMonstersGetParams defines parameters for GetAllMonstersMonstersGet.
type GetAllMonstersMonstersGetParams struct {
	// MinLevel Monster minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Monster maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Drop Item code of the drop.
	Drop *string `form:"drop,omitempty" json:"drop,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetBankItemsMyBankItemsGetParams defines parameters for GetBankItemsMyBankItemsGet.
type GetBankItemsMyBankItemsGetParams struct {
	// ItemCode Item to search in your bank.
	ItemCode *string `form:"item_code,omitempty" json:"item_code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetGeSellHistoryMyGrandexchangeHistoryGetParams defines parameters for GetGeSellHistoryMyGrandexchangeHistoryGet.
type GetGeSellHistoryMyGrandexchangeHistoryGetParams struct {
	// Id Order ID to search in your history.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Code Item to search in your history.
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetGeSellOrdersMyGrandexchangeOrdersGetParams defines parameters for GetGeSellOrdersMyGrandexchangeOrdersGet.
type GetGeSellOrdersMyGrandexchangeOrdersGetParams struct {
	// Code The code of the item.
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllCharactersLogsMyLogsGetParams defines parameters for GetAllCharactersLogsMyLogsGet.
type GetAllCharactersLogsMyLogsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllNpcsNpcsGetParams defines parameters for GetAllNpcsNpcsGet.
type GetAllNpcsNpcsGetParams struct {
	// Type The type of the NPC.
	Type *NPCTypeAZAZ09 `form:"type,omitempty" json:"type,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetNpcItemsNpcsCodeItemsGetParams defines parameters for GetNpcItemsNpcsCodeItemsGet.
type GetNpcItemsNpcsCodeItemsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllResourcesResourcesGetParams defines parameters for GetAllResourcesResourcesGet.
type GetAllResourcesResourcesGetParams struct {
	// MinLevel Skill minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Skill maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Skill The code of the skill.
	Skill *GatheringSkillAZAZ09 `form:"skill,omitempty" json:"skill,omitempty"`

	// Drop Item code of the drop.
	Drop *string `form:"drop,omitempty" json:"drop,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllTasksTasksListGetParams defines parameters for GetAllTasksTasksListGet.
type GetAllTasksTasksListGetParams struct {
	// MinLevel Minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Skill The code of the skill.
	Skill *SkillAZAZ09 `form:"skill,omitempty" json:"skill,omitempty"`

	// Type The type of tasks.
	Type *TaskTypeAZAZ09 `form:"type,omitempty" json:"type,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllTasksRewardsTasksRewardsGetParams defines parameters for GetAllTasksRewardsTasksRewardsGet.
type GetAllTasksRewardsTasksRewardsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// CreateAccountAccountsCreatePostJSONRequestBody defines body for CreateAccountAccountsCreatePost for application/json ContentType.
type CreateAccountAccountsCreatePostJSONRequestBody = AddAccountSchema

// CreateCharacterCharactersCreatePostJSONRequestBody defines body for CreateCharacterCharactersCreatePost for application/json ContentType.
type CreateCharacterCharactersCreatePostJSONRequestBody = AddCharacterSchema

// DeleteCharacterCharactersDeletePostJSONRequestBody defines body for DeleteCharacterCharactersDeletePost for application/json ContentType.
type DeleteCharacterCharactersDeletePostJSONRequestBody = DeleteCharacterSchema

// ChangePasswordMyChangePasswordPostJSONRequestBody defines body for ChangePasswordMyChangePasswordPost for application/json ContentType.
type ChangePasswordMyChangePasswordPostJSONRequestBody = ChangePassword

// ActionDepositBankMyNameActionBankDepositPostJSONRequestBody defines body for ActionDepositBankMyNameActionBankDepositPost for application/json ContentType.
type ActionDepositBankMyNameActionBankDepositPostJSONRequestBody = SimpleItemSchema

// ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody defines body for ActionDepositBankGoldMyNameActionBankDepositGoldPost for application/json ContentType.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody = DepositWithdrawGoldSchema

// ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody defines body for ActionWithdrawBankMyNameActionBankWithdrawPost for application/json ContentType.
type ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody = SimpleItemSchema

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody defines body for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost for application/json ContentType.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody = DepositWithdrawGoldSchema

// ActionCraftingMyNameActionCraftingPostJSONRequestBody defines body for ActionCraftingMyNameActionCraftingPost for application/json ContentType.
type ActionCraftingMyNameActionCraftingPostJSONRequestBody = CraftingSchema

// ActionDeleteItemMyNameActionDeletePostJSONRequestBody defines body for ActionDeleteItemMyNameActionDeletePost for application/json ContentType.
type ActionDeleteItemMyNameActionDeletePostJSONRequestBody = SimpleItemSchema

// ActionEquipItemMyNameActionEquipPostJSONRequestBody defines body for ActionEquipItemMyNameActionEquipPost for application/json ContentType.
type ActionEquipItemMyNameActionEquipPostJSONRequestBody = EquipSchema

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody defines body for ActionGeBuyItemMyNameActionGrandexchangeBuyPost for application/json ContentType.
type ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody = GEBuyOrderSchema

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody defines body for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost for application/json ContentType.
type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody = GECancelOrderSchema

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody defines body for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost for application/json ContentType.
type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody = GEOrderCreationrSchema

// ActionMoveMyNameActionMovePostJSONRequestBody defines body for ActionMoveMyNameActionMovePost for application/json ContentType.
type ActionMoveMyNameActionMovePostJSONRequestBody = DestinationSchema

// ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody defines body for ActionNpcBuyItemMyNameActionNpcBuyPost for application/json ContentType.
type ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody = NpcMerchantBuySchema

// ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody defines body for ActionNpcSellItemMyNameActionNpcSellPost for application/json ContentType.
type ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody = NpcMerchantBuySchema

// ActionRecyclingMyNameActionRecyclingPostJSONRequestBody defines body for ActionRecyclingMyNameActionRecyclingPost for application/json ContentType.
type ActionRecyclingMyNameActionRecyclingPostJSONRequestBody = RecyclingSchema

// ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody defines body for ActionTaskTradeMyNameActionTaskTradePost for application/json ContentType.
type ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody = SimpleItemSchema

// ActionUnequipItemMyNameActionUnequipPostJSONRequestBody defines body for ActionUnequipItemMyNameActionUnequipPost for application/json ContentType.
type ActionUnequipItemMyNameActionUnequipPostJSONRequestBody = UnequipSchema

// ActionUseItemMyNameActionUsePostJSONRequestBody defines body for ActionUseItemMyNameActionUsePost for application/json ContentType.
type ActionUseItemMyNameActionUsePostJSONRequestBody = SimpleItemSchema

// AsAccountAchievementSchemaCompletedAt0 returns the union data inside the AccountAchievementSchema_CompletedAt as a AccountAchievementSchemaCompletedAt0
func (t AccountAchievementSchema_CompletedAt) AsAccountAchievementSchemaCompletedAt0() (AccountAchievementSchemaCompletedAt0, error) {
	var body AccountAchievementSchemaCompletedAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountAchievementSchemaCompletedAt0 overwrites any union data inside the AccountAchievementSchema_CompletedAt as the provided AccountAchievementSchemaCompletedAt0
func (t *AccountAchievementSchema_CompletedAt) FromAccountAchievementSchemaCompletedAt0(v AccountAchievementSchemaCompletedAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountAchievementSchemaCompletedAt0 performs a merge with any union data inside the AccountAchievementSchema_CompletedAt, using the provided AccountAchievementSchemaCompletedAt0
func (t *AccountAchievementSchema_CompletedAt) MergeAccountAchievementSchemaCompletedAt0(v AccountAchievementSchemaCompletedAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountAchievementSchemaCompletedAt1 returns the union data inside the AccountAchievementSchema_CompletedAt as a AccountAchievementSchemaCompletedAt1
func (t AccountAchievementSchema_CompletedAt) AsAccountAchievementSchemaCompletedAt1() (AccountAchievementSchemaCompletedAt1, error) {
	var body AccountAchievementSchemaCompletedAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountAchievementSchemaCompletedAt1 overwrites any union data inside the AccountAchievementSchema_CompletedAt as the provided AccountAchievementSchemaCompletedAt1
func (t *AccountAchievementSchema_CompletedAt) FromAccountAchievementSchemaCompletedAt1(v AccountAchievementSchemaCompletedAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountAchievementSchemaCompletedAt1 performs a merge with any union data inside the AccountAchievementSchema_CompletedAt, using the provided AccountAchievementSchemaCompletedAt1
func (t *AccountAchievementSchema_CompletedAt) MergeAccountAchievementSchemaCompletedAt1(v AccountAchievementSchemaCompletedAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountAchievementSchema_CompletedAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccountAchievementSchema_CompletedAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccountAchievementSchemaTarget0 returns the union data inside the AccountAchievementSchema_Target as a AccountAchievementSchemaTarget0
func (t AccountAchievementSchema_Target) AsAccountAchievementSchemaTarget0() (AccountAchievementSchemaTarget0, error) {
	var body AccountAchievementSchemaTarget0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountAchievementSchemaTarget0 overwrites any union data inside the AccountAchievementSchema_Target as the provided AccountAchievementSchemaTarget0
func (t *AccountAchievementSchema_Target) FromAccountAchievementSchemaTarget0(v AccountAchievementSchemaTarget0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountAchievementSchemaTarget0 performs a merge with any union data inside the AccountAchievementSchema_Target, using the provided AccountAchievementSchemaTarget0
func (t *AccountAchievementSchema_Target) MergeAccountAchievementSchemaTarget0(v AccountAchievementSchemaTarget0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountAchievementSchemaTarget1 returns the union data inside the AccountAchievementSchema_Target as a AccountAchievementSchemaTarget1
func (t AccountAchievementSchema_Target) AsAccountAchievementSchemaTarget1() (AccountAchievementSchemaTarget1, error) {
	var body AccountAchievementSchemaTarget1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountAchievementSchemaTarget1 overwrites any union data inside the AccountAchievementSchema_Target as the provided AccountAchievementSchemaTarget1
func (t *AccountAchievementSchema_Target) FromAccountAchievementSchemaTarget1(v AccountAchievementSchemaTarget1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountAchievementSchemaTarget1 performs a merge with any union data inside the AccountAchievementSchema_Target, using the provided AccountAchievementSchemaTarget1
func (t *AccountAchievementSchema_Target) MergeAccountAchievementSchemaTarget1(v AccountAchievementSchemaTarget1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountAchievementSchema_Target) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccountAchievementSchema_Target) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAchievementSchemaTarget0 returns the union data inside the AchievementSchema_Target as a AchievementSchemaTarget0
func (t AchievementSchema_Target) AsAchievementSchemaTarget0() (AchievementSchemaTarget0, error) {
	var body AchievementSchemaTarget0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAchievementSchemaTarget0 overwrites any union data inside the AchievementSchema_Target as the provided AchievementSchemaTarget0
func (t *AchievementSchema_Target) FromAchievementSchemaTarget0(v AchievementSchemaTarget0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAchievementSchemaTarget0 performs a merge with any union data inside the AchievementSchema_Target, using the provided AchievementSchemaTarget0
func (t *AchievementSchema_Target) MergeAchievementSchemaTarget0(v AchievementSchemaTarget0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAchievementSchemaTarget1 returns the union data inside the AchievementSchema_Target as a AchievementSchemaTarget1
func (t AchievementSchema_Target) AsAchievementSchemaTarget1() (AchievementSchemaTarget1, error) {
	var body AchievementSchemaTarget1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAchievementSchemaTarget1 overwrites any union data inside the AchievementSchema_Target as the provided AchievementSchemaTarget1
func (t *AchievementSchema_Target) FromAchievementSchemaTarget1(v AchievementSchemaTarget1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAchievementSchemaTarget1 performs a merge with any union data inside the AchievementSchema_Target, using the provided AchievementSchemaTarget1
func (t *AchievementSchema_Target) MergeAchievementSchemaTarget1(v AchievementSchemaTarget1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AchievementSchema_Target) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AchievementSchema_Target) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBadgeConditionSchemaQuantity0 returns the union data inside the BadgeConditionSchema_Quantity as a BadgeConditionSchemaQuantity0
func (t BadgeConditionSchema_Quantity) AsBadgeConditionSchemaQuantity0() (BadgeConditionSchemaQuantity0, error) {
	var body BadgeConditionSchemaQuantity0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadgeConditionSchemaQuantity0 overwrites any union data inside the BadgeConditionSchema_Quantity as the provided BadgeConditionSchemaQuantity0
func (t *BadgeConditionSchema_Quantity) FromBadgeConditionSchemaQuantity0(v BadgeConditionSchemaQuantity0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadgeConditionSchemaQuantity0 performs a merge with any union data inside the BadgeConditionSchema_Quantity, using the provided BadgeConditionSchemaQuantity0
func (t *BadgeConditionSchema_Quantity) MergeBadgeConditionSchemaQuantity0(v BadgeConditionSchemaQuantity0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBadgeConditionSchemaQuantity1 returns the union data inside the BadgeConditionSchema_Quantity as a BadgeConditionSchemaQuantity1
func (t BadgeConditionSchema_Quantity) AsBadgeConditionSchemaQuantity1() (BadgeConditionSchemaQuantity1, error) {
	var body BadgeConditionSchemaQuantity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadgeConditionSchemaQuantity1 overwrites any union data inside the BadgeConditionSchema_Quantity as the provided BadgeConditionSchemaQuantity1
func (t *BadgeConditionSchema_Quantity) FromBadgeConditionSchemaQuantity1(v BadgeConditionSchemaQuantity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadgeConditionSchemaQuantity1 performs a merge with any union data inside the BadgeConditionSchema_Quantity, using the provided BadgeConditionSchemaQuantity1
func (t *BadgeConditionSchema_Quantity) MergeBadgeConditionSchemaQuantity1(v BadgeConditionSchemaQuantity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BadgeConditionSchema_Quantity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BadgeConditionSchema_Quantity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBadgeSchemaSeason0 returns the union data inside the BadgeSchema_Season as a BadgeSchemaSeason0
func (t BadgeSchema_Season) AsBadgeSchemaSeason0() (BadgeSchemaSeason0, error) {
	var body BadgeSchemaSeason0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadgeSchemaSeason0 overwrites any union data inside the BadgeSchema_Season as the provided BadgeSchemaSeason0
func (t *BadgeSchema_Season) FromBadgeSchemaSeason0(v BadgeSchemaSeason0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadgeSchemaSeason0 performs a merge with any union data inside the BadgeSchema_Season, using the provided BadgeSchemaSeason0
func (t *BadgeSchema_Season) MergeBadgeSchemaSeason0(v BadgeSchemaSeason0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBadgeSchemaSeason1 returns the union data inside the BadgeSchema_Season as a BadgeSchemaSeason1
func (t BadgeSchema_Season) AsBadgeSchemaSeason1() (BadgeSchemaSeason1, error) {
	var body BadgeSchemaSeason1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadgeSchemaSeason1 overwrites any union data inside the BadgeSchema_Season as the provided BadgeSchemaSeason1
func (t *BadgeSchema_Season) FromBadgeSchemaSeason1(v BadgeSchemaSeason1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadgeSchemaSeason1 performs a merge with any union data inside the BadgeSchema_Season, using the provided BadgeSchemaSeason1
func (t *BadgeSchema_Season) MergeBadgeSchemaSeason1(v BadgeSchemaSeason1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BadgeSchema_Season) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BadgeSchema_Season) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountAchievementSchemaPage0 returns the union data inside the DataPageAccountAchievementSchema_Page as a DataPageAccountAchievementSchemaPage0
func (t DataPageAccountAchievementSchema_Page) AsDataPageAccountAchievementSchemaPage0() (DataPageAccountAchievementSchemaPage0, error) {
	var body DataPageAccountAchievementSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaPage0 overwrites any union data inside the DataPageAccountAchievementSchema_Page as the provided DataPageAccountAchievementSchemaPage0
func (t *DataPageAccountAchievementSchema_Page) FromDataPageAccountAchievementSchemaPage0(v DataPageAccountAchievementSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaPage0 performs a merge with any union data inside the DataPageAccountAchievementSchema_Page, using the provided DataPageAccountAchievementSchemaPage0
func (t *DataPageAccountAchievementSchema_Page) MergeDataPageAccountAchievementSchemaPage0(v DataPageAccountAchievementSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountAchievementSchemaPage1 returns the union data inside the DataPageAccountAchievementSchema_Page as a DataPageAccountAchievementSchemaPage1
func (t DataPageAccountAchievementSchema_Page) AsDataPageAccountAchievementSchemaPage1() (DataPageAccountAchievementSchemaPage1, error) {
	var body DataPageAccountAchievementSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaPage1 overwrites any union data inside the DataPageAccountAchievementSchema_Page as the provided DataPageAccountAchievementSchemaPage1
func (t *DataPageAccountAchievementSchema_Page) FromDataPageAccountAchievementSchemaPage1(v DataPageAccountAchievementSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaPage1 performs a merge with any union data inside the DataPageAccountAchievementSchema_Page, using the provided DataPageAccountAchievementSchemaPage1
func (t *DataPageAccountAchievementSchema_Page) MergeDataPageAccountAchievementSchemaPage1(v DataPageAccountAchievementSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountAchievementSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountAchievementSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountAchievementSchemaPages0 returns the union data inside the DataPageAccountAchievementSchema_Pages as a DataPageAccountAchievementSchemaPages0
func (t DataPageAccountAchievementSchema_Pages) AsDataPageAccountAchievementSchemaPages0() (DataPageAccountAchievementSchemaPages0, error) {
	var body DataPageAccountAchievementSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaPages0 overwrites any union data inside the DataPageAccountAchievementSchema_Pages as the provided DataPageAccountAchievementSchemaPages0
func (t *DataPageAccountAchievementSchema_Pages) FromDataPageAccountAchievementSchemaPages0(v DataPageAccountAchievementSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaPages0 performs a merge with any union data inside the DataPageAccountAchievementSchema_Pages, using the provided DataPageAccountAchievementSchemaPages0
func (t *DataPageAccountAchievementSchema_Pages) MergeDataPageAccountAchievementSchemaPages0(v DataPageAccountAchievementSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountAchievementSchemaPages1 returns the union data inside the DataPageAccountAchievementSchema_Pages as a DataPageAccountAchievementSchemaPages1
func (t DataPageAccountAchievementSchema_Pages) AsDataPageAccountAchievementSchemaPages1() (DataPageAccountAchievementSchemaPages1, error) {
	var body DataPageAccountAchievementSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaPages1 overwrites any union data inside the DataPageAccountAchievementSchema_Pages as the provided DataPageAccountAchievementSchemaPages1
func (t *DataPageAccountAchievementSchema_Pages) FromDataPageAccountAchievementSchemaPages1(v DataPageAccountAchievementSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaPages1 performs a merge with any union data inside the DataPageAccountAchievementSchema_Pages, using the provided DataPageAccountAchievementSchemaPages1
func (t *DataPageAccountAchievementSchema_Pages) MergeDataPageAccountAchievementSchemaPages1(v DataPageAccountAchievementSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountAchievementSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountAchievementSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountAchievementSchemaSize0 returns the union data inside the DataPageAccountAchievementSchema_Size as a DataPageAccountAchievementSchemaSize0
func (t DataPageAccountAchievementSchema_Size) AsDataPageAccountAchievementSchemaSize0() (DataPageAccountAchievementSchemaSize0, error) {
	var body DataPageAccountAchievementSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaSize0 overwrites any union data inside the DataPageAccountAchievementSchema_Size as the provided DataPageAccountAchievementSchemaSize0
func (t *DataPageAccountAchievementSchema_Size) FromDataPageAccountAchievementSchemaSize0(v DataPageAccountAchievementSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaSize0 performs a merge with any union data inside the DataPageAccountAchievementSchema_Size, using the provided DataPageAccountAchievementSchemaSize0
func (t *DataPageAccountAchievementSchema_Size) MergeDataPageAccountAchievementSchemaSize0(v DataPageAccountAchievementSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountAchievementSchemaSize1 returns the union data inside the DataPageAccountAchievementSchema_Size as a DataPageAccountAchievementSchemaSize1
func (t DataPageAccountAchievementSchema_Size) AsDataPageAccountAchievementSchemaSize1() (DataPageAccountAchievementSchemaSize1, error) {
	var body DataPageAccountAchievementSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaSize1 overwrites any union data inside the DataPageAccountAchievementSchema_Size as the provided DataPageAccountAchievementSchemaSize1
func (t *DataPageAccountAchievementSchema_Size) FromDataPageAccountAchievementSchemaSize1(v DataPageAccountAchievementSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaSize1 performs a merge with any union data inside the DataPageAccountAchievementSchema_Size, using the provided DataPageAccountAchievementSchemaSize1
func (t *DataPageAccountAchievementSchema_Size) MergeDataPageAccountAchievementSchemaSize1(v DataPageAccountAchievementSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountAchievementSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountAchievementSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountAchievementSchemaTotal0 returns the union data inside the DataPageAccountAchievementSchema_Total as a DataPageAccountAchievementSchemaTotal0
func (t DataPageAccountAchievementSchema_Total) AsDataPageAccountAchievementSchemaTotal0() (DataPageAccountAchievementSchemaTotal0, error) {
	var body DataPageAccountAchievementSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaTotal0 overwrites any union data inside the DataPageAccountAchievementSchema_Total as the provided DataPageAccountAchievementSchemaTotal0
func (t *DataPageAccountAchievementSchema_Total) FromDataPageAccountAchievementSchemaTotal0(v DataPageAccountAchievementSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaTotal0 performs a merge with any union data inside the DataPageAccountAchievementSchema_Total, using the provided DataPageAccountAchievementSchemaTotal0
func (t *DataPageAccountAchievementSchema_Total) MergeDataPageAccountAchievementSchemaTotal0(v DataPageAccountAchievementSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountAchievementSchemaTotal1 returns the union data inside the DataPageAccountAchievementSchema_Total as a DataPageAccountAchievementSchemaTotal1
func (t DataPageAccountAchievementSchema_Total) AsDataPageAccountAchievementSchemaTotal1() (DataPageAccountAchievementSchemaTotal1, error) {
	var body DataPageAccountAchievementSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountAchievementSchemaTotal1 overwrites any union data inside the DataPageAccountAchievementSchema_Total as the provided DataPageAccountAchievementSchemaTotal1
func (t *DataPageAccountAchievementSchema_Total) FromDataPageAccountAchievementSchemaTotal1(v DataPageAccountAchievementSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountAchievementSchemaTotal1 performs a merge with any union data inside the DataPageAccountAchievementSchema_Total, using the provided DataPageAccountAchievementSchemaTotal1
func (t *DataPageAccountAchievementSchema_Total) MergeDataPageAccountAchievementSchemaTotal1(v DataPageAccountAchievementSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountAchievementSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountAchievementSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountLeaderboardSchemaPage0 returns the union data inside the DataPageAccountLeaderboardSchema_Page as a DataPageAccountLeaderboardSchemaPage0
func (t DataPageAccountLeaderboardSchema_Page) AsDataPageAccountLeaderboardSchemaPage0() (DataPageAccountLeaderboardSchemaPage0, error) {
	var body DataPageAccountLeaderboardSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaPage0 overwrites any union data inside the DataPageAccountLeaderboardSchema_Page as the provided DataPageAccountLeaderboardSchemaPage0
func (t *DataPageAccountLeaderboardSchema_Page) FromDataPageAccountLeaderboardSchemaPage0(v DataPageAccountLeaderboardSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaPage0 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Page, using the provided DataPageAccountLeaderboardSchemaPage0
func (t *DataPageAccountLeaderboardSchema_Page) MergeDataPageAccountLeaderboardSchemaPage0(v DataPageAccountLeaderboardSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountLeaderboardSchemaPage1 returns the union data inside the DataPageAccountLeaderboardSchema_Page as a DataPageAccountLeaderboardSchemaPage1
func (t DataPageAccountLeaderboardSchema_Page) AsDataPageAccountLeaderboardSchemaPage1() (DataPageAccountLeaderboardSchemaPage1, error) {
	var body DataPageAccountLeaderboardSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaPage1 overwrites any union data inside the DataPageAccountLeaderboardSchema_Page as the provided DataPageAccountLeaderboardSchemaPage1
func (t *DataPageAccountLeaderboardSchema_Page) FromDataPageAccountLeaderboardSchemaPage1(v DataPageAccountLeaderboardSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaPage1 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Page, using the provided DataPageAccountLeaderboardSchemaPage1
func (t *DataPageAccountLeaderboardSchema_Page) MergeDataPageAccountLeaderboardSchemaPage1(v DataPageAccountLeaderboardSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountLeaderboardSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountLeaderboardSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountLeaderboardSchemaPages0 returns the union data inside the DataPageAccountLeaderboardSchema_Pages as a DataPageAccountLeaderboardSchemaPages0
func (t DataPageAccountLeaderboardSchema_Pages) AsDataPageAccountLeaderboardSchemaPages0() (DataPageAccountLeaderboardSchemaPages0, error) {
	var body DataPageAccountLeaderboardSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaPages0 overwrites any union data inside the DataPageAccountLeaderboardSchema_Pages as the provided DataPageAccountLeaderboardSchemaPages0
func (t *DataPageAccountLeaderboardSchema_Pages) FromDataPageAccountLeaderboardSchemaPages0(v DataPageAccountLeaderboardSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaPages0 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Pages, using the provided DataPageAccountLeaderboardSchemaPages0
func (t *DataPageAccountLeaderboardSchema_Pages) MergeDataPageAccountLeaderboardSchemaPages0(v DataPageAccountLeaderboardSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountLeaderboardSchemaPages1 returns the union data inside the DataPageAccountLeaderboardSchema_Pages as a DataPageAccountLeaderboardSchemaPages1
func (t DataPageAccountLeaderboardSchema_Pages) AsDataPageAccountLeaderboardSchemaPages1() (DataPageAccountLeaderboardSchemaPages1, error) {
	var body DataPageAccountLeaderboardSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaPages1 overwrites any union data inside the DataPageAccountLeaderboardSchema_Pages as the provided DataPageAccountLeaderboardSchemaPages1
func (t *DataPageAccountLeaderboardSchema_Pages) FromDataPageAccountLeaderboardSchemaPages1(v DataPageAccountLeaderboardSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaPages1 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Pages, using the provided DataPageAccountLeaderboardSchemaPages1
func (t *DataPageAccountLeaderboardSchema_Pages) MergeDataPageAccountLeaderboardSchemaPages1(v DataPageAccountLeaderboardSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountLeaderboardSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountLeaderboardSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountLeaderboardSchemaSize0 returns the union data inside the DataPageAccountLeaderboardSchema_Size as a DataPageAccountLeaderboardSchemaSize0
func (t DataPageAccountLeaderboardSchema_Size) AsDataPageAccountLeaderboardSchemaSize0() (DataPageAccountLeaderboardSchemaSize0, error) {
	var body DataPageAccountLeaderboardSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaSize0 overwrites any union data inside the DataPageAccountLeaderboardSchema_Size as the provided DataPageAccountLeaderboardSchemaSize0
func (t *DataPageAccountLeaderboardSchema_Size) FromDataPageAccountLeaderboardSchemaSize0(v DataPageAccountLeaderboardSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaSize0 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Size, using the provided DataPageAccountLeaderboardSchemaSize0
func (t *DataPageAccountLeaderboardSchema_Size) MergeDataPageAccountLeaderboardSchemaSize0(v DataPageAccountLeaderboardSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountLeaderboardSchemaSize1 returns the union data inside the DataPageAccountLeaderboardSchema_Size as a DataPageAccountLeaderboardSchemaSize1
func (t DataPageAccountLeaderboardSchema_Size) AsDataPageAccountLeaderboardSchemaSize1() (DataPageAccountLeaderboardSchemaSize1, error) {
	var body DataPageAccountLeaderboardSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaSize1 overwrites any union data inside the DataPageAccountLeaderboardSchema_Size as the provided DataPageAccountLeaderboardSchemaSize1
func (t *DataPageAccountLeaderboardSchema_Size) FromDataPageAccountLeaderboardSchemaSize1(v DataPageAccountLeaderboardSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaSize1 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Size, using the provided DataPageAccountLeaderboardSchemaSize1
func (t *DataPageAccountLeaderboardSchema_Size) MergeDataPageAccountLeaderboardSchemaSize1(v DataPageAccountLeaderboardSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountLeaderboardSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountLeaderboardSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAccountLeaderboardSchemaTotal0 returns the union data inside the DataPageAccountLeaderboardSchema_Total as a DataPageAccountLeaderboardSchemaTotal0
func (t DataPageAccountLeaderboardSchema_Total) AsDataPageAccountLeaderboardSchemaTotal0() (DataPageAccountLeaderboardSchemaTotal0, error) {
	var body DataPageAccountLeaderboardSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaTotal0 overwrites any union data inside the DataPageAccountLeaderboardSchema_Total as the provided DataPageAccountLeaderboardSchemaTotal0
func (t *DataPageAccountLeaderboardSchema_Total) FromDataPageAccountLeaderboardSchemaTotal0(v DataPageAccountLeaderboardSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaTotal0 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Total, using the provided DataPageAccountLeaderboardSchemaTotal0
func (t *DataPageAccountLeaderboardSchema_Total) MergeDataPageAccountLeaderboardSchemaTotal0(v DataPageAccountLeaderboardSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAccountLeaderboardSchemaTotal1 returns the union data inside the DataPageAccountLeaderboardSchema_Total as a DataPageAccountLeaderboardSchemaTotal1
func (t DataPageAccountLeaderboardSchema_Total) AsDataPageAccountLeaderboardSchemaTotal1() (DataPageAccountLeaderboardSchemaTotal1, error) {
	var body DataPageAccountLeaderboardSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAccountLeaderboardSchemaTotal1 overwrites any union data inside the DataPageAccountLeaderboardSchema_Total as the provided DataPageAccountLeaderboardSchemaTotal1
func (t *DataPageAccountLeaderboardSchema_Total) FromDataPageAccountLeaderboardSchemaTotal1(v DataPageAccountLeaderboardSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAccountLeaderboardSchemaTotal1 performs a merge with any union data inside the DataPageAccountLeaderboardSchema_Total, using the provided DataPageAccountLeaderboardSchemaTotal1
func (t *DataPageAccountLeaderboardSchema_Total) MergeDataPageAccountLeaderboardSchemaTotal1(v DataPageAccountLeaderboardSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAccountLeaderboardSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAccountLeaderboardSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAchievementSchemaPage0 returns the union data inside the DataPageAchievementSchema_Page as a DataPageAchievementSchemaPage0
func (t DataPageAchievementSchema_Page) AsDataPageAchievementSchemaPage0() (DataPageAchievementSchemaPage0, error) {
	var body DataPageAchievementSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaPage0 overwrites any union data inside the DataPageAchievementSchema_Page as the provided DataPageAchievementSchemaPage0
func (t *DataPageAchievementSchema_Page) FromDataPageAchievementSchemaPage0(v DataPageAchievementSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaPage0 performs a merge with any union data inside the DataPageAchievementSchema_Page, using the provided DataPageAchievementSchemaPage0
func (t *DataPageAchievementSchema_Page) MergeDataPageAchievementSchemaPage0(v DataPageAchievementSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAchievementSchemaPage1 returns the union data inside the DataPageAchievementSchema_Page as a DataPageAchievementSchemaPage1
func (t DataPageAchievementSchema_Page) AsDataPageAchievementSchemaPage1() (DataPageAchievementSchemaPage1, error) {
	var body DataPageAchievementSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaPage1 overwrites any union data inside the DataPageAchievementSchema_Page as the provided DataPageAchievementSchemaPage1
func (t *DataPageAchievementSchema_Page) FromDataPageAchievementSchemaPage1(v DataPageAchievementSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaPage1 performs a merge with any union data inside the DataPageAchievementSchema_Page, using the provided DataPageAchievementSchemaPage1
func (t *DataPageAchievementSchema_Page) MergeDataPageAchievementSchemaPage1(v DataPageAchievementSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAchievementSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAchievementSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAchievementSchemaPages0 returns the union data inside the DataPageAchievementSchema_Pages as a DataPageAchievementSchemaPages0
func (t DataPageAchievementSchema_Pages) AsDataPageAchievementSchemaPages0() (DataPageAchievementSchemaPages0, error) {
	var body DataPageAchievementSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaPages0 overwrites any union data inside the DataPageAchievementSchema_Pages as the provided DataPageAchievementSchemaPages0
func (t *DataPageAchievementSchema_Pages) FromDataPageAchievementSchemaPages0(v DataPageAchievementSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaPages0 performs a merge with any union data inside the DataPageAchievementSchema_Pages, using the provided DataPageAchievementSchemaPages0
func (t *DataPageAchievementSchema_Pages) MergeDataPageAchievementSchemaPages0(v DataPageAchievementSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAchievementSchemaPages1 returns the union data inside the DataPageAchievementSchema_Pages as a DataPageAchievementSchemaPages1
func (t DataPageAchievementSchema_Pages) AsDataPageAchievementSchemaPages1() (DataPageAchievementSchemaPages1, error) {
	var body DataPageAchievementSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaPages1 overwrites any union data inside the DataPageAchievementSchema_Pages as the provided DataPageAchievementSchemaPages1
func (t *DataPageAchievementSchema_Pages) FromDataPageAchievementSchemaPages1(v DataPageAchievementSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaPages1 performs a merge with any union data inside the DataPageAchievementSchema_Pages, using the provided DataPageAchievementSchemaPages1
func (t *DataPageAchievementSchema_Pages) MergeDataPageAchievementSchemaPages1(v DataPageAchievementSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAchievementSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAchievementSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAchievementSchemaSize0 returns the union data inside the DataPageAchievementSchema_Size as a DataPageAchievementSchemaSize0
func (t DataPageAchievementSchema_Size) AsDataPageAchievementSchemaSize0() (DataPageAchievementSchemaSize0, error) {
	var body DataPageAchievementSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaSize0 overwrites any union data inside the DataPageAchievementSchema_Size as the provided DataPageAchievementSchemaSize0
func (t *DataPageAchievementSchema_Size) FromDataPageAchievementSchemaSize0(v DataPageAchievementSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaSize0 performs a merge with any union data inside the DataPageAchievementSchema_Size, using the provided DataPageAchievementSchemaSize0
func (t *DataPageAchievementSchema_Size) MergeDataPageAchievementSchemaSize0(v DataPageAchievementSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAchievementSchemaSize1 returns the union data inside the DataPageAchievementSchema_Size as a DataPageAchievementSchemaSize1
func (t DataPageAchievementSchema_Size) AsDataPageAchievementSchemaSize1() (DataPageAchievementSchemaSize1, error) {
	var body DataPageAchievementSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaSize1 overwrites any union data inside the DataPageAchievementSchema_Size as the provided DataPageAchievementSchemaSize1
func (t *DataPageAchievementSchema_Size) FromDataPageAchievementSchemaSize1(v DataPageAchievementSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaSize1 performs a merge with any union data inside the DataPageAchievementSchema_Size, using the provided DataPageAchievementSchemaSize1
func (t *DataPageAchievementSchema_Size) MergeDataPageAchievementSchemaSize1(v DataPageAchievementSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAchievementSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAchievementSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageAchievementSchemaTotal0 returns the union data inside the DataPageAchievementSchema_Total as a DataPageAchievementSchemaTotal0
func (t DataPageAchievementSchema_Total) AsDataPageAchievementSchemaTotal0() (DataPageAchievementSchemaTotal0, error) {
	var body DataPageAchievementSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaTotal0 overwrites any union data inside the DataPageAchievementSchema_Total as the provided DataPageAchievementSchemaTotal0
func (t *DataPageAchievementSchema_Total) FromDataPageAchievementSchemaTotal0(v DataPageAchievementSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaTotal0 performs a merge with any union data inside the DataPageAchievementSchema_Total, using the provided DataPageAchievementSchemaTotal0
func (t *DataPageAchievementSchema_Total) MergeDataPageAchievementSchemaTotal0(v DataPageAchievementSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageAchievementSchemaTotal1 returns the union data inside the DataPageAchievementSchema_Total as a DataPageAchievementSchemaTotal1
func (t DataPageAchievementSchema_Total) AsDataPageAchievementSchemaTotal1() (DataPageAchievementSchemaTotal1, error) {
	var body DataPageAchievementSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageAchievementSchemaTotal1 overwrites any union data inside the DataPageAchievementSchema_Total as the provided DataPageAchievementSchemaTotal1
func (t *DataPageAchievementSchema_Total) FromDataPageAchievementSchemaTotal1(v DataPageAchievementSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageAchievementSchemaTotal1 performs a merge with any union data inside the DataPageAchievementSchema_Total, using the provided DataPageAchievementSchemaTotal1
func (t *DataPageAchievementSchema_Total) MergeDataPageAchievementSchemaTotal1(v DataPageAchievementSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageAchievementSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageAchievementSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaPage0 returns the union data inside the DataPageActiveEventSchema_Page as a DataPageActiveEventSchemaPage0
func (t DataPageActiveEventSchema_Page) AsDataPageActiveEventSchemaPage0() (DataPageActiveEventSchemaPage0, error) {
	var body DataPageActiveEventSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPage0 overwrites any union data inside the DataPageActiveEventSchema_Page as the provided DataPageActiveEventSchemaPage0
func (t *DataPageActiveEventSchema_Page) FromDataPageActiveEventSchemaPage0(v DataPageActiveEventSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPage0 performs a merge with any union data inside the DataPageActiveEventSchema_Page, using the provided DataPageActiveEventSchemaPage0
func (t *DataPageActiveEventSchema_Page) MergeDataPageActiveEventSchemaPage0(v DataPageActiveEventSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaPage1 returns the union data inside the DataPageActiveEventSchema_Page as a DataPageActiveEventSchemaPage1
func (t DataPageActiveEventSchema_Page) AsDataPageActiveEventSchemaPage1() (DataPageActiveEventSchemaPage1, error) {
	var body DataPageActiveEventSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPage1 overwrites any union data inside the DataPageActiveEventSchema_Page as the provided DataPageActiveEventSchemaPage1
func (t *DataPageActiveEventSchema_Page) FromDataPageActiveEventSchemaPage1(v DataPageActiveEventSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPage1 performs a merge with any union data inside the DataPageActiveEventSchema_Page, using the provided DataPageActiveEventSchemaPage1
func (t *DataPageActiveEventSchema_Page) MergeDataPageActiveEventSchemaPage1(v DataPageActiveEventSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaPages0 returns the union data inside the DataPageActiveEventSchema_Pages as a DataPageActiveEventSchemaPages0
func (t DataPageActiveEventSchema_Pages) AsDataPageActiveEventSchemaPages0() (DataPageActiveEventSchemaPages0, error) {
	var body DataPageActiveEventSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPages0 overwrites any union data inside the DataPageActiveEventSchema_Pages as the provided DataPageActiveEventSchemaPages0
func (t *DataPageActiveEventSchema_Pages) FromDataPageActiveEventSchemaPages0(v DataPageActiveEventSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPages0 performs a merge with any union data inside the DataPageActiveEventSchema_Pages, using the provided DataPageActiveEventSchemaPages0
func (t *DataPageActiveEventSchema_Pages) MergeDataPageActiveEventSchemaPages0(v DataPageActiveEventSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaPages1 returns the union data inside the DataPageActiveEventSchema_Pages as a DataPageActiveEventSchemaPages1
func (t DataPageActiveEventSchema_Pages) AsDataPageActiveEventSchemaPages1() (DataPageActiveEventSchemaPages1, error) {
	var body DataPageActiveEventSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPages1 overwrites any union data inside the DataPageActiveEventSchema_Pages as the provided DataPageActiveEventSchemaPages1
func (t *DataPageActiveEventSchema_Pages) FromDataPageActiveEventSchemaPages1(v DataPageActiveEventSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPages1 performs a merge with any union data inside the DataPageActiveEventSchema_Pages, using the provided DataPageActiveEventSchemaPages1
func (t *DataPageActiveEventSchema_Pages) MergeDataPageActiveEventSchemaPages1(v DataPageActiveEventSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaSize0 returns the union data inside the DataPageActiveEventSchema_Size as a DataPageActiveEventSchemaSize0
func (t DataPageActiveEventSchema_Size) AsDataPageActiveEventSchemaSize0() (DataPageActiveEventSchemaSize0, error) {
	var body DataPageActiveEventSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaSize0 overwrites any union data inside the DataPageActiveEventSchema_Size as the provided DataPageActiveEventSchemaSize0
func (t *DataPageActiveEventSchema_Size) FromDataPageActiveEventSchemaSize0(v DataPageActiveEventSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaSize0 performs a merge with any union data inside the DataPageActiveEventSchema_Size, using the provided DataPageActiveEventSchemaSize0
func (t *DataPageActiveEventSchema_Size) MergeDataPageActiveEventSchemaSize0(v DataPageActiveEventSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaSize1 returns the union data inside the DataPageActiveEventSchema_Size as a DataPageActiveEventSchemaSize1
func (t DataPageActiveEventSchema_Size) AsDataPageActiveEventSchemaSize1() (DataPageActiveEventSchemaSize1, error) {
	var body DataPageActiveEventSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaSize1 overwrites any union data inside the DataPageActiveEventSchema_Size as the provided DataPageActiveEventSchemaSize1
func (t *DataPageActiveEventSchema_Size) FromDataPageActiveEventSchemaSize1(v DataPageActiveEventSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaSize1 performs a merge with any union data inside the DataPageActiveEventSchema_Size, using the provided DataPageActiveEventSchemaSize1
func (t *DataPageActiveEventSchema_Size) MergeDataPageActiveEventSchemaSize1(v DataPageActiveEventSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaTotal0 returns the union data inside the DataPageActiveEventSchema_Total as a DataPageActiveEventSchemaTotal0
func (t DataPageActiveEventSchema_Total) AsDataPageActiveEventSchemaTotal0() (DataPageActiveEventSchemaTotal0, error) {
	var body DataPageActiveEventSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaTotal0 overwrites any union data inside the DataPageActiveEventSchema_Total as the provided DataPageActiveEventSchemaTotal0
func (t *DataPageActiveEventSchema_Total) FromDataPageActiveEventSchemaTotal0(v DataPageActiveEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaTotal0 performs a merge with any union data inside the DataPageActiveEventSchema_Total, using the provided DataPageActiveEventSchemaTotal0
func (t *DataPageActiveEventSchema_Total) MergeDataPageActiveEventSchemaTotal0(v DataPageActiveEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaTotal1 returns the union data inside the DataPageActiveEventSchema_Total as a DataPageActiveEventSchemaTotal1
func (t DataPageActiveEventSchema_Total) AsDataPageActiveEventSchemaTotal1() (DataPageActiveEventSchemaTotal1, error) {
	var body DataPageActiveEventSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaTotal1 overwrites any union data inside the DataPageActiveEventSchema_Total as the provided DataPageActiveEventSchemaTotal1
func (t *DataPageActiveEventSchema_Total) FromDataPageActiveEventSchemaTotal1(v DataPageActiveEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaTotal1 performs a merge with any union data inside the DataPageActiveEventSchema_Total, using the provided DataPageActiveEventSchemaTotal1
func (t *DataPageActiveEventSchema_Total) MergeDataPageActiveEventSchemaTotal1(v DataPageActiveEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageBadgeSchemaPage0 returns the union data inside the DataPageBadgeSchema_Page as a DataPageBadgeSchemaPage0
func (t DataPageBadgeSchema_Page) AsDataPageBadgeSchemaPage0() (DataPageBadgeSchemaPage0, error) {
	var body DataPageBadgeSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaPage0 overwrites any union data inside the DataPageBadgeSchema_Page as the provided DataPageBadgeSchemaPage0
func (t *DataPageBadgeSchema_Page) FromDataPageBadgeSchemaPage0(v DataPageBadgeSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaPage0 performs a merge with any union data inside the DataPageBadgeSchema_Page, using the provided DataPageBadgeSchemaPage0
func (t *DataPageBadgeSchema_Page) MergeDataPageBadgeSchemaPage0(v DataPageBadgeSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageBadgeSchemaPage1 returns the union data inside the DataPageBadgeSchema_Page as a DataPageBadgeSchemaPage1
func (t DataPageBadgeSchema_Page) AsDataPageBadgeSchemaPage1() (DataPageBadgeSchemaPage1, error) {
	var body DataPageBadgeSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaPage1 overwrites any union data inside the DataPageBadgeSchema_Page as the provided DataPageBadgeSchemaPage1
func (t *DataPageBadgeSchema_Page) FromDataPageBadgeSchemaPage1(v DataPageBadgeSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaPage1 performs a merge with any union data inside the DataPageBadgeSchema_Page, using the provided DataPageBadgeSchemaPage1
func (t *DataPageBadgeSchema_Page) MergeDataPageBadgeSchemaPage1(v DataPageBadgeSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageBadgeSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageBadgeSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageBadgeSchemaPages0 returns the union data inside the DataPageBadgeSchema_Pages as a DataPageBadgeSchemaPages0
func (t DataPageBadgeSchema_Pages) AsDataPageBadgeSchemaPages0() (DataPageBadgeSchemaPages0, error) {
	var body DataPageBadgeSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaPages0 overwrites any union data inside the DataPageBadgeSchema_Pages as the provided DataPageBadgeSchemaPages0
func (t *DataPageBadgeSchema_Pages) FromDataPageBadgeSchemaPages0(v DataPageBadgeSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaPages0 performs a merge with any union data inside the DataPageBadgeSchema_Pages, using the provided DataPageBadgeSchemaPages0
func (t *DataPageBadgeSchema_Pages) MergeDataPageBadgeSchemaPages0(v DataPageBadgeSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageBadgeSchemaPages1 returns the union data inside the DataPageBadgeSchema_Pages as a DataPageBadgeSchemaPages1
func (t DataPageBadgeSchema_Pages) AsDataPageBadgeSchemaPages1() (DataPageBadgeSchemaPages1, error) {
	var body DataPageBadgeSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaPages1 overwrites any union data inside the DataPageBadgeSchema_Pages as the provided DataPageBadgeSchemaPages1
func (t *DataPageBadgeSchema_Pages) FromDataPageBadgeSchemaPages1(v DataPageBadgeSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaPages1 performs a merge with any union data inside the DataPageBadgeSchema_Pages, using the provided DataPageBadgeSchemaPages1
func (t *DataPageBadgeSchema_Pages) MergeDataPageBadgeSchemaPages1(v DataPageBadgeSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageBadgeSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageBadgeSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageBadgeSchemaSize0 returns the union data inside the DataPageBadgeSchema_Size as a DataPageBadgeSchemaSize0
func (t DataPageBadgeSchema_Size) AsDataPageBadgeSchemaSize0() (DataPageBadgeSchemaSize0, error) {
	var body DataPageBadgeSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaSize0 overwrites any union data inside the DataPageBadgeSchema_Size as the provided DataPageBadgeSchemaSize0
func (t *DataPageBadgeSchema_Size) FromDataPageBadgeSchemaSize0(v DataPageBadgeSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaSize0 performs a merge with any union data inside the DataPageBadgeSchema_Size, using the provided DataPageBadgeSchemaSize0
func (t *DataPageBadgeSchema_Size) MergeDataPageBadgeSchemaSize0(v DataPageBadgeSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageBadgeSchemaSize1 returns the union data inside the DataPageBadgeSchema_Size as a DataPageBadgeSchemaSize1
func (t DataPageBadgeSchema_Size) AsDataPageBadgeSchemaSize1() (DataPageBadgeSchemaSize1, error) {
	var body DataPageBadgeSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaSize1 overwrites any union data inside the DataPageBadgeSchema_Size as the provided DataPageBadgeSchemaSize1
func (t *DataPageBadgeSchema_Size) FromDataPageBadgeSchemaSize1(v DataPageBadgeSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaSize1 performs a merge with any union data inside the DataPageBadgeSchema_Size, using the provided DataPageBadgeSchemaSize1
func (t *DataPageBadgeSchema_Size) MergeDataPageBadgeSchemaSize1(v DataPageBadgeSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageBadgeSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageBadgeSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageBadgeSchemaTotal0 returns the union data inside the DataPageBadgeSchema_Total as a DataPageBadgeSchemaTotal0
func (t DataPageBadgeSchema_Total) AsDataPageBadgeSchemaTotal0() (DataPageBadgeSchemaTotal0, error) {
	var body DataPageBadgeSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaTotal0 overwrites any union data inside the DataPageBadgeSchema_Total as the provided DataPageBadgeSchemaTotal0
func (t *DataPageBadgeSchema_Total) FromDataPageBadgeSchemaTotal0(v DataPageBadgeSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaTotal0 performs a merge with any union data inside the DataPageBadgeSchema_Total, using the provided DataPageBadgeSchemaTotal0
func (t *DataPageBadgeSchema_Total) MergeDataPageBadgeSchemaTotal0(v DataPageBadgeSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageBadgeSchemaTotal1 returns the union data inside the DataPageBadgeSchema_Total as a DataPageBadgeSchemaTotal1
func (t DataPageBadgeSchema_Total) AsDataPageBadgeSchemaTotal1() (DataPageBadgeSchemaTotal1, error) {
	var body DataPageBadgeSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageBadgeSchemaTotal1 overwrites any union data inside the DataPageBadgeSchema_Total as the provided DataPageBadgeSchemaTotal1
func (t *DataPageBadgeSchema_Total) FromDataPageBadgeSchemaTotal1(v DataPageBadgeSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageBadgeSchemaTotal1 performs a merge with any union data inside the DataPageBadgeSchema_Total, using the provided DataPageBadgeSchemaTotal1
func (t *DataPageBadgeSchema_Total) MergeDataPageBadgeSchemaTotal1(v DataPageBadgeSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageBadgeSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageBadgeSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterLeaderboardSchemaPage0 returns the union data inside the DataPageCharacterLeaderboardSchema_Page as a DataPageCharacterLeaderboardSchemaPage0
func (t DataPageCharacterLeaderboardSchema_Page) AsDataPageCharacterLeaderboardSchemaPage0() (DataPageCharacterLeaderboardSchemaPage0, error) {
	var body DataPageCharacterLeaderboardSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaPage0 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Page as the provided DataPageCharacterLeaderboardSchemaPage0
func (t *DataPageCharacterLeaderboardSchema_Page) FromDataPageCharacterLeaderboardSchemaPage0(v DataPageCharacterLeaderboardSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaPage0 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Page, using the provided DataPageCharacterLeaderboardSchemaPage0
func (t *DataPageCharacterLeaderboardSchema_Page) MergeDataPageCharacterLeaderboardSchemaPage0(v DataPageCharacterLeaderboardSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterLeaderboardSchemaPage1 returns the union data inside the DataPageCharacterLeaderboardSchema_Page as a DataPageCharacterLeaderboardSchemaPage1
func (t DataPageCharacterLeaderboardSchema_Page) AsDataPageCharacterLeaderboardSchemaPage1() (DataPageCharacterLeaderboardSchemaPage1, error) {
	var body DataPageCharacterLeaderboardSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaPage1 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Page as the provided DataPageCharacterLeaderboardSchemaPage1
func (t *DataPageCharacterLeaderboardSchema_Page) FromDataPageCharacterLeaderboardSchemaPage1(v DataPageCharacterLeaderboardSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaPage1 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Page, using the provided DataPageCharacterLeaderboardSchemaPage1
func (t *DataPageCharacterLeaderboardSchema_Page) MergeDataPageCharacterLeaderboardSchemaPage1(v DataPageCharacterLeaderboardSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterLeaderboardSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterLeaderboardSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterLeaderboardSchemaPages0 returns the union data inside the DataPageCharacterLeaderboardSchema_Pages as a DataPageCharacterLeaderboardSchemaPages0
func (t DataPageCharacterLeaderboardSchema_Pages) AsDataPageCharacterLeaderboardSchemaPages0() (DataPageCharacterLeaderboardSchemaPages0, error) {
	var body DataPageCharacterLeaderboardSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaPages0 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Pages as the provided DataPageCharacterLeaderboardSchemaPages0
func (t *DataPageCharacterLeaderboardSchema_Pages) FromDataPageCharacterLeaderboardSchemaPages0(v DataPageCharacterLeaderboardSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaPages0 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Pages, using the provided DataPageCharacterLeaderboardSchemaPages0
func (t *DataPageCharacterLeaderboardSchema_Pages) MergeDataPageCharacterLeaderboardSchemaPages0(v DataPageCharacterLeaderboardSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterLeaderboardSchemaPages1 returns the union data inside the DataPageCharacterLeaderboardSchema_Pages as a DataPageCharacterLeaderboardSchemaPages1
func (t DataPageCharacterLeaderboardSchema_Pages) AsDataPageCharacterLeaderboardSchemaPages1() (DataPageCharacterLeaderboardSchemaPages1, error) {
	var body DataPageCharacterLeaderboardSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaPages1 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Pages as the provided DataPageCharacterLeaderboardSchemaPages1
func (t *DataPageCharacterLeaderboardSchema_Pages) FromDataPageCharacterLeaderboardSchemaPages1(v DataPageCharacterLeaderboardSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaPages1 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Pages, using the provided DataPageCharacterLeaderboardSchemaPages1
func (t *DataPageCharacterLeaderboardSchema_Pages) MergeDataPageCharacterLeaderboardSchemaPages1(v DataPageCharacterLeaderboardSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterLeaderboardSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterLeaderboardSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterLeaderboardSchemaSize0 returns the union data inside the DataPageCharacterLeaderboardSchema_Size as a DataPageCharacterLeaderboardSchemaSize0
func (t DataPageCharacterLeaderboardSchema_Size) AsDataPageCharacterLeaderboardSchemaSize0() (DataPageCharacterLeaderboardSchemaSize0, error) {
	var body DataPageCharacterLeaderboardSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaSize0 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Size as the provided DataPageCharacterLeaderboardSchemaSize0
func (t *DataPageCharacterLeaderboardSchema_Size) FromDataPageCharacterLeaderboardSchemaSize0(v DataPageCharacterLeaderboardSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaSize0 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Size, using the provided DataPageCharacterLeaderboardSchemaSize0
func (t *DataPageCharacterLeaderboardSchema_Size) MergeDataPageCharacterLeaderboardSchemaSize0(v DataPageCharacterLeaderboardSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterLeaderboardSchemaSize1 returns the union data inside the DataPageCharacterLeaderboardSchema_Size as a DataPageCharacterLeaderboardSchemaSize1
func (t DataPageCharacterLeaderboardSchema_Size) AsDataPageCharacterLeaderboardSchemaSize1() (DataPageCharacterLeaderboardSchemaSize1, error) {
	var body DataPageCharacterLeaderboardSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaSize1 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Size as the provided DataPageCharacterLeaderboardSchemaSize1
func (t *DataPageCharacterLeaderboardSchema_Size) FromDataPageCharacterLeaderboardSchemaSize1(v DataPageCharacterLeaderboardSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaSize1 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Size, using the provided DataPageCharacterLeaderboardSchemaSize1
func (t *DataPageCharacterLeaderboardSchema_Size) MergeDataPageCharacterLeaderboardSchemaSize1(v DataPageCharacterLeaderboardSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterLeaderboardSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterLeaderboardSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterLeaderboardSchemaTotal0 returns the union data inside the DataPageCharacterLeaderboardSchema_Total as a DataPageCharacterLeaderboardSchemaTotal0
func (t DataPageCharacterLeaderboardSchema_Total) AsDataPageCharacterLeaderboardSchemaTotal0() (DataPageCharacterLeaderboardSchemaTotal0, error) {
	var body DataPageCharacterLeaderboardSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaTotal0 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Total as the provided DataPageCharacterLeaderboardSchemaTotal0
func (t *DataPageCharacterLeaderboardSchema_Total) FromDataPageCharacterLeaderboardSchemaTotal0(v DataPageCharacterLeaderboardSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaTotal0 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Total, using the provided DataPageCharacterLeaderboardSchemaTotal0
func (t *DataPageCharacterLeaderboardSchema_Total) MergeDataPageCharacterLeaderboardSchemaTotal0(v DataPageCharacterLeaderboardSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterLeaderboardSchemaTotal1 returns the union data inside the DataPageCharacterLeaderboardSchema_Total as a DataPageCharacterLeaderboardSchemaTotal1
func (t DataPageCharacterLeaderboardSchema_Total) AsDataPageCharacterLeaderboardSchemaTotal1() (DataPageCharacterLeaderboardSchemaTotal1, error) {
	var body DataPageCharacterLeaderboardSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterLeaderboardSchemaTotal1 overwrites any union data inside the DataPageCharacterLeaderboardSchema_Total as the provided DataPageCharacterLeaderboardSchemaTotal1
func (t *DataPageCharacterLeaderboardSchema_Total) FromDataPageCharacterLeaderboardSchemaTotal1(v DataPageCharacterLeaderboardSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterLeaderboardSchemaTotal1 performs a merge with any union data inside the DataPageCharacterLeaderboardSchema_Total, using the provided DataPageCharacterLeaderboardSchemaTotal1
func (t *DataPageCharacterLeaderboardSchema_Total) MergeDataPageCharacterLeaderboardSchemaTotal1(v DataPageCharacterLeaderboardSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterLeaderboardSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterLeaderboardSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageDropRateSchemaPage0 returns the union data inside the DataPageDropRateSchema_Page as a DataPageDropRateSchemaPage0
func (t DataPageDropRateSchema_Page) AsDataPageDropRateSchemaPage0() (DataPageDropRateSchemaPage0, error) {
	var body DataPageDropRateSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaPage0 overwrites any union data inside the DataPageDropRateSchema_Page as the provided DataPageDropRateSchemaPage0
func (t *DataPageDropRateSchema_Page) FromDataPageDropRateSchemaPage0(v DataPageDropRateSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaPage0 performs a merge with any union data inside the DataPageDropRateSchema_Page, using the provided DataPageDropRateSchemaPage0
func (t *DataPageDropRateSchema_Page) MergeDataPageDropRateSchemaPage0(v DataPageDropRateSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageDropRateSchemaPage1 returns the union data inside the DataPageDropRateSchema_Page as a DataPageDropRateSchemaPage1
func (t DataPageDropRateSchema_Page) AsDataPageDropRateSchemaPage1() (DataPageDropRateSchemaPage1, error) {
	var body DataPageDropRateSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaPage1 overwrites any union data inside the DataPageDropRateSchema_Page as the provided DataPageDropRateSchemaPage1
func (t *DataPageDropRateSchema_Page) FromDataPageDropRateSchemaPage1(v DataPageDropRateSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaPage1 performs a merge with any union data inside the DataPageDropRateSchema_Page, using the provided DataPageDropRateSchemaPage1
func (t *DataPageDropRateSchema_Page) MergeDataPageDropRateSchemaPage1(v DataPageDropRateSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageDropRateSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageDropRateSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageDropRateSchemaPages0 returns the union data inside the DataPageDropRateSchema_Pages as a DataPageDropRateSchemaPages0
func (t DataPageDropRateSchema_Pages) AsDataPageDropRateSchemaPages0() (DataPageDropRateSchemaPages0, error) {
	var body DataPageDropRateSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaPages0 overwrites any union data inside the DataPageDropRateSchema_Pages as the provided DataPageDropRateSchemaPages0
func (t *DataPageDropRateSchema_Pages) FromDataPageDropRateSchemaPages0(v DataPageDropRateSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaPages0 performs a merge with any union data inside the DataPageDropRateSchema_Pages, using the provided DataPageDropRateSchemaPages0
func (t *DataPageDropRateSchema_Pages) MergeDataPageDropRateSchemaPages0(v DataPageDropRateSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageDropRateSchemaPages1 returns the union data inside the DataPageDropRateSchema_Pages as a DataPageDropRateSchemaPages1
func (t DataPageDropRateSchema_Pages) AsDataPageDropRateSchemaPages1() (DataPageDropRateSchemaPages1, error) {
	var body DataPageDropRateSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaPages1 overwrites any union data inside the DataPageDropRateSchema_Pages as the provided DataPageDropRateSchemaPages1
func (t *DataPageDropRateSchema_Pages) FromDataPageDropRateSchemaPages1(v DataPageDropRateSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaPages1 performs a merge with any union data inside the DataPageDropRateSchema_Pages, using the provided DataPageDropRateSchemaPages1
func (t *DataPageDropRateSchema_Pages) MergeDataPageDropRateSchemaPages1(v DataPageDropRateSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageDropRateSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageDropRateSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageDropRateSchemaSize0 returns the union data inside the DataPageDropRateSchema_Size as a DataPageDropRateSchemaSize0
func (t DataPageDropRateSchema_Size) AsDataPageDropRateSchemaSize0() (DataPageDropRateSchemaSize0, error) {
	var body DataPageDropRateSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaSize0 overwrites any union data inside the DataPageDropRateSchema_Size as the provided DataPageDropRateSchemaSize0
func (t *DataPageDropRateSchema_Size) FromDataPageDropRateSchemaSize0(v DataPageDropRateSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaSize0 performs a merge with any union data inside the DataPageDropRateSchema_Size, using the provided DataPageDropRateSchemaSize0
func (t *DataPageDropRateSchema_Size) MergeDataPageDropRateSchemaSize0(v DataPageDropRateSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageDropRateSchemaSize1 returns the union data inside the DataPageDropRateSchema_Size as a DataPageDropRateSchemaSize1
func (t DataPageDropRateSchema_Size) AsDataPageDropRateSchemaSize1() (DataPageDropRateSchemaSize1, error) {
	var body DataPageDropRateSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaSize1 overwrites any union data inside the DataPageDropRateSchema_Size as the provided DataPageDropRateSchemaSize1
func (t *DataPageDropRateSchema_Size) FromDataPageDropRateSchemaSize1(v DataPageDropRateSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaSize1 performs a merge with any union data inside the DataPageDropRateSchema_Size, using the provided DataPageDropRateSchemaSize1
func (t *DataPageDropRateSchema_Size) MergeDataPageDropRateSchemaSize1(v DataPageDropRateSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageDropRateSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageDropRateSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageDropRateSchemaTotal0 returns the union data inside the DataPageDropRateSchema_Total as a DataPageDropRateSchemaTotal0
func (t DataPageDropRateSchema_Total) AsDataPageDropRateSchemaTotal0() (DataPageDropRateSchemaTotal0, error) {
	var body DataPageDropRateSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaTotal0 overwrites any union data inside the DataPageDropRateSchema_Total as the provided DataPageDropRateSchemaTotal0
func (t *DataPageDropRateSchema_Total) FromDataPageDropRateSchemaTotal0(v DataPageDropRateSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaTotal0 performs a merge with any union data inside the DataPageDropRateSchema_Total, using the provided DataPageDropRateSchemaTotal0
func (t *DataPageDropRateSchema_Total) MergeDataPageDropRateSchemaTotal0(v DataPageDropRateSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageDropRateSchemaTotal1 returns the union data inside the DataPageDropRateSchema_Total as a DataPageDropRateSchemaTotal1
func (t DataPageDropRateSchema_Total) AsDataPageDropRateSchemaTotal1() (DataPageDropRateSchemaTotal1, error) {
	var body DataPageDropRateSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageDropRateSchemaTotal1 overwrites any union data inside the DataPageDropRateSchema_Total as the provided DataPageDropRateSchemaTotal1
func (t *DataPageDropRateSchema_Total) FromDataPageDropRateSchemaTotal1(v DataPageDropRateSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageDropRateSchemaTotal1 performs a merge with any union data inside the DataPageDropRateSchema_Total, using the provided DataPageDropRateSchemaTotal1
func (t *DataPageDropRateSchema_Total) MergeDataPageDropRateSchemaTotal1(v DataPageDropRateSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageDropRateSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageDropRateSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEffectSchemaPage0 returns the union data inside the DataPageEffectSchema_Page as a DataPageEffectSchemaPage0
func (t DataPageEffectSchema_Page) AsDataPageEffectSchemaPage0() (DataPageEffectSchemaPage0, error) {
	var body DataPageEffectSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaPage0 overwrites any union data inside the DataPageEffectSchema_Page as the provided DataPageEffectSchemaPage0
func (t *DataPageEffectSchema_Page) FromDataPageEffectSchemaPage0(v DataPageEffectSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaPage0 performs a merge with any union data inside the DataPageEffectSchema_Page, using the provided DataPageEffectSchemaPage0
func (t *DataPageEffectSchema_Page) MergeDataPageEffectSchemaPage0(v DataPageEffectSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEffectSchemaPage1 returns the union data inside the DataPageEffectSchema_Page as a DataPageEffectSchemaPage1
func (t DataPageEffectSchema_Page) AsDataPageEffectSchemaPage1() (DataPageEffectSchemaPage1, error) {
	var body DataPageEffectSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaPage1 overwrites any union data inside the DataPageEffectSchema_Page as the provided DataPageEffectSchemaPage1
func (t *DataPageEffectSchema_Page) FromDataPageEffectSchemaPage1(v DataPageEffectSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaPage1 performs a merge with any union data inside the DataPageEffectSchema_Page, using the provided DataPageEffectSchemaPage1
func (t *DataPageEffectSchema_Page) MergeDataPageEffectSchemaPage1(v DataPageEffectSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEffectSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEffectSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEffectSchemaPages0 returns the union data inside the DataPageEffectSchema_Pages as a DataPageEffectSchemaPages0
func (t DataPageEffectSchema_Pages) AsDataPageEffectSchemaPages0() (DataPageEffectSchemaPages0, error) {
	var body DataPageEffectSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaPages0 overwrites any union data inside the DataPageEffectSchema_Pages as the provided DataPageEffectSchemaPages0
func (t *DataPageEffectSchema_Pages) FromDataPageEffectSchemaPages0(v DataPageEffectSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaPages0 performs a merge with any union data inside the DataPageEffectSchema_Pages, using the provided DataPageEffectSchemaPages0
func (t *DataPageEffectSchema_Pages) MergeDataPageEffectSchemaPages0(v DataPageEffectSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEffectSchemaPages1 returns the union data inside the DataPageEffectSchema_Pages as a DataPageEffectSchemaPages1
func (t DataPageEffectSchema_Pages) AsDataPageEffectSchemaPages1() (DataPageEffectSchemaPages1, error) {
	var body DataPageEffectSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaPages1 overwrites any union data inside the DataPageEffectSchema_Pages as the provided DataPageEffectSchemaPages1
func (t *DataPageEffectSchema_Pages) FromDataPageEffectSchemaPages1(v DataPageEffectSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaPages1 performs a merge with any union data inside the DataPageEffectSchema_Pages, using the provided DataPageEffectSchemaPages1
func (t *DataPageEffectSchema_Pages) MergeDataPageEffectSchemaPages1(v DataPageEffectSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEffectSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEffectSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEffectSchemaSize0 returns the union data inside the DataPageEffectSchema_Size as a DataPageEffectSchemaSize0
func (t DataPageEffectSchema_Size) AsDataPageEffectSchemaSize0() (DataPageEffectSchemaSize0, error) {
	var body DataPageEffectSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaSize0 overwrites any union data inside the DataPageEffectSchema_Size as the provided DataPageEffectSchemaSize0
func (t *DataPageEffectSchema_Size) FromDataPageEffectSchemaSize0(v DataPageEffectSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaSize0 performs a merge with any union data inside the DataPageEffectSchema_Size, using the provided DataPageEffectSchemaSize0
func (t *DataPageEffectSchema_Size) MergeDataPageEffectSchemaSize0(v DataPageEffectSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEffectSchemaSize1 returns the union data inside the DataPageEffectSchema_Size as a DataPageEffectSchemaSize1
func (t DataPageEffectSchema_Size) AsDataPageEffectSchemaSize1() (DataPageEffectSchemaSize1, error) {
	var body DataPageEffectSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaSize1 overwrites any union data inside the DataPageEffectSchema_Size as the provided DataPageEffectSchemaSize1
func (t *DataPageEffectSchema_Size) FromDataPageEffectSchemaSize1(v DataPageEffectSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaSize1 performs a merge with any union data inside the DataPageEffectSchema_Size, using the provided DataPageEffectSchemaSize1
func (t *DataPageEffectSchema_Size) MergeDataPageEffectSchemaSize1(v DataPageEffectSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEffectSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEffectSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEffectSchemaTotal0 returns the union data inside the DataPageEffectSchema_Total as a DataPageEffectSchemaTotal0
func (t DataPageEffectSchema_Total) AsDataPageEffectSchemaTotal0() (DataPageEffectSchemaTotal0, error) {
	var body DataPageEffectSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaTotal0 overwrites any union data inside the DataPageEffectSchema_Total as the provided DataPageEffectSchemaTotal0
func (t *DataPageEffectSchema_Total) FromDataPageEffectSchemaTotal0(v DataPageEffectSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaTotal0 performs a merge with any union data inside the DataPageEffectSchema_Total, using the provided DataPageEffectSchemaTotal0
func (t *DataPageEffectSchema_Total) MergeDataPageEffectSchemaTotal0(v DataPageEffectSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEffectSchemaTotal1 returns the union data inside the DataPageEffectSchema_Total as a DataPageEffectSchemaTotal1
func (t DataPageEffectSchema_Total) AsDataPageEffectSchemaTotal1() (DataPageEffectSchemaTotal1, error) {
	var body DataPageEffectSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEffectSchemaTotal1 overwrites any union data inside the DataPageEffectSchema_Total as the provided DataPageEffectSchemaTotal1
func (t *DataPageEffectSchema_Total) FromDataPageEffectSchemaTotal1(v DataPageEffectSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEffectSchemaTotal1 performs a merge with any union data inside the DataPageEffectSchema_Total, using the provided DataPageEffectSchemaTotal1
func (t *DataPageEffectSchema_Total) MergeDataPageEffectSchemaTotal1(v DataPageEffectSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEffectSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEffectSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaPage0 returns the union data inside the DataPageEventSchema_Page as a DataPageEventSchemaPage0
func (t DataPageEventSchema_Page) AsDataPageEventSchemaPage0() (DataPageEventSchemaPage0, error) {
	var body DataPageEventSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPage0 overwrites any union data inside the DataPageEventSchema_Page as the provided DataPageEventSchemaPage0
func (t *DataPageEventSchema_Page) FromDataPageEventSchemaPage0(v DataPageEventSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPage0 performs a merge with any union data inside the DataPageEventSchema_Page, using the provided DataPageEventSchemaPage0
func (t *DataPageEventSchema_Page) MergeDataPageEventSchemaPage0(v DataPageEventSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaPage1 returns the union data inside the DataPageEventSchema_Page as a DataPageEventSchemaPage1
func (t DataPageEventSchema_Page) AsDataPageEventSchemaPage1() (DataPageEventSchemaPage1, error) {
	var body DataPageEventSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPage1 overwrites any union data inside the DataPageEventSchema_Page as the provided DataPageEventSchemaPage1
func (t *DataPageEventSchema_Page) FromDataPageEventSchemaPage1(v DataPageEventSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPage1 performs a merge with any union data inside the DataPageEventSchema_Page, using the provided DataPageEventSchemaPage1
func (t *DataPageEventSchema_Page) MergeDataPageEventSchemaPage1(v DataPageEventSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaPages0 returns the union data inside the DataPageEventSchema_Pages as a DataPageEventSchemaPages0
func (t DataPageEventSchema_Pages) AsDataPageEventSchemaPages0() (DataPageEventSchemaPages0, error) {
	var body DataPageEventSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPages0 overwrites any union data inside the DataPageEventSchema_Pages as the provided DataPageEventSchemaPages0
func (t *DataPageEventSchema_Pages) FromDataPageEventSchemaPages0(v DataPageEventSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPages0 performs a merge with any union data inside the DataPageEventSchema_Pages, using the provided DataPageEventSchemaPages0
func (t *DataPageEventSchema_Pages) MergeDataPageEventSchemaPages0(v DataPageEventSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaPages1 returns the union data inside the DataPageEventSchema_Pages as a DataPageEventSchemaPages1
func (t DataPageEventSchema_Pages) AsDataPageEventSchemaPages1() (DataPageEventSchemaPages1, error) {
	var body DataPageEventSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPages1 overwrites any union data inside the DataPageEventSchema_Pages as the provided DataPageEventSchemaPages1
func (t *DataPageEventSchema_Pages) FromDataPageEventSchemaPages1(v DataPageEventSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPages1 performs a merge with any union data inside the DataPageEventSchema_Pages, using the provided DataPageEventSchemaPages1
func (t *DataPageEventSchema_Pages) MergeDataPageEventSchemaPages1(v DataPageEventSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaSize0 returns the union data inside the DataPageEventSchema_Size as a DataPageEventSchemaSize0
func (t DataPageEventSchema_Size) AsDataPageEventSchemaSize0() (DataPageEventSchemaSize0, error) {
	var body DataPageEventSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaSize0 overwrites any union data inside the DataPageEventSchema_Size as the provided DataPageEventSchemaSize0
func (t *DataPageEventSchema_Size) FromDataPageEventSchemaSize0(v DataPageEventSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaSize0 performs a merge with any union data inside the DataPageEventSchema_Size, using the provided DataPageEventSchemaSize0
func (t *DataPageEventSchema_Size) MergeDataPageEventSchemaSize0(v DataPageEventSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaSize1 returns the union data inside the DataPageEventSchema_Size as a DataPageEventSchemaSize1
func (t DataPageEventSchema_Size) AsDataPageEventSchemaSize1() (DataPageEventSchemaSize1, error) {
	var body DataPageEventSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaSize1 overwrites any union data inside the DataPageEventSchema_Size as the provided DataPageEventSchemaSize1
func (t *DataPageEventSchema_Size) FromDataPageEventSchemaSize1(v DataPageEventSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaSize1 performs a merge with any union data inside the DataPageEventSchema_Size, using the provided DataPageEventSchemaSize1
func (t *DataPageEventSchema_Size) MergeDataPageEventSchemaSize1(v DataPageEventSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaTotal0 returns the union data inside the DataPageEventSchema_Total as a DataPageEventSchemaTotal0
func (t DataPageEventSchema_Total) AsDataPageEventSchemaTotal0() (DataPageEventSchemaTotal0, error) {
	var body DataPageEventSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaTotal0 overwrites any union data inside the DataPageEventSchema_Total as the provided DataPageEventSchemaTotal0
func (t *DataPageEventSchema_Total) FromDataPageEventSchemaTotal0(v DataPageEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaTotal0 performs a merge with any union data inside the DataPageEventSchema_Total, using the provided DataPageEventSchemaTotal0
func (t *DataPageEventSchema_Total) MergeDataPageEventSchemaTotal0(v DataPageEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaTotal1 returns the union data inside the DataPageEventSchema_Total as a DataPageEventSchemaTotal1
func (t DataPageEventSchema_Total) AsDataPageEventSchemaTotal1() (DataPageEventSchemaTotal1, error) {
	var body DataPageEventSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaTotal1 overwrites any union data inside the DataPageEventSchema_Total as the provided DataPageEventSchemaTotal1
func (t *DataPageEventSchema_Total) FromDataPageEventSchemaTotal1(v DataPageEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaTotal1 performs a merge with any union data inside the DataPageEventSchema_Total, using the provided DataPageEventSchemaTotal1
func (t *DataPageEventSchema_Total) MergeDataPageEventSchemaTotal1(v DataPageEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEOrderSchemaPage0 returns the union data inside the DataPageGEOrderSchema_Page as a DataPageGEOrderSchemaPage0
func (t DataPageGEOrderSchema_Page) AsDataPageGEOrderSchemaPage0() (DataPageGEOrderSchemaPage0, error) {
	var body DataPageGEOrderSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaPage0 overwrites any union data inside the DataPageGEOrderSchema_Page as the provided DataPageGEOrderSchemaPage0
func (t *DataPageGEOrderSchema_Page) FromDataPageGEOrderSchemaPage0(v DataPageGEOrderSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaPage0 performs a merge with any union data inside the DataPageGEOrderSchema_Page, using the provided DataPageGEOrderSchemaPage0
func (t *DataPageGEOrderSchema_Page) MergeDataPageGEOrderSchemaPage0(v DataPageGEOrderSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEOrderSchemaPage1 returns the union data inside the DataPageGEOrderSchema_Page as a DataPageGEOrderSchemaPage1
func (t DataPageGEOrderSchema_Page) AsDataPageGEOrderSchemaPage1() (DataPageGEOrderSchemaPage1, error) {
	var body DataPageGEOrderSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaPage1 overwrites any union data inside the DataPageGEOrderSchema_Page as the provided DataPageGEOrderSchemaPage1
func (t *DataPageGEOrderSchema_Page) FromDataPageGEOrderSchemaPage1(v DataPageGEOrderSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaPage1 performs a merge with any union data inside the DataPageGEOrderSchema_Page, using the provided DataPageGEOrderSchemaPage1
func (t *DataPageGEOrderSchema_Page) MergeDataPageGEOrderSchemaPage1(v DataPageGEOrderSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEOrderSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEOrderSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEOrderSchemaPages0 returns the union data inside the DataPageGEOrderSchema_Pages as a DataPageGEOrderSchemaPages0
func (t DataPageGEOrderSchema_Pages) AsDataPageGEOrderSchemaPages0() (DataPageGEOrderSchemaPages0, error) {
	var body DataPageGEOrderSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaPages0 overwrites any union data inside the DataPageGEOrderSchema_Pages as the provided DataPageGEOrderSchemaPages0
func (t *DataPageGEOrderSchema_Pages) FromDataPageGEOrderSchemaPages0(v DataPageGEOrderSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaPages0 performs a merge with any union data inside the DataPageGEOrderSchema_Pages, using the provided DataPageGEOrderSchemaPages0
func (t *DataPageGEOrderSchema_Pages) MergeDataPageGEOrderSchemaPages0(v DataPageGEOrderSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEOrderSchemaPages1 returns the union data inside the DataPageGEOrderSchema_Pages as a DataPageGEOrderSchemaPages1
func (t DataPageGEOrderSchema_Pages) AsDataPageGEOrderSchemaPages1() (DataPageGEOrderSchemaPages1, error) {
	var body DataPageGEOrderSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaPages1 overwrites any union data inside the DataPageGEOrderSchema_Pages as the provided DataPageGEOrderSchemaPages1
func (t *DataPageGEOrderSchema_Pages) FromDataPageGEOrderSchemaPages1(v DataPageGEOrderSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaPages1 performs a merge with any union data inside the DataPageGEOrderSchema_Pages, using the provided DataPageGEOrderSchemaPages1
func (t *DataPageGEOrderSchema_Pages) MergeDataPageGEOrderSchemaPages1(v DataPageGEOrderSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEOrderSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEOrderSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEOrderSchemaSize0 returns the union data inside the DataPageGEOrderSchema_Size as a DataPageGEOrderSchemaSize0
func (t DataPageGEOrderSchema_Size) AsDataPageGEOrderSchemaSize0() (DataPageGEOrderSchemaSize0, error) {
	var body DataPageGEOrderSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaSize0 overwrites any union data inside the DataPageGEOrderSchema_Size as the provided DataPageGEOrderSchemaSize0
func (t *DataPageGEOrderSchema_Size) FromDataPageGEOrderSchemaSize0(v DataPageGEOrderSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaSize0 performs a merge with any union data inside the DataPageGEOrderSchema_Size, using the provided DataPageGEOrderSchemaSize0
func (t *DataPageGEOrderSchema_Size) MergeDataPageGEOrderSchemaSize0(v DataPageGEOrderSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEOrderSchemaSize1 returns the union data inside the DataPageGEOrderSchema_Size as a DataPageGEOrderSchemaSize1
func (t DataPageGEOrderSchema_Size) AsDataPageGEOrderSchemaSize1() (DataPageGEOrderSchemaSize1, error) {
	var body DataPageGEOrderSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaSize1 overwrites any union data inside the DataPageGEOrderSchema_Size as the provided DataPageGEOrderSchemaSize1
func (t *DataPageGEOrderSchema_Size) FromDataPageGEOrderSchemaSize1(v DataPageGEOrderSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaSize1 performs a merge with any union data inside the DataPageGEOrderSchema_Size, using the provided DataPageGEOrderSchemaSize1
func (t *DataPageGEOrderSchema_Size) MergeDataPageGEOrderSchemaSize1(v DataPageGEOrderSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEOrderSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEOrderSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEOrderSchemaTotal0 returns the union data inside the DataPageGEOrderSchema_Total as a DataPageGEOrderSchemaTotal0
func (t DataPageGEOrderSchema_Total) AsDataPageGEOrderSchemaTotal0() (DataPageGEOrderSchemaTotal0, error) {
	var body DataPageGEOrderSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaTotal0 overwrites any union data inside the DataPageGEOrderSchema_Total as the provided DataPageGEOrderSchemaTotal0
func (t *DataPageGEOrderSchema_Total) FromDataPageGEOrderSchemaTotal0(v DataPageGEOrderSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaTotal0 performs a merge with any union data inside the DataPageGEOrderSchema_Total, using the provided DataPageGEOrderSchemaTotal0
func (t *DataPageGEOrderSchema_Total) MergeDataPageGEOrderSchemaTotal0(v DataPageGEOrderSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEOrderSchemaTotal1 returns the union data inside the DataPageGEOrderSchema_Total as a DataPageGEOrderSchemaTotal1
func (t DataPageGEOrderSchema_Total) AsDataPageGEOrderSchemaTotal1() (DataPageGEOrderSchemaTotal1, error) {
	var body DataPageGEOrderSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEOrderSchemaTotal1 overwrites any union data inside the DataPageGEOrderSchema_Total as the provided DataPageGEOrderSchemaTotal1
func (t *DataPageGEOrderSchema_Total) FromDataPageGEOrderSchemaTotal1(v DataPageGEOrderSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEOrderSchemaTotal1 performs a merge with any union data inside the DataPageGEOrderSchema_Total, using the provided DataPageGEOrderSchemaTotal1
func (t *DataPageGEOrderSchema_Total) MergeDataPageGEOrderSchemaTotal1(v DataPageGEOrderSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEOrderSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEOrderSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGeOrderHistorySchemaPage0 returns the union data inside the DataPageGeOrderHistorySchema_Page as a DataPageGeOrderHistorySchemaPage0
func (t DataPageGeOrderHistorySchema_Page) AsDataPageGeOrderHistorySchemaPage0() (DataPageGeOrderHistorySchemaPage0, error) {
	var body DataPageGeOrderHistorySchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaPage0 overwrites any union data inside the DataPageGeOrderHistorySchema_Page as the provided DataPageGeOrderHistorySchemaPage0
func (t *DataPageGeOrderHistorySchema_Page) FromDataPageGeOrderHistorySchemaPage0(v DataPageGeOrderHistorySchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaPage0 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Page, using the provided DataPageGeOrderHistorySchemaPage0
func (t *DataPageGeOrderHistorySchema_Page) MergeDataPageGeOrderHistorySchemaPage0(v DataPageGeOrderHistorySchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGeOrderHistorySchemaPage1 returns the union data inside the DataPageGeOrderHistorySchema_Page as a DataPageGeOrderHistorySchemaPage1
func (t DataPageGeOrderHistorySchema_Page) AsDataPageGeOrderHistorySchemaPage1() (DataPageGeOrderHistorySchemaPage1, error) {
	var body DataPageGeOrderHistorySchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaPage1 overwrites any union data inside the DataPageGeOrderHistorySchema_Page as the provided DataPageGeOrderHistorySchemaPage1
func (t *DataPageGeOrderHistorySchema_Page) FromDataPageGeOrderHistorySchemaPage1(v DataPageGeOrderHistorySchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaPage1 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Page, using the provided DataPageGeOrderHistorySchemaPage1
func (t *DataPageGeOrderHistorySchema_Page) MergeDataPageGeOrderHistorySchemaPage1(v DataPageGeOrderHistorySchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGeOrderHistorySchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGeOrderHistorySchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGeOrderHistorySchemaPages0 returns the union data inside the DataPageGeOrderHistorySchema_Pages as a DataPageGeOrderHistorySchemaPages0
func (t DataPageGeOrderHistorySchema_Pages) AsDataPageGeOrderHistorySchemaPages0() (DataPageGeOrderHistorySchemaPages0, error) {
	var body DataPageGeOrderHistorySchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaPages0 overwrites any union data inside the DataPageGeOrderHistorySchema_Pages as the provided DataPageGeOrderHistorySchemaPages0
func (t *DataPageGeOrderHistorySchema_Pages) FromDataPageGeOrderHistorySchemaPages0(v DataPageGeOrderHistorySchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaPages0 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Pages, using the provided DataPageGeOrderHistorySchemaPages0
func (t *DataPageGeOrderHistorySchema_Pages) MergeDataPageGeOrderHistorySchemaPages0(v DataPageGeOrderHistorySchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGeOrderHistorySchemaPages1 returns the union data inside the DataPageGeOrderHistorySchema_Pages as a DataPageGeOrderHistorySchemaPages1
func (t DataPageGeOrderHistorySchema_Pages) AsDataPageGeOrderHistorySchemaPages1() (DataPageGeOrderHistorySchemaPages1, error) {
	var body DataPageGeOrderHistorySchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaPages1 overwrites any union data inside the DataPageGeOrderHistorySchema_Pages as the provided DataPageGeOrderHistorySchemaPages1
func (t *DataPageGeOrderHistorySchema_Pages) FromDataPageGeOrderHistorySchemaPages1(v DataPageGeOrderHistorySchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaPages1 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Pages, using the provided DataPageGeOrderHistorySchemaPages1
func (t *DataPageGeOrderHistorySchema_Pages) MergeDataPageGeOrderHistorySchemaPages1(v DataPageGeOrderHistorySchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGeOrderHistorySchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGeOrderHistorySchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGeOrderHistorySchemaSize0 returns the union data inside the DataPageGeOrderHistorySchema_Size as a DataPageGeOrderHistorySchemaSize0
func (t DataPageGeOrderHistorySchema_Size) AsDataPageGeOrderHistorySchemaSize0() (DataPageGeOrderHistorySchemaSize0, error) {
	var body DataPageGeOrderHistorySchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaSize0 overwrites any union data inside the DataPageGeOrderHistorySchema_Size as the provided DataPageGeOrderHistorySchemaSize0
func (t *DataPageGeOrderHistorySchema_Size) FromDataPageGeOrderHistorySchemaSize0(v DataPageGeOrderHistorySchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaSize0 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Size, using the provided DataPageGeOrderHistorySchemaSize0
func (t *DataPageGeOrderHistorySchema_Size) MergeDataPageGeOrderHistorySchemaSize0(v DataPageGeOrderHistorySchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGeOrderHistorySchemaSize1 returns the union data inside the DataPageGeOrderHistorySchema_Size as a DataPageGeOrderHistorySchemaSize1
func (t DataPageGeOrderHistorySchema_Size) AsDataPageGeOrderHistorySchemaSize1() (DataPageGeOrderHistorySchemaSize1, error) {
	var body DataPageGeOrderHistorySchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaSize1 overwrites any union data inside the DataPageGeOrderHistorySchema_Size as the provided DataPageGeOrderHistorySchemaSize1
func (t *DataPageGeOrderHistorySchema_Size) FromDataPageGeOrderHistorySchemaSize1(v DataPageGeOrderHistorySchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaSize1 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Size, using the provided DataPageGeOrderHistorySchemaSize1
func (t *DataPageGeOrderHistorySchema_Size) MergeDataPageGeOrderHistorySchemaSize1(v DataPageGeOrderHistorySchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGeOrderHistorySchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGeOrderHistorySchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGeOrderHistorySchemaTotal0 returns the union data inside the DataPageGeOrderHistorySchema_Total as a DataPageGeOrderHistorySchemaTotal0
func (t DataPageGeOrderHistorySchema_Total) AsDataPageGeOrderHistorySchemaTotal0() (DataPageGeOrderHistorySchemaTotal0, error) {
	var body DataPageGeOrderHistorySchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaTotal0 overwrites any union data inside the DataPageGeOrderHistorySchema_Total as the provided DataPageGeOrderHistorySchemaTotal0
func (t *DataPageGeOrderHistorySchema_Total) FromDataPageGeOrderHistorySchemaTotal0(v DataPageGeOrderHistorySchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaTotal0 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Total, using the provided DataPageGeOrderHistorySchemaTotal0
func (t *DataPageGeOrderHistorySchema_Total) MergeDataPageGeOrderHistorySchemaTotal0(v DataPageGeOrderHistorySchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGeOrderHistorySchemaTotal1 returns the union data inside the DataPageGeOrderHistorySchema_Total as a DataPageGeOrderHistorySchemaTotal1
func (t DataPageGeOrderHistorySchema_Total) AsDataPageGeOrderHistorySchemaTotal1() (DataPageGeOrderHistorySchemaTotal1, error) {
	var body DataPageGeOrderHistorySchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGeOrderHistorySchemaTotal1 overwrites any union data inside the DataPageGeOrderHistorySchema_Total as the provided DataPageGeOrderHistorySchemaTotal1
func (t *DataPageGeOrderHistorySchema_Total) FromDataPageGeOrderHistorySchemaTotal1(v DataPageGeOrderHistorySchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGeOrderHistorySchemaTotal1 performs a merge with any union data inside the DataPageGeOrderHistorySchema_Total, using the provided DataPageGeOrderHistorySchemaTotal1
func (t *DataPageGeOrderHistorySchema_Total) MergeDataPageGeOrderHistorySchemaTotal1(v DataPageGeOrderHistorySchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGeOrderHistorySchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGeOrderHistorySchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaPage0 returns the union data inside the DataPageItemSchema_Page as a DataPageItemSchemaPage0
func (t DataPageItemSchema_Page) AsDataPageItemSchemaPage0() (DataPageItemSchemaPage0, error) {
	var body DataPageItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPage0 overwrites any union data inside the DataPageItemSchema_Page as the provided DataPageItemSchemaPage0
func (t *DataPageItemSchema_Page) FromDataPageItemSchemaPage0(v DataPageItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPage0 performs a merge with any union data inside the DataPageItemSchema_Page, using the provided DataPageItemSchemaPage0
func (t *DataPageItemSchema_Page) MergeDataPageItemSchemaPage0(v DataPageItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaPage1 returns the union data inside the DataPageItemSchema_Page as a DataPageItemSchemaPage1
func (t DataPageItemSchema_Page) AsDataPageItemSchemaPage1() (DataPageItemSchemaPage1, error) {
	var body DataPageItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPage1 overwrites any union data inside the DataPageItemSchema_Page as the provided DataPageItemSchemaPage1
func (t *DataPageItemSchema_Page) FromDataPageItemSchemaPage1(v DataPageItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPage1 performs a merge with any union data inside the DataPageItemSchema_Page, using the provided DataPageItemSchemaPage1
func (t *DataPageItemSchema_Page) MergeDataPageItemSchemaPage1(v DataPageItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaPages0 returns the union data inside the DataPageItemSchema_Pages as a DataPageItemSchemaPages0
func (t DataPageItemSchema_Pages) AsDataPageItemSchemaPages0() (DataPageItemSchemaPages0, error) {
	var body DataPageItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPages0 overwrites any union data inside the DataPageItemSchema_Pages as the provided DataPageItemSchemaPages0
func (t *DataPageItemSchema_Pages) FromDataPageItemSchemaPages0(v DataPageItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPages0 performs a merge with any union data inside the DataPageItemSchema_Pages, using the provided DataPageItemSchemaPages0
func (t *DataPageItemSchema_Pages) MergeDataPageItemSchemaPages0(v DataPageItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaPages1 returns the union data inside the DataPageItemSchema_Pages as a DataPageItemSchemaPages1
func (t DataPageItemSchema_Pages) AsDataPageItemSchemaPages1() (DataPageItemSchemaPages1, error) {
	var body DataPageItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPages1 overwrites any union data inside the DataPageItemSchema_Pages as the provided DataPageItemSchemaPages1
func (t *DataPageItemSchema_Pages) FromDataPageItemSchemaPages1(v DataPageItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPages1 performs a merge with any union data inside the DataPageItemSchema_Pages, using the provided DataPageItemSchemaPages1
func (t *DataPageItemSchema_Pages) MergeDataPageItemSchemaPages1(v DataPageItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaSize0 returns the union data inside the DataPageItemSchema_Size as a DataPageItemSchemaSize0
func (t DataPageItemSchema_Size) AsDataPageItemSchemaSize0() (DataPageItemSchemaSize0, error) {
	var body DataPageItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaSize0 overwrites any union data inside the DataPageItemSchema_Size as the provided DataPageItemSchemaSize0
func (t *DataPageItemSchema_Size) FromDataPageItemSchemaSize0(v DataPageItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaSize0 performs a merge with any union data inside the DataPageItemSchema_Size, using the provided DataPageItemSchemaSize0
func (t *DataPageItemSchema_Size) MergeDataPageItemSchemaSize0(v DataPageItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaSize1 returns the union data inside the DataPageItemSchema_Size as a DataPageItemSchemaSize1
func (t DataPageItemSchema_Size) AsDataPageItemSchemaSize1() (DataPageItemSchemaSize1, error) {
	var body DataPageItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaSize1 overwrites any union data inside the DataPageItemSchema_Size as the provided DataPageItemSchemaSize1
func (t *DataPageItemSchema_Size) FromDataPageItemSchemaSize1(v DataPageItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaSize1 performs a merge with any union data inside the DataPageItemSchema_Size, using the provided DataPageItemSchemaSize1
func (t *DataPageItemSchema_Size) MergeDataPageItemSchemaSize1(v DataPageItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaTotal0 returns the union data inside the DataPageItemSchema_Total as a DataPageItemSchemaTotal0
func (t DataPageItemSchema_Total) AsDataPageItemSchemaTotal0() (DataPageItemSchemaTotal0, error) {
	var body DataPageItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaTotal0 overwrites any union data inside the DataPageItemSchema_Total as the provided DataPageItemSchemaTotal0
func (t *DataPageItemSchema_Total) FromDataPageItemSchemaTotal0(v DataPageItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaTotal0 performs a merge with any union data inside the DataPageItemSchema_Total, using the provided DataPageItemSchemaTotal0
func (t *DataPageItemSchema_Total) MergeDataPageItemSchemaTotal0(v DataPageItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaTotal1 returns the union data inside the DataPageItemSchema_Total as a DataPageItemSchemaTotal1
func (t DataPageItemSchema_Total) AsDataPageItemSchemaTotal1() (DataPageItemSchemaTotal1, error) {
	var body DataPageItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaTotal1 overwrites any union data inside the DataPageItemSchema_Total as the provided DataPageItemSchemaTotal1
func (t *DataPageItemSchema_Total) FromDataPageItemSchemaTotal1(v DataPageItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaTotal1 performs a merge with any union data inside the DataPageItemSchema_Total, using the provided DataPageItemSchemaTotal1
func (t *DataPageItemSchema_Total) MergeDataPageItemSchemaTotal1(v DataPageItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaPage0 returns the union data inside the DataPageLogSchema_Page as a DataPageLogSchemaPage0
func (t DataPageLogSchema_Page) AsDataPageLogSchemaPage0() (DataPageLogSchemaPage0, error) {
	var body DataPageLogSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPage0 overwrites any union data inside the DataPageLogSchema_Page as the provided DataPageLogSchemaPage0
func (t *DataPageLogSchema_Page) FromDataPageLogSchemaPage0(v DataPageLogSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPage0 performs a merge with any union data inside the DataPageLogSchema_Page, using the provided DataPageLogSchemaPage0
func (t *DataPageLogSchema_Page) MergeDataPageLogSchemaPage0(v DataPageLogSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaPage1 returns the union data inside the DataPageLogSchema_Page as a DataPageLogSchemaPage1
func (t DataPageLogSchema_Page) AsDataPageLogSchemaPage1() (DataPageLogSchemaPage1, error) {
	var body DataPageLogSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPage1 overwrites any union data inside the DataPageLogSchema_Page as the provided DataPageLogSchemaPage1
func (t *DataPageLogSchema_Page) FromDataPageLogSchemaPage1(v DataPageLogSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPage1 performs a merge with any union data inside the DataPageLogSchema_Page, using the provided DataPageLogSchemaPage1
func (t *DataPageLogSchema_Page) MergeDataPageLogSchemaPage1(v DataPageLogSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaPages0 returns the union data inside the DataPageLogSchema_Pages as a DataPageLogSchemaPages0
func (t DataPageLogSchema_Pages) AsDataPageLogSchemaPages0() (DataPageLogSchemaPages0, error) {
	var body DataPageLogSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPages0 overwrites any union data inside the DataPageLogSchema_Pages as the provided DataPageLogSchemaPages0
func (t *DataPageLogSchema_Pages) FromDataPageLogSchemaPages0(v DataPageLogSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPages0 performs a merge with any union data inside the DataPageLogSchema_Pages, using the provided DataPageLogSchemaPages0
func (t *DataPageLogSchema_Pages) MergeDataPageLogSchemaPages0(v DataPageLogSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaPages1 returns the union data inside the DataPageLogSchema_Pages as a DataPageLogSchemaPages1
func (t DataPageLogSchema_Pages) AsDataPageLogSchemaPages1() (DataPageLogSchemaPages1, error) {
	var body DataPageLogSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPages1 overwrites any union data inside the DataPageLogSchema_Pages as the provided DataPageLogSchemaPages1
func (t *DataPageLogSchema_Pages) FromDataPageLogSchemaPages1(v DataPageLogSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPages1 performs a merge with any union data inside the DataPageLogSchema_Pages, using the provided DataPageLogSchemaPages1
func (t *DataPageLogSchema_Pages) MergeDataPageLogSchemaPages1(v DataPageLogSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaSize0 returns the union data inside the DataPageLogSchema_Size as a DataPageLogSchemaSize0
func (t DataPageLogSchema_Size) AsDataPageLogSchemaSize0() (DataPageLogSchemaSize0, error) {
	var body DataPageLogSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaSize0 overwrites any union data inside the DataPageLogSchema_Size as the provided DataPageLogSchemaSize0
func (t *DataPageLogSchema_Size) FromDataPageLogSchemaSize0(v DataPageLogSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaSize0 performs a merge with any union data inside the DataPageLogSchema_Size, using the provided DataPageLogSchemaSize0
func (t *DataPageLogSchema_Size) MergeDataPageLogSchemaSize0(v DataPageLogSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaSize1 returns the union data inside the DataPageLogSchema_Size as a DataPageLogSchemaSize1
func (t DataPageLogSchema_Size) AsDataPageLogSchemaSize1() (DataPageLogSchemaSize1, error) {
	var body DataPageLogSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaSize1 overwrites any union data inside the DataPageLogSchema_Size as the provided DataPageLogSchemaSize1
func (t *DataPageLogSchema_Size) FromDataPageLogSchemaSize1(v DataPageLogSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaSize1 performs a merge with any union data inside the DataPageLogSchema_Size, using the provided DataPageLogSchemaSize1
func (t *DataPageLogSchema_Size) MergeDataPageLogSchemaSize1(v DataPageLogSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaTotal0 returns the union data inside the DataPageLogSchema_Total as a DataPageLogSchemaTotal0
func (t DataPageLogSchema_Total) AsDataPageLogSchemaTotal0() (DataPageLogSchemaTotal0, error) {
	var body DataPageLogSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaTotal0 overwrites any union data inside the DataPageLogSchema_Total as the provided DataPageLogSchemaTotal0
func (t *DataPageLogSchema_Total) FromDataPageLogSchemaTotal0(v DataPageLogSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaTotal0 performs a merge with any union data inside the DataPageLogSchema_Total, using the provided DataPageLogSchemaTotal0
func (t *DataPageLogSchema_Total) MergeDataPageLogSchemaTotal0(v DataPageLogSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaTotal1 returns the union data inside the DataPageLogSchema_Total as a DataPageLogSchemaTotal1
func (t DataPageLogSchema_Total) AsDataPageLogSchemaTotal1() (DataPageLogSchemaTotal1, error) {
	var body DataPageLogSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaTotal1 overwrites any union data inside the DataPageLogSchema_Total as the provided DataPageLogSchemaTotal1
func (t *DataPageLogSchema_Total) FromDataPageLogSchemaTotal1(v DataPageLogSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaTotal1 performs a merge with any union data inside the DataPageLogSchema_Total, using the provided DataPageLogSchemaTotal1
func (t *DataPageLogSchema_Total) MergeDataPageLogSchemaTotal1(v DataPageLogSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaPage0 returns the union data inside the DataPageMapSchema_Page as a DataPageMapSchemaPage0
func (t DataPageMapSchema_Page) AsDataPageMapSchemaPage0() (DataPageMapSchemaPage0, error) {
	var body DataPageMapSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPage0 overwrites any union data inside the DataPageMapSchema_Page as the provided DataPageMapSchemaPage0
func (t *DataPageMapSchema_Page) FromDataPageMapSchemaPage0(v DataPageMapSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPage0 performs a merge with any union data inside the DataPageMapSchema_Page, using the provided DataPageMapSchemaPage0
func (t *DataPageMapSchema_Page) MergeDataPageMapSchemaPage0(v DataPageMapSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaPage1 returns the union data inside the DataPageMapSchema_Page as a DataPageMapSchemaPage1
func (t DataPageMapSchema_Page) AsDataPageMapSchemaPage1() (DataPageMapSchemaPage1, error) {
	var body DataPageMapSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPage1 overwrites any union data inside the DataPageMapSchema_Page as the provided DataPageMapSchemaPage1
func (t *DataPageMapSchema_Page) FromDataPageMapSchemaPage1(v DataPageMapSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPage1 performs a merge with any union data inside the DataPageMapSchema_Page, using the provided DataPageMapSchemaPage1
func (t *DataPageMapSchema_Page) MergeDataPageMapSchemaPage1(v DataPageMapSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaPages0 returns the union data inside the DataPageMapSchema_Pages as a DataPageMapSchemaPages0
func (t DataPageMapSchema_Pages) AsDataPageMapSchemaPages0() (DataPageMapSchemaPages0, error) {
	var body DataPageMapSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPages0 overwrites any union data inside the DataPageMapSchema_Pages as the provided DataPageMapSchemaPages0
func (t *DataPageMapSchema_Pages) FromDataPageMapSchemaPages0(v DataPageMapSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPages0 performs a merge with any union data inside the DataPageMapSchema_Pages, using the provided DataPageMapSchemaPages0
func (t *DataPageMapSchema_Pages) MergeDataPageMapSchemaPages0(v DataPageMapSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaPages1 returns the union data inside the DataPageMapSchema_Pages as a DataPageMapSchemaPages1
func (t DataPageMapSchema_Pages) AsDataPageMapSchemaPages1() (DataPageMapSchemaPages1, error) {
	var body DataPageMapSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPages1 overwrites any union data inside the DataPageMapSchema_Pages as the provided DataPageMapSchemaPages1
func (t *DataPageMapSchema_Pages) FromDataPageMapSchemaPages1(v DataPageMapSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPages1 performs a merge with any union data inside the DataPageMapSchema_Pages, using the provided DataPageMapSchemaPages1
func (t *DataPageMapSchema_Pages) MergeDataPageMapSchemaPages1(v DataPageMapSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaSize0 returns the union data inside the DataPageMapSchema_Size as a DataPageMapSchemaSize0
func (t DataPageMapSchema_Size) AsDataPageMapSchemaSize0() (DataPageMapSchemaSize0, error) {
	var body DataPageMapSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaSize0 overwrites any union data inside the DataPageMapSchema_Size as the provided DataPageMapSchemaSize0
func (t *DataPageMapSchema_Size) FromDataPageMapSchemaSize0(v DataPageMapSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaSize0 performs a merge with any union data inside the DataPageMapSchema_Size, using the provided DataPageMapSchemaSize0
func (t *DataPageMapSchema_Size) MergeDataPageMapSchemaSize0(v DataPageMapSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaSize1 returns the union data inside the DataPageMapSchema_Size as a DataPageMapSchemaSize1
func (t DataPageMapSchema_Size) AsDataPageMapSchemaSize1() (DataPageMapSchemaSize1, error) {
	var body DataPageMapSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaSize1 overwrites any union data inside the DataPageMapSchema_Size as the provided DataPageMapSchemaSize1
func (t *DataPageMapSchema_Size) FromDataPageMapSchemaSize1(v DataPageMapSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaSize1 performs a merge with any union data inside the DataPageMapSchema_Size, using the provided DataPageMapSchemaSize1
func (t *DataPageMapSchema_Size) MergeDataPageMapSchemaSize1(v DataPageMapSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaTotal0 returns the union data inside the DataPageMapSchema_Total as a DataPageMapSchemaTotal0
func (t DataPageMapSchema_Total) AsDataPageMapSchemaTotal0() (DataPageMapSchemaTotal0, error) {
	var body DataPageMapSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaTotal0 overwrites any union data inside the DataPageMapSchema_Total as the provided DataPageMapSchemaTotal0
func (t *DataPageMapSchema_Total) FromDataPageMapSchemaTotal0(v DataPageMapSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaTotal0 performs a merge with any union data inside the DataPageMapSchema_Total, using the provided DataPageMapSchemaTotal0
func (t *DataPageMapSchema_Total) MergeDataPageMapSchemaTotal0(v DataPageMapSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaTotal1 returns the union data inside the DataPageMapSchema_Total as a DataPageMapSchemaTotal1
func (t DataPageMapSchema_Total) AsDataPageMapSchemaTotal1() (DataPageMapSchemaTotal1, error) {
	var body DataPageMapSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaTotal1 overwrites any union data inside the DataPageMapSchema_Total as the provided DataPageMapSchemaTotal1
func (t *DataPageMapSchema_Total) FromDataPageMapSchemaTotal1(v DataPageMapSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaTotal1 performs a merge with any union data inside the DataPageMapSchema_Total, using the provided DataPageMapSchemaTotal1
func (t *DataPageMapSchema_Total) MergeDataPageMapSchemaTotal1(v DataPageMapSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaPage0 returns the union data inside the DataPageMonsterSchema_Page as a DataPageMonsterSchemaPage0
func (t DataPageMonsterSchema_Page) AsDataPageMonsterSchemaPage0() (DataPageMonsterSchemaPage0, error) {
	var body DataPageMonsterSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPage0 overwrites any union data inside the DataPageMonsterSchema_Page as the provided DataPageMonsterSchemaPage0
func (t *DataPageMonsterSchema_Page) FromDataPageMonsterSchemaPage0(v DataPageMonsterSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPage0 performs a merge with any union data inside the DataPageMonsterSchema_Page, using the provided DataPageMonsterSchemaPage0
func (t *DataPageMonsterSchema_Page) MergeDataPageMonsterSchemaPage0(v DataPageMonsterSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaPage1 returns the union data inside the DataPageMonsterSchema_Page as a DataPageMonsterSchemaPage1
func (t DataPageMonsterSchema_Page) AsDataPageMonsterSchemaPage1() (DataPageMonsterSchemaPage1, error) {
	var body DataPageMonsterSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPage1 overwrites any union data inside the DataPageMonsterSchema_Page as the provided DataPageMonsterSchemaPage1
func (t *DataPageMonsterSchema_Page) FromDataPageMonsterSchemaPage1(v DataPageMonsterSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPage1 performs a merge with any union data inside the DataPageMonsterSchema_Page, using the provided DataPageMonsterSchemaPage1
func (t *DataPageMonsterSchema_Page) MergeDataPageMonsterSchemaPage1(v DataPageMonsterSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaPages0 returns the union data inside the DataPageMonsterSchema_Pages as a DataPageMonsterSchemaPages0
func (t DataPageMonsterSchema_Pages) AsDataPageMonsterSchemaPages0() (DataPageMonsterSchemaPages0, error) {
	var body DataPageMonsterSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPages0 overwrites any union data inside the DataPageMonsterSchema_Pages as the provided DataPageMonsterSchemaPages0
func (t *DataPageMonsterSchema_Pages) FromDataPageMonsterSchemaPages0(v DataPageMonsterSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPages0 performs a merge with any union data inside the DataPageMonsterSchema_Pages, using the provided DataPageMonsterSchemaPages0
func (t *DataPageMonsterSchema_Pages) MergeDataPageMonsterSchemaPages0(v DataPageMonsterSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaPages1 returns the union data inside the DataPageMonsterSchema_Pages as a DataPageMonsterSchemaPages1
func (t DataPageMonsterSchema_Pages) AsDataPageMonsterSchemaPages1() (DataPageMonsterSchemaPages1, error) {
	var body DataPageMonsterSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPages1 overwrites any union data inside the DataPageMonsterSchema_Pages as the provided DataPageMonsterSchemaPages1
func (t *DataPageMonsterSchema_Pages) FromDataPageMonsterSchemaPages1(v DataPageMonsterSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPages1 performs a merge with any union data inside the DataPageMonsterSchema_Pages, using the provided DataPageMonsterSchemaPages1
func (t *DataPageMonsterSchema_Pages) MergeDataPageMonsterSchemaPages1(v DataPageMonsterSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaSize0 returns the union data inside the DataPageMonsterSchema_Size as a DataPageMonsterSchemaSize0
func (t DataPageMonsterSchema_Size) AsDataPageMonsterSchemaSize0() (DataPageMonsterSchemaSize0, error) {
	var body DataPageMonsterSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaSize0 overwrites any union data inside the DataPageMonsterSchema_Size as the provided DataPageMonsterSchemaSize0
func (t *DataPageMonsterSchema_Size) FromDataPageMonsterSchemaSize0(v DataPageMonsterSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaSize0 performs a merge with any union data inside the DataPageMonsterSchema_Size, using the provided DataPageMonsterSchemaSize0
func (t *DataPageMonsterSchema_Size) MergeDataPageMonsterSchemaSize0(v DataPageMonsterSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaSize1 returns the union data inside the DataPageMonsterSchema_Size as a DataPageMonsterSchemaSize1
func (t DataPageMonsterSchema_Size) AsDataPageMonsterSchemaSize1() (DataPageMonsterSchemaSize1, error) {
	var body DataPageMonsterSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaSize1 overwrites any union data inside the DataPageMonsterSchema_Size as the provided DataPageMonsterSchemaSize1
func (t *DataPageMonsterSchema_Size) FromDataPageMonsterSchemaSize1(v DataPageMonsterSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaSize1 performs a merge with any union data inside the DataPageMonsterSchema_Size, using the provided DataPageMonsterSchemaSize1
func (t *DataPageMonsterSchema_Size) MergeDataPageMonsterSchemaSize1(v DataPageMonsterSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaTotal0 returns the union data inside the DataPageMonsterSchema_Total as a DataPageMonsterSchemaTotal0
func (t DataPageMonsterSchema_Total) AsDataPageMonsterSchemaTotal0() (DataPageMonsterSchemaTotal0, error) {
	var body DataPageMonsterSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaTotal0 overwrites any union data inside the DataPageMonsterSchema_Total as the provided DataPageMonsterSchemaTotal0
func (t *DataPageMonsterSchema_Total) FromDataPageMonsterSchemaTotal0(v DataPageMonsterSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaTotal0 performs a merge with any union data inside the DataPageMonsterSchema_Total, using the provided DataPageMonsterSchemaTotal0
func (t *DataPageMonsterSchema_Total) MergeDataPageMonsterSchemaTotal0(v DataPageMonsterSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaTotal1 returns the union data inside the DataPageMonsterSchema_Total as a DataPageMonsterSchemaTotal1
func (t DataPageMonsterSchema_Total) AsDataPageMonsterSchemaTotal1() (DataPageMonsterSchemaTotal1, error) {
	var body DataPageMonsterSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaTotal1 overwrites any union data inside the DataPageMonsterSchema_Total as the provided DataPageMonsterSchemaTotal1
func (t *DataPageMonsterSchema_Total) FromDataPageMonsterSchemaTotal1(v DataPageMonsterSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaTotal1 performs a merge with any union data inside the DataPageMonsterSchema_Total, using the provided DataPageMonsterSchemaTotal1
func (t *DataPageMonsterSchema_Total) MergeDataPageMonsterSchemaTotal1(v DataPageMonsterSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCItemPage0 returns the union data inside the DataPageNPCItem_Page as a DataPageNPCItemPage0
func (t DataPageNPCItem_Page) AsDataPageNPCItemPage0() (DataPageNPCItemPage0, error) {
	var body DataPageNPCItemPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemPage0 overwrites any union data inside the DataPageNPCItem_Page as the provided DataPageNPCItemPage0
func (t *DataPageNPCItem_Page) FromDataPageNPCItemPage0(v DataPageNPCItemPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemPage0 performs a merge with any union data inside the DataPageNPCItem_Page, using the provided DataPageNPCItemPage0
func (t *DataPageNPCItem_Page) MergeDataPageNPCItemPage0(v DataPageNPCItemPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCItemPage1 returns the union data inside the DataPageNPCItem_Page as a DataPageNPCItemPage1
func (t DataPageNPCItem_Page) AsDataPageNPCItemPage1() (DataPageNPCItemPage1, error) {
	var body DataPageNPCItemPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemPage1 overwrites any union data inside the DataPageNPCItem_Page as the provided DataPageNPCItemPage1
func (t *DataPageNPCItem_Page) FromDataPageNPCItemPage1(v DataPageNPCItemPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemPage1 performs a merge with any union data inside the DataPageNPCItem_Page, using the provided DataPageNPCItemPage1
func (t *DataPageNPCItem_Page) MergeDataPageNPCItemPage1(v DataPageNPCItemPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCItem_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCItem_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCItemPages0 returns the union data inside the DataPageNPCItem_Pages as a DataPageNPCItemPages0
func (t DataPageNPCItem_Pages) AsDataPageNPCItemPages0() (DataPageNPCItemPages0, error) {
	var body DataPageNPCItemPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemPages0 overwrites any union data inside the DataPageNPCItem_Pages as the provided DataPageNPCItemPages0
func (t *DataPageNPCItem_Pages) FromDataPageNPCItemPages0(v DataPageNPCItemPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemPages0 performs a merge with any union data inside the DataPageNPCItem_Pages, using the provided DataPageNPCItemPages0
func (t *DataPageNPCItem_Pages) MergeDataPageNPCItemPages0(v DataPageNPCItemPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCItemPages1 returns the union data inside the DataPageNPCItem_Pages as a DataPageNPCItemPages1
func (t DataPageNPCItem_Pages) AsDataPageNPCItemPages1() (DataPageNPCItemPages1, error) {
	var body DataPageNPCItemPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemPages1 overwrites any union data inside the DataPageNPCItem_Pages as the provided DataPageNPCItemPages1
func (t *DataPageNPCItem_Pages) FromDataPageNPCItemPages1(v DataPageNPCItemPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemPages1 performs a merge with any union data inside the DataPageNPCItem_Pages, using the provided DataPageNPCItemPages1
func (t *DataPageNPCItem_Pages) MergeDataPageNPCItemPages1(v DataPageNPCItemPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCItem_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCItem_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCItemSize0 returns the union data inside the DataPageNPCItem_Size as a DataPageNPCItemSize0
func (t DataPageNPCItem_Size) AsDataPageNPCItemSize0() (DataPageNPCItemSize0, error) {
	var body DataPageNPCItemSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemSize0 overwrites any union data inside the DataPageNPCItem_Size as the provided DataPageNPCItemSize0
func (t *DataPageNPCItem_Size) FromDataPageNPCItemSize0(v DataPageNPCItemSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemSize0 performs a merge with any union data inside the DataPageNPCItem_Size, using the provided DataPageNPCItemSize0
func (t *DataPageNPCItem_Size) MergeDataPageNPCItemSize0(v DataPageNPCItemSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCItemSize1 returns the union data inside the DataPageNPCItem_Size as a DataPageNPCItemSize1
func (t DataPageNPCItem_Size) AsDataPageNPCItemSize1() (DataPageNPCItemSize1, error) {
	var body DataPageNPCItemSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemSize1 overwrites any union data inside the DataPageNPCItem_Size as the provided DataPageNPCItemSize1
func (t *DataPageNPCItem_Size) FromDataPageNPCItemSize1(v DataPageNPCItemSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemSize1 performs a merge with any union data inside the DataPageNPCItem_Size, using the provided DataPageNPCItemSize1
func (t *DataPageNPCItem_Size) MergeDataPageNPCItemSize1(v DataPageNPCItemSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCItem_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCItem_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCItemTotal0 returns the union data inside the DataPageNPCItem_Total as a DataPageNPCItemTotal0
func (t DataPageNPCItem_Total) AsDataPageNPCItemTotal0() (DataPageNPCItemTotal0, error) {
	var body DataPageNPCItemTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemTotal0 overwrites any union data inside the DataPageNPCItem_Total as the provided DataPageNPCItemTotal0
func (t *DataPageNPCItem_Total) FromDataPageNPCItemTotal0(v DataPageNPCItemTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemTotal0 performs a merge with any union data inside the DataPageNPCItem_Total, using the provided DataPageNPCItemTotal0
func (t *DataPageNPCItem_Total) MergeDataPageNPCItemTotal0(v DataPageNPCItemTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCItemTotal1 returns the union data inside the DataPageNPCItem_Total as a DataPageNPCItemTotal1
func (t DataPageNPCItem_Total) AsDataPageNPCItemTotal1() (DataPageNPCItemTotal1, error) {
	var body DataPageNPCItemTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCItemTotal1 overwrites any union data inside the DataPageNPCItem_Total as the provided DataPageNPCItemTotal1
func (t *DataPageNPCItem_Total) FromDataPageNPCItemTotal1(v DataPageNPCItemTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCItemTotal1 performs a merge with any union data inside the DataPageNPCItem_Total, using the provided DataPageNPCItemTotal1
func (t *DataPageNPCItem_Total) MergeDataPageNPCItemTotal1(v DataPageNPCItemTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCItem_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCItem_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCSchemaPage0 returns the union data inside the DataPageNPCSchema_Page as a DataPageNPCSchemaPage0
func (t DataPageNPCSchema_Page) AsDataPageNPCSchemaPage0() (DataPageNPCSchemaPage0, error) {
	var body DataPageNPCSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaPage0 overwrites any union data inside the DataPageNPCSchema_Page as the provided DataPageNPCSchemaPage0
func (t *DataPageNPCSchema_Page) FromDataPageNPCSchemaPage0(v DataPageNPCSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaPage0 performs a merge with any union data inside the DataPageNPCSchema_Page, using the provided DataPageNPCSchemaPage0
func (t *DataPageNPCSchema_Page) MergeDataPageNPCSchemaPage0(v DataPageNPCSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCSchemaPage1 returns the union data inside the DataPageNPCSchema_Page as a DataPageNPCSchemaPage1
func (t DataPageNPCSchema_Page) AsDataPageNPCSchemaPage1() (DataPageNPCSchemaPage1, error) {
	var body DataPageNPCSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaPage1 overwrites any union data inside the DataPageNPCSchema_Page as the provided DataPageNPCSchemaPage1
func (t *DataPageNPCSchema_Page) FromDataPageNPCSchemaPage1(v DataPageNPCSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaPage1 performs a merge with any union data inside the DataPageNPCSchema_Page, using the provided DataPageNPCSchemaPage1
func (t *DataPageNPCSchema_Page) MergeDataPageNPCSchemaPage1(v DataPageNPCSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCSchemaPages0 returns the union data inside the DataPageNPCSchema_Pages as a DataPageNPCSchemaPages0
func (t DataPageNPCSchema_Pages) AsDataPageNPCSchemaPages0() (DataPageNPCSchemaPages0, error) {
	var body DataPageNPCSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaPages0 overwrites any union data inside the DataPageNPCSchema_Pages as the provided DataPageNPCSchemaPages0
func (t *DataPageNPCSchema_Pages) FromDataPageNPCSchemaPages0(v DataPageNPCSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaPages0 performs a merge with any union data inside the DataPageNPCSchema_Pages, using the provided DataPageNPCSchemaPages0
func (t *DataPageNPCSchema_Pages) MergeDataPageNPCSchemaPages0(v DataPageNPCSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCSchemaPages1 returns the union data inside the DataPageNPCSchema_Pages as a DataPageNPCSchemaPages1
func (t DataPageNPCSchema_Pages) AsDataPageNPCSchemaPages1() (DataPageNPCSchemaPages1, error) {
	var body DataPageNPCSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaPages1 overwrites any union data inside the DataPageNPCSchema_Pages as the provided DataPageNPCSchemaPages1
func (t *DataPageNPCSchema_Pages) FromDataPageNPCSchemaPages1(v DataPageNPCSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaPages1 performs a merge with any union data inside the DataPageNPCSchema_Pages, using the provided DataPageNPCSchemaPages1
func (t *DataPageNPCSchema_Pages) MergeDataPageNPCSchemaPages1(v DataPageNPCSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCSchemaSize0 returns the union data inside the DataPageNPCSchema_Size as a DataPageNPCSchemaSize0
func (t DataPageNPCSchema_Size) AsDataPageNPCSchemaSize0() (DataPageNPCSchemaSize0, error) {
	var body DataPageNPCSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaSize0 overwrites any union data inside the DataPageNPCSchema_Size as the provided DataPageNPCSchemaSize0
func (t *DataPageNPCSchema_Size) FromDataPageNPCSchemaSize0(v DataPageNPCSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaSize0 performs a merge with any union data inside the DataPageNPCSchema_Size, using the provided DataPageNPCSchemaSize0
func (t *DataPageNPCSchema_Size) MergeDataPageNPCSchemaSize0(v DataPageNPCSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCSchemaSize1 returns the union data inside the DataPageNPCSchema_Size as a DataPageNPCSchemaSize1
func (t DataPageNPCSchema_Size) AsDataPageNPCSchemaSize1() (DataPageNPCSchemaSize1, error) {
	var body DataPageNPCSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaSize1 overwrites any union data inside the DataPageNPCSchema_Size as the provided DataPageNPCSchemaSize1
func (t *DataPageNPCSchema_Size) FromDataPageNPCSchemaSize1(v DataPageNPCSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaSize1 performs a merge with any union data inside the DataPageNPCSchema_Size, using the provided DataPageNPCSchemaSize1
func (t *DataPageNPCSchema_Size) MergeDataPageNPCSchemaSize1(v DataPageNPCSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageNPCSchemaTotal0 returns the union data inside the DataPageNPCSchema_Total as a DataPageNPCSchemaTotal0
func (t DataPageNPCSchema_Total) AsDataPageNPCSchemaTotal0() (DataPageNPCSchemaTotal0, error) {
	var body DataPageNPCSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaTotal0 overwrites any union data inside the DataPageNPCSchema_Total as the provided DataPageNPCSchemaTotal0
func (t *DataPageNPCSchema_Total) FromDataPageNPCSchemaTotal0(v DataPageNPCSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaTotal0 performs a merge with any union data inside the DataPageNPCSchema_Total, using the provided DataPageNPCSchemaTotal0
func (t *DataPageNPCSchema_Total) MergeDataPageNPCSchemaTotal0(v DataPageNPCSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageNPCSchemaTotal1 returns the union data inside the DataPageNPCSchema_Total as a DataPageNPCSchemaTotal1
func (t DataPageNPCSchema_Total) AsDataPageNPCSchemaTotal1() (DataPageNPCSchemaTotal1, error) {
	var body DataPageNPCSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageNPCSchemaTotal1 overwrites any union data inside the DataPageNPCSchema_Total as the provided DataPageNPCSchemaTotal1
func (t *DataPageNPCSchema_Total) FromDataPageNPCSchemaTotal1(v DataPageNPCSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageNPCSchemaTotal1 performs a merge with any union data inside the DataPageNPCSchema_Total, using the provided DataPageNPCSchemaTotal1
func (t *DataPageNPCSchema_Total) MergeDataPageNPCSchemaTotal1(v DataPageNPCSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageNPCSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageNPCSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaPage0 returns the union data inside the DataPageResourceSchema_Page as a DataPageResourceSchemaPage0
func (t DataPageResourceSchema_Page) AsDataPageResourceSchemaPage0() (DataPageResourceSchemaPage0, error) {
	var body DataPageResourceSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPage0 overwrites any union data inside the DataPageResourceSchema_Page as the provided DataPageResourceSchemaPage0
func (t *DataPageResourceSchema_Page) FromDataPageResourceSchemaPage0(v DataPageResourceSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPage0 performs a merge with any union data inside the DataPageResourceSchema_Page, using the provided DataPageResourceSchemaPage0
func (t *DataPageResourceSchema_Page) MergeDataPageResourceSchemaPage0(v DataPageResourceSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaPage1 returns the union data inside the DataPageResourceSchema_Page as a DataPageResourceSchemaPage1
func (t DataPageResourceSchema_Page) AsDataPageResourceSchemaPage1() (DataPageResourceSchemaPage1, error) {
	var body DataPageResourceSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPage1 overwrites any union data inside the DataPageResourceSchema_Page as the provided DataPageResourceSchemaPage1
func (t *DataPageResourceSchema_Page) FromDataPageResourceSchemaPage1(v DataPageResourceSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPage1 performs a merge with any union data inside the DataPageResourceSchema_Page, using the provided DataPageResourceSchemaPage1
func (t *DataPageResourceSchema_Page) MergeDataPageResourceSchemaPage1(v DataPageResourceSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaPages0 returns the union data inside the DataPageResourceSchema_Pages as a DataPageResourceSchemaPages0
func (t DataPageResourceSchema_Pages) AsDataPageResourceSchemaPages0() (DataPageResourceSchemaPages0, error) {
	var body DataPageResourceSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPages0 overwrites any union data inside the DataPageResourceSchema_Pages as the provided DataPageResourceSchemaPages0
func (t *DataPageResourceSchema_Pages) FromDataPageResourceSchemaPages0(v DataPageResourceSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPages0 performs a merge with any union data inside the DataPageResourceSchema_Pages, using the provided DataPageResourceSchemaPages0
func (t *DataPageResourceSchema_Pages) MergeDataPageResourceSchemaPages0(v DataPageResourceSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaPages1 returns the union data inside the DataPageResourceSchema_Pages as a DataPageResourceSchemaPages1
func (t DataPageResourceSchema_Pages) AsDataPageResourceSchemaPages1() (DataPageResourceSchemaPages1, error) {
	var body DataPageResourceSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPages1 overwrites any union data inside the DataPageResourceSchema_Pages as the provided DataPageResourceSchemaPages1
func (t *DataPageResourceSchema_Pages) FromDataPageResourceSchemaPages1(v DataPageResourceSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPages1 performs a merge with any union data inside the DataPageResourceSchema_Pages, using the provided DataPageResourceSchemaPages1
func (t *DataPageResourceSchema_Pages) MergeDataPageResourceSchemaPages1(v DataPageResourceSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaSize0 returns the union data inside the DataPageResourceSchema_Size as a DataPageResourceSchemaSize0
func (t DataPageResourceSchema_Size) AsDataPageResourceSchemaSize0() (DataPageResourceSchemaSize0, error) {
	var body DataPageResourceSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaSize0 overwrites any union data inside the DataPageResourceSchema_Size as the provided DataPageResourceSchemaSize0
func (t *DataPageResourceSchema_Size) FromDataPageResourceSchemaSize0(v DataPageResourceSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaSize0 performs a merge with any union data inside the DataPageResourceSchema_Size, using the provided DataPageResourceSchemaSize0
func (t *DataPageResourceSchema_Size) MergeDataPageResourceSchemaSize0(v DataPageResourceSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaSize1 returns the union data inside the DataPageResourceSchema_Size as a DataPageResourceSchemaSize1
func (t DataPageResourceSchema_Size) AsDataPageResourceSchemaSize1() (DataPageResourceSchemaSize1, error) {
	var body DataPageResourceSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaSize1 overwrites any union data inside the DataPageResourceSchema_Size as the provided DataPageResourceSchemaSize1
func (t *DataPageResourceSchema_Size) FromDataPageResourceSchemaSize1(v DataPageResourceSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaSize1 performs a merge with any union data inside the DataPageResourceSchema_Size, using the provided DataPageResourceSchemaSize1
func (t *DataPageResourceSchema_Size) MergeDataPageResourceSchemaSize1(v DataPageResourceSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaTotal0 returns the union data inside the DataPageResourceSchema_Total as a DataPageResourceSchemaTotal0
func (t DataPageResourceSchema_Total) AsDataPageResourceSchemaTotal0() (DataPageResourceSchemaTotal0, error) {
	var body DataPageResourceSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaTotal0 overwrites any union data inside the DataPageResourceSchema_Total as the provided DataPageResourceSchemaTotal0
func (t *DataPageResourceSchema_Total) FromDataPageResourceSchemaTotal0(v DataPageResourceSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaTotal0 performs a merge with any union data inside the DataPageResourceSchema_Total, using the provided DataPageResourceSchemaTotal0
func (t *DataPageResourceSchema_Total) MergeDataPageResourceSchemaTotal0(v DataPageResourceSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaTotal1 returns the union data inside the DataPageResourceSchema_Total as a DataPageResourceSchemaTotal1
func (t DataPageResourceSchema_Total) AsDataPageResourceSchemaTotal1() (DataPageResourceSchemaTotal1, error) {
	var body DataPageResourceSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaTotal1 overwrites any union data inside the DataPageResourceSchema_Total as the provided DataPageResourceSchemaTotal1
func (t *DataPageResourceSchema_Total) FromDataPageResourceSchemaTotal1(v DataPageResourceSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaTotal1 performs a merge with any union data inside the DataPageResourceSchema_Total, using the provided DataPageResourceSchemaTotal1
func (t *DataPageResourceSchema_Total) MergeDataPageResourceSchemaTotal1(v DataPageResourceSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaPage0 returns the union data inside the DataPageSimpleItemSchema_Page as a DataPageSimpleItemSchemaPage0
func (t DataPageSimpleItemSchema_Page) AsDataPageSimpleItemSchemaPage0() (DataPageSimpleItemSchemaPage0, error) {
	var body DataPageSimpleItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPage0 overwrites any union data inside the DataPageSimpleItemSchema_Page as the provided DataPageSimpleItemSchemaPage0
func (t *DataPageSimpleItemSchema_Page) FromDataPageSimpleItemSchemaPage0(v DataPageSimpleItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPage0 performs a merge with any union data inside the DataPageSimpleItemSchema_Page, using the provided DataPageSimpleItemSchemaPage0
func (t *DataPageSimpleItemSchema_Page) MergeDataPageSimpleItemSchemaPage0(v DataPageSimpleItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaPage1 returns the union data inside the DataPageSimpleItemSchema_Page as a DataPageSimpleItemSchemaPage1
func (t DataPageSimpleItemSchema_Page) AsDataPageSimpleItemSchemaPage1() (DataPageSimpleItemSchemaPage1, error) {
	var body DataPageSimpleItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPage1 overwrites any union data inside the DataPageSimpleItemSchema_Page as the provided DataPageSimpleItemSchemaPage1
func (t *DataPageSimpleItemSchema_Page) FromDataPageSimpleItemSchemaPage1(v DataPageSimpleItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPage1 performs a merge with any union data inside the DataPageSimpleItemSchema_Page, using the provided DataPageSimpleItemSchemaPage1
func (t *DataPageSimpleItemSchema_Page) MergeDataPageSimpleItemSchemaPage1(v DataPageSimpleItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaPages0 returns the union data inside the DataPageSimpleItemSchema_Pages as a DataPageSimpleItemSchemaPages0
func (t DataPageSimpleItemSchema_Pages) AsDataPageSimpleItemSchemaPages0() (DataPageSimpleItemSchemaPages0, error) {
	var body DataPageSimpleItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPages0 overwrites any union data inside the DataPageSimpleItemSchema_Pages as the provided DataPageSimpleItemSchemaPages0
func (t *DataPageSimpleItemSchema_Pages) FromDataPageSimpleItemSchemaPages0(v DataPageSimpleItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPages0 performs a merge with any union data inside the DataPageSimpleItemSchema_Pages, using the provided DataPageSimpleItemSchemaPages0
func (t *DataPageSimpleItemSchema_Pages) MergeDataPageSimpleItemSchemaPages0(v DataPageSimpleItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaPages1 returns the union data inside the DataPageSimpleItemSchema_Pages as a DataPageSimpleItemSchemaPages1
func (t DataPageSimpleItemSchema_Pages) AsDataPageSimpleItemSchemaPages1() (DataPageSimpleItemSchemaPages1, error) {
	var body DataPageSimpleItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPages1 overwrites any union data inside the DataPageSimpleItemSchema_Pages as the provided DataPageSimpleItemSchemaPages1
func (t *DataPageSimpleItemSchema_Pages) FromDataPageSimpleItemSchemaPages1(v DataPageSimpleItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPages1 performs a merge with any union data inside the DataPageSimpleItemSchema_Pages, using the provided DataPageSimpleItemSchemaPages1
func (t *DataPageSimpleItemSchema_Pages) MergeDataPageSimpleItemSchemaPages1(v DataPageSimpleItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaSize0 returns the union data inside the DataPageSimpleItemSchema_Size as a DataPageSimpleItemSchemaSize0
func (t DataPageSimpleItemSchema_Size) AsDataPageSimpleItemSchemaSize0() (DataPageSimpleItemSchemaSize0, error) {
	var body DataPageSimpleItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaSize0 overwrites any union data inside the DataPageSimpleItemSchema_Size as the provided DataPageSimpleItemSchemaSize0
func (t *DataPageSimpleItemSchema_Size) FromDataPageSimpleItemSchemaSize0(v DataPageSimpleItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaSize0 performs a merge with any union data inside the DataPageSimpleItemSchema_Size, using the provided DataPageSimpleItemSchemaSize0
func (t *DataPageSimpleItemSchema_Size) MergeDataPageSimpleItemSchemaSize0(v DataPageSimpleItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaSize1 returns the union data inside the DataPageSimpleItemSchema_Size as a DataPageSimpleItemSchemaSize1
func (t DataPageSimpleItemSchema_Size) AsDataPageSimpleItemSchemaSize1() (DataPageSimpleItemSchemaSize1, error) {
	var body DataPageSimpleItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaSize1 overwrites any union data inside the DataPageSimpleItemSchema_Size as the provided DataPageSimpleItemSchemaSize1
func (t *DataPageSimpleItemSchema_Size) FromDataPageSimpleItemSchemaSize1(v DataPageSimpleItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaSize1 performs a merge with any union data inside the DataPageSimpleItemSchema_Size, using the provided DataPageSimpleItemSchemaSize1
func (t *DataPageSimpleItemSchema_Size) MergeDataPageSimpleItemSchemaSize1(v DataPageSimpleItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaTotal0 returns the union data inside the DataPageSimpleItemSchema_Total as a DataPageSimpleItemSchemaTotal0
func (t DataPageSimpleItemSchema_Total) AsDataPageSimpleItemSchemaTotal0() (DataPageSimpleItemSchemaTotal0, error) {
	var body DataPageSimpleItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaTotal0 overwrites any union data inside the DataPageSimpleItemSchema_Total as the provided DataPageSimpleItemSchemaTotal0
func (t *DataPageSimpleItemSchema_Total) FromDataPageSimpleItemSchemaTotal0(v DataPageSimpleItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaTotal0 performs a merge with any union data inside the DataPageSimpleItemSchema_Total, using the provided DataPageSimpleItemSchemaTotal0
func (t *DataPageSimpleItemSchema_Total) MergeDataPageSimpleItemSchemaTotal0(v DataPageSimpleItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaTotal1 returns the union data inside the DataPageSimpleItemSchema_Total as a DataPageSimpleItemSchemaTotal1
func (t DataPageSimpleItemSchema_Total) AsDataPageSimpleItemSchemaTotal1() (DataPageSimpleItemSchemaTotal1, error) {
	var body DataPageSimpleItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaTotal1 overwrites any union data inside the DataPageSimpleItemSchema_Total as the provided DataPageSimpleItemSchemaTotal1
func (t *DataPageSimpleItemSchema_Total) FromDataPageSimpleItemSchemaTotal1(v DataPageSimpleItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaTotal1 performs a merge with any union data inside the DataPageSimpleItemSchema_Total, using the provided DataPageSimpleItemSchemaTotal1
func (t *DataPageSimpleItemSchema_Total) MergeDataPageSimpleItemSchemaTotal1(v DataPageSimpleItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageTaskFullSchemaPage0 returns the union data inside the DataPageTaskFullSchema_Page as a DataPageTaskFullSchemaPage0
func (t DataPageTaskFullSchema_Page) AsDataPageTaskFullSchemaPage0() (DataPageTaskFullSchemaPage0, error) {
	var body DataPageTaskFullSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaPage0 overwrites any union data inside the DataPageTaskFullSchema_Page as the provided DataPageTaskFullSchemaPage0
func (t *DataPageTaskFullSchema_Page) FromDataPageTaskFullSchemaPage0(v DataPageTaskFullSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaPage0 performs a merge with any union data inside the DataPageTaskFullSchema_Page, using the provided DataPageTaskFullSchemaPage0
func (t *DataPageTaskFullSchema_Page) MergeDataPageTaskFullSchemaPage0(v DataPageTaskFullSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageTaskFullSchemaPage1 returns the union data inside the DataPageTaskFullSchema_Page as a DataPageTaskFullSchemaPage1
func (t DataPageTaskFullSchema_Page) AsDataPageTaskFullSchemaPage1() (DataPageTaskFullSchemaPage1, error) {
	var body DataPageTaskFullSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaPage1 overwrites any union data inside the DataPageTaskFullSchema_Page as the provided DataPageTaskFullSchemaPage1
func (t *DataPageTaskFullSchema_Page) FromDataPageTaskFullSchemaPage1(v DataPageTaskFullSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaPage1 performs a merge with any union data inside the DataPageTaskFullSchema_Page, using the provided DataPageTaskFullSchemaPage1
func (t *DataPageTaskFullSchema_Page) MergeDataPageTaskFullSchemaPage1(v DataPageTaskFullSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageTaskFullSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageTaskFullSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageTaskFullSchemaPages0 returns the union data inside the DataPageTaskFullSchema_Pages as a DataPageTaskFullSchemaPages0
func (t DataPageTaskFullSchema_Pages) AsDataPageTaskFullSchemaPages0() (DataPageTaskFullSchemaPages0, error) {
	var body DataPageTaskFullSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaPages0 overwrites any union data inside the DataPageTaskFullSchema_Pages as the provided DataPageTaskFullSchemaPages0
func (t *DataPageTaskFullSchema_Pages) FromDataPageTaskFullSchemaPages0(v DataPageTaskFullSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaPages0 performs a merge with any union data inside the DataPageTaskFullSchema_Pages, using the provided DataPageTaskFullSchemaPages0
func (t *DataPageTaskFullSchema_Pages) MergeDataPageTaskFullSchemaPages0(v DataPageTaskFullSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageTaskFullSchemaPages1 returns the union data inside the DataPageTaskFullSchema_Pages as a DataPageTaskFullSchemaPages1
func (t DataPageTaskFullSchema_Pages) AsDataPageTaskFullSchemaPages1() (DataPageTaskFullSchemaPages1, error) {
	var body DataPageTaskFullSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaPages1 overwrites any union data inside the DataPageTaskFullSchema_Pages as the provided DataPageTaskFullSchemaPages1
func (t *DataPageTaskFullSchema_Pages) FromDataPageTaskFullSchemaPages1(v DataPageTaskFullSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaPages1 performs a merge with any union data inside the DataPageTaskFullSchema_Pages, using the provided DataPageTaskFullSchemaPages1
func (t *DataPageTaskFullSchema_Pages) MergeDataPageTaskFullSchemaPages1(v DataPageTaskFullSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageTaskFullSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageTaskFullSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageTaskFullSchemaSize0 returns the union data inside the DataPageTaskFullSchema_Size as a DataPageTaskFullSchemaSize0
func (t DataPageTaskFullSchema_Size) AsDataPageTaskFullSchemaSize0() (DataPageTaskFullSchemaSize0, error) {
	var body DataPageTaskFullSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaSize0 overwrites any union data inside the DataPageTaskFullSchema_Size as the provided DataPageTaskFullSchemaSize0
func (t *DataPageTaskFullSchema_Size) FromDataPageTaskFullSchemaSize0(v DataPageTaskFullSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaSize0 performs a merge with any union data inside the DataPageTaskFullSchema_Size, using the provided DataPageTaskFullSchemaSize0
func (t *DataPageTaskFullSchema_Size) MergeDataPageTaskFullSchemaSize0(v DataPageTaskFullSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageTaskFullSchemaSize1 returns the union data inside the DataPageTaskFullSchema_Size as a DataPageTaskFullSchemaSize1
func (t DataPageTaskFullSchema_Size) AsDataPageTaskFullSchemaSize1() (DataPageTaskFullSchemaSize1, error) {
	var body DataPageTaskFullSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaSize1 overwrites any union data inside the DataPageTaskFullSchema_Size as the provided DataPageTaskFullSchemaSize1
func (t *DataPageTaskFullSchema_Size) FromDataPageTaskFullSchemaSize1(v DataPageTaskFullSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaSize1 performs a merge with any union data inside the DataPageTaskFullSchema_Size, using the provided DataPageTaskFullSchemaSize1
func (t *DataPageTaskFullSchema_Size) MergeDataPageTaskFullSchemaSize1(v DataPageTaskFullSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageTaskFullSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageTaskFullSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageTaskFullSchemaTotal0 returns the union data inside the DataPageTaskFullSchema_Total as a DataPageTaskFullSchemaTotal0
func (t DataPageTaskFullSchema_Total) AsDataPageTaskFullSchemaTotal0() (DataPageTaskFullSchemaTotal0, error) {
	var body DataPageTaskFullSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaTotal0 overwrites any union data inside the DataPageTaskFullSchema_Total as the provided DataPageTaskFullSchemaTotal0
func (t *DataPageTaskFullSchema_Total) FromDataPageTaskFullSchemaTotal0(v DataPageTaskFullSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaTotal0 performs a merge with any union data inside the DataPageTaskFullSchema_Total, using the provided DataPageTaskFullSchemaTotal0
func (t *DataPageTaskFullSchema_Total) MergeDataPageTaskFullSchemaTotal0(v DataPageTaskFullSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageTaskFullSchemaTotal1 returns the union data inside the DataPageTaskFullSchema_Total as a DataPageTaskFullSchemaTotal1
func (t DataPageTaskFullSchema_Total) AsDataPageTaskFullSchemaTotal1() (DataPageTaskFullSchemaTotal1, error) {
	var body DataPageTaskFullSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageTaskFullSchemaTotal1 overwrites any union data inside the DataPageTaskFullSchema_Total as the provided DataPageTaskFullSchemaTotal1
func (t *DataPageTaskFullSchema_Total) FromDataPageTaskFullSchemaTotal1(v DataPageTaskFullSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageTaskFullSchemaTotal1 performs a merge with any union data inside the DataPageTaskFullSchema_Total, using the provided DataPageTaskFullSchemaTotal1
func (t *DataPageTaskFullSchema_Total) MergeDataPageTaskFullSchemaTotal1(v DataPageTaskFullSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageTaskFullSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageTaskFullSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchema returns the union data inside the ItemSchema_Craft as a CraftSchema
func (t ItemSchema_Craft) AsCraftSchema() (CraftSchema, error) {
	var body CraftSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchema overwrites any union data inside the ItemSchema_Craft as the provided CraftSchema
func (t *ItemSchema_Craft) FromCraftSchema(v CraftSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchema performs a merge with any union data inside the ItemSchema_Craft, using the provided CraftSchema
func (t *ItemSchema_Craft) MergeCraftSchema(v CraftSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsItemSchemaCraft1 returns the union data inside the ItemSchema_Craft as a ItemSchemaCraft1
func (t ItemSchema_Craft) AsItemSchemaCraft1() (ItemSchemaCraft1, error) {
	var body ItemSchemaCraft1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromItemSchemaCraft1 overwrites any union data inside the ItemSchema_Craft as the provided ItemSchemaCraft1
func (t *ItemSchema_Craft) FromItemSchemaCraft1(v ItemSchemaCraft1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeItemSchemaCraft1 performs a merge with any union data inside the ItemSchema_Craft, using the provided ItemSchemaCraft1
func (t *ItemSchema_Craft) MergeItemSchemaCraft1(v ItemSchemaCraft1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ItemSchema_Craft) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ItemSchema_Craft) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLogSchemaCooldownExpiration0 returns the union data inside the LogSchema_CooldownExpiration as a LogSchemaCooldownExpiration0
func (t LogSchema_CooldownExpiration) AsLogSchemaCooldownExpiration0() (LogSchemaCooldownExpiration0, error) {
	var body LogSchemaCooldownExpiration0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogSchemaCooldownExpiration0 overwrites any union data inside the LogSchema_CooldownExpiration as the provided LogSchemaCooldownExpiration0
func (t *LogSchema_CooldownExpiration) FromLogSchemaCooldownExpiration0(v LogSchemaCooldownExpiration0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogSchemaCooldownExpiration0 performs a merge with any union data inside the LogSchema_CooldownExpiration, using the provided LogSchemaCooldownExpiration0
func (t *LogSchema_CooldownExpiration) MergeLogSchemaCooldownExpiration0(v LogSchemaCooldownExpiration0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogSchemaCooldownExpiration1 returns the union data inside the LogSchema_CooldownExpiration as a LogSchemaCooldownExpiration1
func (t LogSchema_CooldownExpiration) AsLogSchemaCooldownExpiration1() (LogSchemaCooldownExpiration1, error) {
	var body LogSchemaCooldownExpiration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogSchemaCooldownExpiration1 overwrites any union data inside the LogSchema_CooldownExpiration as the provided LogSchemaCooldownExpiration1
func (t *LogSchema_CooldownExpiration) FromLogSchemaCooldownExpiration1(v LogSchemaCooldownExpiration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogSchemaCooldownExpiration1 performs a merge with any union data inside the LogSchema_CooldownExpiration, using the provided LogSchemaCooldownExpiration1
func (t *LogSchema_CooldownExpiration) MergeLogSchemaCooldownExpiration1(v LogSchemaCooldownExpiration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LogSchema_CooldownExpiration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LogSchema_CooldownExpiration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMapContentSchema returns the union data inside the MapSchema_Content as a MapContentSchema
func (t MapSchema_Content) AsMapContentSchema() (MapContentSchema, error) {
	var body MapContentSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMapContentSchema overwrites any union data inside the MapSchema_Content as the provided MapContentSchema
func (t *MapSchema_Content) FromMapContentSchema(v MapContentSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMapContentSchema performs a merge with any union data inside the MapSchema_Content, using the provided MapContentSchema
func (t *MapSchema_Content) MergeMapContentSchema(v MapContentSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMapSchemaContent1 returns the union data inside the MapSchema_Content as a MapSchemaContent1
func (t MapSchema_Content) AsMapSchemaContent1() (MapSchemaContent1, error) {
	var body MapSchemaContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMapSchemaContent1 overwrites any union data inside the MapSchema_Content as the provided MapSchemaContent1
func (t *MapSchema_Content) FromMapSchemaContent1(v MapSchemaContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMapSchemaContent1 performs a merge with any union data inside the MapSchema_Content, using the provided MapSchemaContent1
func (t *MapSchema_Content) MergeMapSchemaContent1(v MapSchemaContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MapSchema_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MapSchema_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPCItemBuyPrice0 returns the union data inside the NPCItem_BuyPrice as a NPCItemBuyPrice0
func (t NPCItem_BuyPrice) AsNPCItemBuyPrice0() (NPCItemBuyPrice0, error) {
	var body NPCItemBuyPrice0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPCItemBuyPrice0 overwrites any union data inside the NPCItem_BuyPrice as the provided NPCItemBuyPrice0
func (t *NPCItem_BuyPrice) FromNPCItemBuyPrice0(v NPCItemBuyPrice0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPCItemBuyPrice0 performs a merge with any union data inside the NPCItem_BuyPrice, using the provided NPCItemBuyPrice0
func (t *NPCItem_BuyPrice) MergeNPCItemBuyPrice0(v NPCItemBuyPrice0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNPCItemBuyPrice1 returns the union data inside the NPCItem_BuyPrice as a NPCItemBuyPrice1
func (t NPCItem_BuyPrice) AsNPCItemBuyPrice1() (NPCItemBuyPrice1, error) {
	var body NPCItemBuyPrice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPCItemBuyPrice1 overwrites any union data inside the NPCItem_BuyPrice as the provided NPCItemBuyPrice1
func (t *NPCItem_BuyPrice) FromNPCItemBuyPrice1(v NPCItemBuyPrice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPCItemBuyPrice1 performs a merge with any union data inside the NPCItem_BuyPrice, using the provided NPCItemBuyPrice1
func (t *NPCItem_BuyPrice) MergeNPCItemBuyPrice1(v NPCItemBuyPrice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NPCItem_BuyPrice) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NPCItem_BuyPrice) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPCItemSellPrice0 returns the union data inside the NPCItem_SellPrice as a NPCItemSellPrice0
func (t NPCItem_SellPrice) AsNPCItemSellPrice0() (NPCItemSellPrice0, error) {
	var body NPCItemSellPrice0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPCItemSellPrice0 overwrites any union data inside the NPCItem_SellPrice as the provided NPCItemSellPrice0
func (t *NPCItem_SellPrice) FromNPCItemSellPrice0(v NPCItemSellPrice0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPCItemSellPrice0 performs a merge with any union data inside the NPCItem_SellPrice, using the provided NPCItemSellPrice0
func (t *NPCItem_SellPrice) MergeNPCItemSellPrice0(v NPCItemSellPrice0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNPCItemSellPrice1 returns the union data inside the NPCItem_SellPrice as a NPCItemSellPrice1
func (t NPCItem_SellPrice) AsNPCItemSellPrice1() (NPCItemSellPrice1, error) {
	var body NPCItemSellPrice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPCItemSellPrice1 overwrites any union data inside the NPCItem_SellPrice as the provided NPCItemSellPrice1
func (t *NPCItem_SellPrice) FromNPCItemSellPrice1(v NPCItemSellPrice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPCItemSellPrice1 performs a merge with any union data inside the NPCItem_SellPrice, using the provided NPCItemSellPrice1
func (t *NPCItem_SellPrice) MergeNPCItemSellPrice1(v NPCItemSellPrice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NPCItem_SellPrice) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NPCItem_SellPrice) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskFullSchemaSkill0 returns the union data inside the TaskFullSchema_Skill as a TaskFullSchemaSkill0
func (t TaskFullSchema_Skill) AsTaskFullSchemaSkill0() (TaskFullSchemaSkill0, error) {
	var body TaskFullSchemaSkill0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskFullSchemaSkill0 overwrites any union data inside the TaskFullSchema_Skill as the provided TaskFullSchemaSkill0
func (t *TaskFullSchema_Skill) FromTaskFullSchemaSkill0(v TaskFullSchemaSkill0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskFullSchemaSkill0 performs a merge with any union data inside the TaskFullSchema_Skill, using the provided TaskFullSchemaSkill0
func (t *TaskFullSchema_Skill) MergeTaskFullSchemaSkill0(v TaskFullSchemaSkill0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskFullSchemaSkill1 returns the union data inside the TaskFullSchema_Skill as a TaskFullSchemaSkill1
func (t TaskFullSchema_Skill) AsTaskFullSchemaSkill1() (TaskFullSchemaSkill1, error) {
	var body TaskFullSchemaSkill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskFullSchemaSkill1 overwrites any union data inside the TaskFullSchema_Skill as the provided TaskFullSchemaSkill1
func (t *TaskFullSchema_Skill) FromTaskFullSchemaSkill1(v TaskFullSchemaSkill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskFullSchemaSkill1 performs a merge with any union data inside the TaskFullSchema_Skill, using the provided TaskFullSchemaSkill1
func (t *TaskFullSchema_Skill) MergeTaskFullSchemaSkill1(v TaskFullSchemaSkill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaskFullSchema_Skill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaskFullSchema_Skill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStatusGet request
	GetStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountAccountsCreatePostWithBody request with any body
	CreateAccountAccountsCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccountAccountsCreatePost(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountAccountsAccountGet request
	GetAccountAccountsAccountGet(ctx context.Context, account string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountAchievementsAccountsAccountAchievementsGet request
	GetAccountAchievementsAccountsAccountAchievementsGet(ctx context.Context, account string, params *GetAccountAchievementsAccountsAccountAchievementsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAchievementsAchievementsGet request
	GetAllAchievementsAchievementsGet(ctx context.Context, params *GetAllAchievementsAchievementsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAchievementAchievementsCodeGet request
	GetAchievementAchievementsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllBadgesBadgesGet request
	GetAllBadgesBadgesGet(ctx context.Context, params *GetAllBadgesBadgesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBadgeBadgesCodeGet request
	GetBadgeBadgesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCharacterCharactersCreatePostWithBody request with any body
	CreateCharacterCharactersCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCharacterCharactersCreatePost(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCharacterCharactersDeletePostWithBody request with any body
	DeleteCharacterCharactersDeletePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCharacterCharactersDeletePost(ctx context.Context, body DeleteCharacterCharactersDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterCharactersNameGet request
	GetCharacterCharactersNameGet(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEffectsEffectsGet request
	GetAllEffectsEffectsGet(ctx context.Context, params *GetAllEffectsEffectsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEffectEffectsCodeGet request
	GetEffectEffectsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEventsEventsGet request
	GetAllEventsEventsGet(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllActiveEventsEventsActiveGet request
	GetAllActiveEventsEventsActiveGet(ctx context.Context, params *GetAllActiveEventsEventsActiveGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeSellHistoryGrandexchangeHistoryCodeGet request
	GetGeSellHistoryGrandexchangeHistoryCodeGet(ctx context.Context, code string, params *GetGeSellHistoryGrandexchangeHistoryCodeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeSellOrdersGrandexchangeOrdersGet request
	GetGeSellOrdersGrandexchangeOrdersGet(ctx context.Context, params *GetGeSellOrdersGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeSellOrderGrandexchangeOrdersIdGet request
	GetGeSellOrderGrandexchangeOrdersIdGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllItemsItemsGet request
	GetAllItemsItemsGet(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemItemsCodeGet request
	GetItemItemsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsLeaderboardLeaderboardAccountsGet request
	GetAccountsLeaderboardLeaderboardAccountsGet(ctx context.Context, params *GetAccountsLeaderboardLeaderboardAccountsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersLeaderboardLeaderboardCharactersGet request
	GetCharactersLeaderboardLeaderboardCharactersGet(ctx context.Context, params *GetCharactersLeaderboardLeaderboardCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMapsMapsGet request
	GetAllMapsMapsGet(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapMapsXYGet request
	GetMapMapsXYGet(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMonstersMonstersGet request
	GetAllMonstersMonstersGet(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonsterMonstersCodeGet request
	GetMonsterMonstersCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankDetailsMyBankGet request
	GetBankDetailsMyBankGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankItemsMyBankItemsGet request
	GetBankItemsMyBankItemsGet(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordMyChangePasswordPostWithBody request with any body
	ChangePasswordMyChangePasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePasswordMyChangePasswordPost(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyCharactersMyCharactersGet request
	GetMyCharactersMyCharactersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountDetailsMyDetailsGet request
	GetAccountDetailsMyDetailsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeSellHistoryMyGrandexchangeHistoryGet request
	GetGeSellHistoryMyGrandexchangeHistoryGet(ctx context.Context, params *GetGeSellHistoryMyGrandexchangeHistoryGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeSellOrdersMyGrandexchangeOrdersGet request
	GetGeSellOrdersMyGrandexchangeOrdersGet(ctx context.Context, params *GetGeSellOrdersMyGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCharactersLogsMyLogsGet request
	GetAllCharactersLogsMyLogsGet(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionBuyBankExpansionMyNameActionBankBuyExpansionPost request
	ActionBuyBankExpansionMyNameActionBankBuyExpansionPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDepositBankMyNameActionBankDepositPostWithBody request with any body
	ActionDepositBankMyNameActionBankDepositPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody request with any body
	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionWithdrawBankMyNameActionBankWithdrawPostWithBody request with any body
	ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody request with any body
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionCraftingMyNameActionCraftingPostWithBody request with any body
	ActionCraftingMyNameActionCraftingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionCraftingMyNameActionCraftingPost(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDeleteItemMyNameActionDeletePostWithBody request with any body
	ActionDeleteItemMyNameActionDeletePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDeleteItemMyNameActionDeletePost(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionEquipItemMyNameActionEquipPostWithBody request with any body
	ActionEquipItemMyNameActionEquipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionEquipItemMyNameActionEquipPost(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionFightMyNameActionFightPost request
	ActionFightMyNameActionFightPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGatheringMyNameActionGatheringPost request
	ActionGatheringMyNameActionGatheringPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBody request with any body
	ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeBuyItemMyNameActionGrandexchangeBuyPost(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBody request with any body
	ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost(ctx context.Context, name string, body ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBody request with any body
	ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost(ctx context.Context, name string, body ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionMoveMyNameActionMovePostWithBody request with any body
	ActionMoveMyNameActionMovePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionMoveMyNameActionMovePost(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionNpcBuyItemMyNameActionNpcBuyPostWithBody request with any body
	ActionNpcBuyItemMyNameActionNpcBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionNpcBuyItemMyNameActionNpcBuyPost(ctx context.Context, name string, body ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionNpcSellItemMyNameActionNpcSellPostWithBody request with any body
	ActionNpcSellItemMyNameActionNpcSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionNpcSellItemMyNameActionNpcSellPost(ctx context.Context, name string, body ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionRecyclingMyNameActionRecyclingPostWithBody request with any body
	ActionRecyclingMyNameActionRecyclingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionRestMyNameActionRestPost request
	ActionRestMyNameActionRestPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionTaskCancelMyNameActionTaskCancelPost request
	ActionTaskCancelMyNameActionTaskCancelPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionCompleteTaskMyNameActionTaskCompletePost request
	ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionTaskExchangeMyNameActionTaskExchangePost request
	ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionAcceptNewTaskMyNameActionTaskNewPost request
	ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionTaskTradeMyNameActionTaskTradePostWithBody request with any body
	ActionTaskTradeMyNameActionTaskTradePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionTaskTradeMyNameActionTaskTradePost(ctx context.Context, name string, body ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionUnequipItemMyNameActionUnequipPostWithBody request with any body
	ActionUnequipItemMyNameActionUnequipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionUseItemMyNameActionUsePostWithBody request with any body
	ActionUseItemMyNameActionUsePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionUseItemMyNameActionUsePost(ctx context.Context, name string, body ActionUseItemMyNameActionUsePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllNpcsNpcsGet request
	GetAllNpcsNpcsGet(ctx context.Context, params *GetAllNpcsNpcsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNpcNpcsCodeGet request
	GetNpcNpcsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNpcItemsNpcsCodeItemsGet request
	GetNpcItemsNpcsCodeItemsGet(ctx context.Context, code string, params *GetNpcItemsNpcsCodeItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllResourcesResourcesGet request
	GetAllResourcesResourcesGet(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceResourcesCodeGet request
	GetResourceResourcesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTasksTasksListGet request
	GetAllTasksTasksListGet(ctx context.Context, params *GetAllTasksTasksListGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskTasksListCodeGet request
	GetTaskTasksListCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllTasksRewardsTasksRewardsGet request
	GetAllTasksRewardsTasksRewardsGet(ctx context.Context, params *GetAllTasksRewardsTasksRewardsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasksRewardTasksRewardsCodeGet request
	GetTasksRewardTasksRewardsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateTokenTokenPost request
	GenerateTokenTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccountsCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccountsCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccountsCreatePost(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccountsCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountAccountsAccountGet(ctx context.Context, account string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountAccountsAccountGetRequest(c.Server, account)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountAchievementsAccountsAccountAchievementsGet(ctx context.Context, account string, params *GetAccountAchievementsAccountsAccountAchievementsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountAchievementsAccountsAccountAchievementsGetRequest(c.Server, account, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAchievementsAchievementsGet(ctx context.Context, params *GetAllAchievementsAchievementsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAchievementsAchievementsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAchievementAchievementsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAchievementAchievementsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllBadgesBadgesGet(ctx context.Context, params *GetAllBadgesBadgesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllBadgesBadgesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBadgeBadgesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBadgeBadgesCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterCharactersCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterCharactersCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterCharactersCreatePost(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterCharactersCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharacterCharactersDeletePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharacterCharactersDeletePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCharacterCharactersDeletePost(ctx context.Context, body DeleteCharacterCharactersDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCharacterCharactersDeletePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterCharactersNameGet(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterCharactersNameGetRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEffectsEffectsGet(ctx context.Context, params *GetAllEffectsEffectsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEffectsEffectsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEffectEffectsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEffectEffectsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEventsEventsGet(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEventsEventsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllActiveEventsEventsActiveGet(ctx context.Context, params *GetAllActiveEventsEventsActiveGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllActiveEventsEventsActiveGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeSellHistoryGrandexchangeHistoryCodeGet(ctx context.Context, code string, params *GetGeSellHistoryGrandexchangeHistoryCodeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeSellHistoryGrandexchangeHistoryCodeGetRequest(c.Server, code, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeSellOrdersGrandexchangeOrdersGet(ctx context.Context, params *GetGeSellOrdersGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeSellOrdersGrandexchangeOrdersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeSellOrderGrandexchangeOrdersIdGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeSellOrderGrandexchangeOrdersIdGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllItemsItemsGet(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllItemsItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemItemsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemItemsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsLeaderboardLeaderboardAccountsGet(ctx context.Context, params *GetAccountsLeaderboardLeaderboardAccountsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsLeaderboardLeaderboardAccountsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersLeaderboardLeaderboardCharactersGet(ctx context.Context, params *GetCharactersLeaderboardLeaderboardCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersLeaderboardLeaderboardCharactersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMapsMapsGet(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMapsMapsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapMapsXYGet(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapMapsXYGetRequest(c.Server, x, y)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMonstersMonstersGet(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMonstersMonstersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonsterMonstersCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonsterMonstersCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBankDetailsMyBankGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankDetailsMyBankGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBankItemsMyBankItemsGet(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankItemsMyBankItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordMyChangePasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordMyChangePasswordPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordMyChangePasswordPost(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordMyChangePasswordPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyCharactersMyCharactersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyCharactersMyCharactersGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountDetailsMyDetailsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountDetailsMyDetailsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeSellHistoryMyGrandexchangeHistoryGet(ctx context.Context, params *GetGeSellHistoryMyGrandexchangeHistoryGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeSellHistoryMyGrandexchangeHistoryGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeSellOrdersMyGrandexchangeOrdersGet(ctx context.Context, params *GetGeSellOrdersMyGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeSellOrdersMyGrandexchangeOrdersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCharactersLogsMyLogsGet(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCharactersLogsMyLogsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionBuyBankExpansionMyNameActionBankBuyExpansionPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionBuyBankExpansionMyNameActionBankBuyExpansionPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankMyNameActionBankDepositPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankMyNameActionBankDepositPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankMyNameActionBankWithdrawPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCraftingMyNameActionCraftingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCraftingMyNameActionCraftingPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCraftingMyNameActionCraftingPost(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCraftingMyNameActionCraftingPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDeleteItemMyNameActionDeletePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDeleteItemMyNameActionDeletePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDeleteItemMyNameActionDeletePost(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDeleteItemMyNameActionDeletePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionEquipItemMyNameActionEquipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionEquipItemMyNameActionEquipPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionEquipItemMyNameActionEquipPost(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionEquipItemMyNameActionEquipPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionFightMyNameActionFightPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionFightMyNameActionFightPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGatheringMyNameActionGatheringPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGatheringMyNameActionGatheringPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeBuyItemMyNameActionGrandexchangeBuyPost(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost(ctx context.Context, name string, body ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost(ctx context.Context, name string, body ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionMoveMyNameActionMovePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionMoveMyNameActionMovePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionMoveMyNameActionMovePost(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionMoveMyNameActionMovePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionNpcBuyItemMyNameActionNpcBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionNpcBuyItemMyNameActionNpcBuyPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionNpcBuyItemMyNameActionNpcBuyPost(ctx context.Context, name string, body ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionNpcBuyItemMyNameActionNpcBuyPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionNpcSellItemMyNameActionNpcSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionNpcSellItemMyNameActionNpcSellPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionNpcSellItemMyNameActionNpcSellPost(ctx context.Context, name string, body ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionNpcSellItemMyNameActionNpcSellPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRecyclingMyNameActionRecyclingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRecyclingMyNameActionRecyclingPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRestMyNameActionRestPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRestMyNameActionRestPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionTaskCancelMyNameActionTaskCancelPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionTaskCancelMyNameActionTaskCancelPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCompleteTaskMyNameActionTaskCompletePostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionTaskExchangeMyNameActionTaskExchangePostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionAcceptNewTaskMyNameActionTaskNewPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionTaskTradeMyNameActionTaskTradePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionTaskTradeMyNameActionTaskTradePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionTaskTradeMyNameActionTaskTradePost(ctx context.Context, name string, body ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionTaskTradeMyNameActionTaskTradePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUnequipItemMyNameActionUnequipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUnequipItemMyNameActionUnequipPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUseItemMyNameActionUsePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUseItemMyNameActionUsePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUseItemMyNameActionUsePost(ctx context.Context, name string, body ActionUseItemMyNameActionUsePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUseItemMyNameActionUsePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllNpcsNpcsGet(ctx context.Context, params *GetAllNpcsNpcsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllNpcsNpcsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNpcNpcsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNpcNpcsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNpcItemsNpcsCodeItemsGet(ctx context.Context, code string, params *GetNpcItemsNpcsCodeItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNpcItemsNpcsCodeItemsGetRequest(c.Server, code, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllResourcesResourcesGet(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllResourcesResourcesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceResourcesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceResourcesCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTasksTasksListGet(ctx context.Context, params *GetAllTasksTasksListGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTasksTasksListGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskTasksListCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskTasksListCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllTasksRewardsTasksRewardsGet(ctx context.Context, params *GetAllTasksRewardsTasksRewardsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTasksRewardsTasksRewardsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasksRewardTasksRewardsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRewardTasksRewardsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTokenTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTokenTokenPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStatusGetRequest generates requests for GetStatusGet
func NewGetStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountAccountsCreatePostRequest calls the generic CreateAccountAccountsCreatePost builder with application/json body
func NewCreateAccountAccountsCreatePostRequest(server string, body CreateAccountAccountsCreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountAccountsCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountAccountsCreatePostRequestWithBody generates requests for CreateAccountAccountsCreatePost with any type of body
func NewCreateAccountAccountsCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountAccountsAccountGetRequest generates requests for GetAccountAccountsAccountGet
func NewGetAccountAccountsAccountGetRequest(server string, account string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountAchievementsAccountsAccountAchievementsGetRequest generates requests for GetAccountAchievementsAccountsAccountAchievementsGet
func NewGetAccountAchievementsAccountsAccountAchievementsGetRequest(server string, account string, params *GetAccountAchievementsAccountsAccountAchievementsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account", runtime.ParamLocationPath, account)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s/achievements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Completed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed", runtime.ParamLocationQuery, *params.Completed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllAchievementsAchievementsGetRequest generates requests for GetAllAchievementsAchievementsGet
func NewGetAllAchievementsAchievementsGetRequest(server string, params *GetAllAchievementsAchievementsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/achievements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAchievementAchievementsCodeGetRequest generates requests for GetAchievementAchievementsCodeGet
func NewGetAchievementAchievementsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/achievements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllBadgesBadgesGetRequest generates requests for GetAllBadgesBadgesGet
func NewGetAllBadgesBadgesGetRequest(server string, params *GetAllBadgesBadgesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/badges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBadgeBadgesCodeGetRequest generates requests for GetBadgeBadgesCodeGet
func NewGetBadgeBadgesCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/badges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCharacterCharactersCreatePostRequest calls the generic CreateCharacterCharactersCreatePost builder with application/json body
func NewCreateCharacterCharactersCreatePostRequest(server string, body CreateCharacterCharactersCreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCharacterCharactersCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCharacterCharactersCreatePostRequestWithBody generates requests for CreateCharacterCharactersCreatePost with any type of body
func NewCreateCharacterCharactersCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCharacterCharactersDeletePostRequest calls the generic DeleteCharacterCharactersDeletePost builder with application/json body
func NewDeleteCharacterCharactersDeletePostRequest(server string, body DeleteCharacterCharactersDeletePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCharacterCharactersDeletePostRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteCharacterCharactersDeletePostRequestWithBody generates requests for DeleteCharacterCharactersDeletePost with any type of body
func NewDeleteCharacterCharactersDeletePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCharacterCharactersNameGetRequest generates requests for GetCharacterCharactersNameGet
func NewGetCharacterCharactersNameGetRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEffectsEffectsGetRequest generates requests for GetAllEffectsEffectsGet
func NewGetAllEffectsEffectsGetRequest(server string, params *GetAllEffectsEffectsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/effects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEffectEffectsCodeGetRequest generates requests for GetEffectEffectsCodeGet
func NewGetEffectEffectsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/effects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEventsEventsGetRequest generates requests for GetAllEventsEventsGet
func NewGetAllEventsEventsGetRequest(server string, params *GetAllEventsEventsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllActiveEventsEventsActiveGetRequest generates requests for GetAllActiveEventsEventsActiveGet
func NewGetAllActiveEventsEventsActiveGetRequest(server string, params *GetAllActiveEventsEventsActiveGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeSellHistoryGrandexchangeHistoryCodeGetRequest generates requests for GetGeSellHistoryGrandexchangeHistoryCodeGet
func NewGetGeSellHistoryGrandexchangeHistoryCodeGetRequest(server string, code string, params *GetGeSellHistoryGrandexchangeHistoryCodeGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grandexchange/history/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Seller != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seller", runtime.ParamLocationQuery, *params.Seller); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Buyer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "buyer", runtime.ParamLocationQuery, *params.Buyer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeSellOrdersGrandexchangeOrdersGetRequest generates requests for GetGeSellOrdersGrandexchangeOrdersGet
func NewGetGeSellOrdersGrandexchangeOrdersGetRequest(server string, params *GetGeSellOrdersGrandexchangeOrdersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grandexchange/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Seller != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seller", runtime.ParamLocationQuery, *params.Seller); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeSellOrderGrandexchangeOrdersIdGetRequest generates requests for GetGeSellOrderGrandexchangeOrdersIdGet
func NewGetGeSellOrderGrandexchangeOrdersIdGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grandexchange/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllItemsItemsGetRequest generates requests for GetAllItemsItemsGet
func NewGetAllItemsItemsGetRequest(server string, params *GetAllItemsItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftSkill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_skill", runtime.ParamLocationQuery, *params.CraftSkill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftMaterial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_material", runtime.ParamLocationQuery, *params.CraftMaterial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemItemsCodeGetRequest generates requests for GetItemItemsCodeGet
func NewGetItemItemsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsLeaderboardLeaderboardAccountsGetRequest generates requests for GetAccountsLeaderboardLeaderboardAccountsGet
func NewGetAccountsLeaderboardLeaderboardAccountsGetRequest(server string, params *GetAccountsLeaderboardLeaderboardAccountsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leaderboard/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCharactersLeaderboardLeaderboardCharactersGetRequest generates requests for GetCharactersLeaderboardLeaderboardCharactersGet
func NewGetCharactersLeaderboardLeaderboardCharactersGetRequest(server string, params *GetCharactersLeaderboardLeaderboardCharactersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leaderboard/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMapsMapsGetRequest generates requests for GetAllMapsMapsGet
func NewGetAllMapsMapsGetRequest(server string, params *GetAllMapsMapsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_type", runtime.ParamLocationQuery, *params.ContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_code", runtime.ParamLocationQuery, *params.ContentCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapMapsXYGetRequest generates requests for GetMapMapsXYGet
func NewGetMapMapsXYGetRequest(server string, x int, y int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMonstersMonstersGetRequest generates requests for GetAllMonstersMonstersGet
func NewGetAllMonstersMonstersGetRequest(server string, params *GetAllMonstersMonstersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonsterMonstersCodeGetRequest generates requests for GetMonsterMonstersCodeGet
func NewGetMonsterMonstersCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankDetailsMyBankGetRequest generates requests for GetBankDetailsMyBankGet
func NewGetBankDetailsMyBankGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankItemsMyBankItemsGetRequest generates requests for GetBankItemsMyBankItemsGet
func NewGetBankItemsMyBankItemsGetRequest(server string, params *GetBankItemsMyBankItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ItemCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item_code", runtime.ParamLocationQuery, *params.ItemCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangePasswordMyChangePasswordPostRequest calls the generic ChangePasswordMyChangePasswordPost builder with application/json body
func NewChangePasswordMyChangePasswordPostRequest(server string, body ChangePasswordMyChangePasswordPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordMyChangePasswordPostRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordMyChangePasswordPostRequestWithBody generates requests for ChangePasswordMyChangePasswordPost with any type of body
func NewChangePasswordMyChangePasswordPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/change_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyCharactersMyCharactersGetRequest generates requests for GetMyCharactersMyCharactersGet
func NewGetMyCharactersMyCharactersGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountDetailsMyDetailsGetRequest generates requests for GetAccountDetailsMyDetailsGet
func NewGetAccountDetailsMyDetailsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeSellHistoryMyGrandexchangeHistoryGetRequest generates requests for GetGeSellHistoryMyGrandexchangeHistoryGet
func NewGetGeSellHistoryMyGrandexchangeHistoryGetRequest(server string, params *GetGeSellHistoryMyGrandexchangeHistoryGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/grandexchange/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeSellOrdersMyGrandexchangeOrdersGetRequest generates requests for GetGeSellOrdersMyGrandexchangeOrdersGet
func NewGetGeSellOrdersMyGrandexchangeOrdersGetRequest(server string, params *GetGeSellOrdersMyGrandexchangeOrdersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/grandexchange/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCharactersLogsMyLogsGetRequest generates requests for GetAllCharactersLogsMyLogsGet
func NewGetAllCharactersLogsMyLogsGetRequest(server string, params *GetAllCharactersLogsMyLogsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionBuyBankExpansionMyNameActionBankBuyExpansionPostRequest generates requests for ActionBuyBankExpansionMyNameActionBankBuyExpansionPost
func NewActionBuyBankExpansionMyNameActionBankBuyExpansionPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/buy_expansion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionDepositBankMyNameActionBankDepositPostRequest calls the generic ActionDepositBankMyNameActionBankDepositPost builder with application/json body
func NewActionDepositBankMyNameActionBankDepositPostRequest(server string, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDepositBankMyNameActionBankDepositPostRequestWithBody generates requests for ActionDepositBankMyNameActionBankDepositPost with any type of body
func NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest calls the generic ActionDepositBankGoldMyNameActionBankDepositGoldPost builder with application/json body
func NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest(server string, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody generates requests for ActionDepositBankGoldMyNameActionBankDepositGoldPost with any type of body
func NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionWithdrawBankMyNameActionBankWithdrawPostRequest calls the generic ActionWithdrawBankMyNameActionBankWithdrawPost builder with application/json body
func NewActionWithdrawBankMyNameActionBankWithdrawPostRequest(server string, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody generates requests for ActionWithdrawBankMyNameActionBankWithdrawPost with any type of body
func NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest calls the generic ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost builder with application/json body
func NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest(server string, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody generates requests for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost with any type of body
func NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionCraftingMyNameActionCraftingPostRequest calls the generic ActionCraftingMyNameActionCraftingPost builder with application/json body
func NewActionCraftingMyNameActionCraftingPostRequest(server string, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionCraftingMyNameActionCraftingPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionCraftingMyNameActionCraftingPostRequestWithBody generates requests for ActionCraftingMyNameActionCraftingPost with any type of body
func NewActionCraftingMyNameActionCraftingPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/crafting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionDeleteItemMyNameActionDeletePostRequest calls the generic ActionDeleteItemMyNameActionDeletePost builder with application/json body
func NewActionDeleteItemMyNameActionDeletePostRequest(server string, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDeleteItemMyNameActionDeletePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDeleteItemMyNameActionDeletePostRequestWithBody generates requests for ActionDeleteItemMyNameActionDeletePost with any type of body
func NewActionDeleteItemMyNameActionDeletePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionEquipItemMyNameActionEquipPostRequest calls the generic ActionEquipItemMyNameActionEquipPost builder with application/json body
func NewActionEquipItemMyNameActionEquipPostRequest(server string, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionEquipItemMyNameActionEquipPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionEquipItemMyNameActionEquipPostRequestWithBody generates requests for ActionEquipItemMyNameActionEquipPost with any type of body
func NewActionEquipItemMyNameActionEquipPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/equip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionFightMyNameActionFightPostRequest generates requests for ActionFightMyNameActionFightPost
func NewActionFightMyNameActionFightPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/fight", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionGatheringMyNameActionGatheringPostRequest generates requests for ActionGatheringMyNameActionGatheringPost
func NewActionGatheringMyNameActionGatheringPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/gathering", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequest calls the generic ActionGeBuyItemMyNameActionGrandexchangeBuyPost builder with application/json body
func NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequest(server string, name string, body ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequestWithBody generates requests for ActionGeBuyItemMyNameActionGrandexchangeBuyPost with any type of body
func NewActionGeBuyItemMyNameActionGrandexchangeBuyPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/grandexchange/buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequest calls the generic ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost builder with application/json body
func NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequest(server string, name string, body ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequestWithBody generates requests for ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost with any type of body
func NewActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/grandexchange/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequest calls the generic ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost builder with application/json body
func NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequest(server string, name string, body ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequestWithBody generates requests for ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost with any type of body
func NewActionGeCreateSellOrderMyNameActionGrandexchangeSellPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/grandexchange/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionMoveMyNameActionMovePostRequest calls the generic ActionMoveMyNameActionMovePost builder with application/json body
func NewActionMoveMyNameActionMovePostRequest(server string, name string, body ActionMoveMyNameActionMovePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionMoveMyNameActionMovePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionMoveMyNameActionMovePostRequestWithBody generates requests for ActionMoveMyNameActionMovePost with any type of body
func NewActionMoveMyNameActionMovePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionNpcBuyItemMyNameActionNpcBuyPostRequest calls the generic ActionNpcBuyItemMyNameActionNpcBuyPost builder with application/json body
func NewActionNpcBuyItemMyNameActionNpcBuyPostRequest(server string, name string, body ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionNpcBuyItemMyNameActionNpcBuyPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionNpcBuyItemMyNameActionNpcBuyPostRequestWithBody generates requests for ActionNpcBuyItemMyNameActionNpcBuyPost with any type of body
func NewActionNpcBuyItemMyNameActionNpcBuyPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/npc/buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionNpcSellItemMyNameActionNpcSellPostRequest calls the generic ActionNpcSellItemMyNameActionNpcSellPost builder with application/json body
func NewActionNpcSellItemMyNameActionNpcSellPostRequest(server string, name string, body ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionNpcSellItemMyNameActionNpcSellPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionNpcSellItemMyNameActionNpcSellPostRequestWithBody generates requests for ActionNpcSellItemMyNameActionNpcSellPost with any type of body
func NewActionNpcSellItemMyNameActionNpcSellPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/npc/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionRecyclingMyNameActionRecyclingPostRequest calls the generic ActionRecyclingMyNameActionRecyclingPost builder with application/json body
func NewActionRecyclingMyNameActionRecyclingPostRequest(server string, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionRecyclingMyNameActionRecyclingPostRequestWithBody generates requests for ActionRecyclingMyNameActionRecyclingPost with any type of body
func NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/recycling", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionRestMyNameActionRestPostRequest generates requests for ActionRestMyNameActionRestPost
func NewActionRestMyNameActionRestPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/rest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionTaskCancelMyNameActionTaskCancelPostRequest generates requests for ActionTaskCancelMyNameActionTaskCancelPost
func NewActionTaskCancelMyNameActionTaskCancelPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionCompleteTaskMyNameActionTaskCompletePostRequest generates requests for ActionCompleteTaskMyNameActionTaskCompletePost
func NewActionCompleteTaskMyNameActionTaskCompletePostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionTaskExchangeMyNameActionTaskExchangePostRequest generates requests for ActionTaskExchangeMyNameActionTaskExchangePost
func NewActionTaskExchangeMyNameActionTaskExchangePostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/exchange", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionAcceptNewTaskMyNameActionTaskNewPostRequest generates requests for ActionAcceptNewTaskMyNameActionTaskNewPost
func NewActionAcceptNewTaskMyNameActionTaskNewPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/new", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionTaskTradeMyNameActionTaskTradePostRequest calls the generic ActionTaskTradeMyNameActionTaskTradePost builder with application/json body
func NewActionTaskTradeMyNameActionTaskTradePostRequest(server string, name string, body ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionTaskTradeMyNameActionTaskTradePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionTaskTradeMyNameActionTaskTradePostRequestWithBody generates requests for ActionTaskTradeMyNameActionTaskTradePost with any type of body
func NewActionTaskTradeMyNameActionTaskTradePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/trade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionUnequipItemMyNameActionUnequipPostRequest calls the generic ActionUnequipItemMyNameActionUnequipPost builder with application/json body
func NewActionUnequipItemMyNameActionUnequipPostRequest(server string, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionUnequipItemMyNameActionUnequipPostRequestWithBody generates requests for ActionUnequipItemMyNameActionUnequipPost with any type of body
func NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/unequip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionUseItemMyNameActionUsePostRequest calls the generic ActionUseItemMyNameActionUsePost builder with application/json body
func NewActionUseItemMyNameActionUsePostRequest(server string, name string, body ActionUseItemMyNameActionUsePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionUseItemMyNameActionUsePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionUseItemMyNameActionUsePostRequestWithBody generates requests for ActionUseItemMyNameActionUsePost with any type of body
func NewActionUseItemMyNameActionUsePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/use", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllNpcsNpcsGetRequest generates requests for GetAllNpcsNpcsGet
func NewGetAllNpcsNpcsGetRequest(server string, params *GetAllNpcsNpcsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/npcs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNpcNpcsCodeGetRequest generates requests for GetNpcNpcsCodeGet
func NewGetNpcNpcsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/npcs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNpcItemsNpcsCodeItemsGetRequest generates requests for GetNpcItemsNpcsCodeItemsGet
func NewGetNpcItemsNpcsCodeItemsGetRequest(server string, code string, params *GetNpcItemsNpcsCodeItemsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/npcs/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllResourcesResourcesGetRequest generates requests for GetAllResourcesResourcesGet
func NewGetAllResourcesResourcesGetRequest(server string, params *GetAllResourcesResourcesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skill", runtime.ParamLocationQuery, *params.Skill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceResourcesCodeGetRequest generates requests for GetResourceResourcesCodeGet
func NewGetResourceResourcesCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTasksTasksListGetRequest generates requests for GetAllTasksTasksListGet
func NewGetAllTasksTasksListGetRequest(server string, params *GetAllTasksTasksListGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skill", runtime.ParamLocationQuery, *params.Skill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskTasksListCodeGetRequest generates requests for GetTaskTasksListCodeGet
func NewGetTaskTasksListCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/list/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllTasksRewardsTasksRewardsGetRequest generates requests for GetAllTasksRewardsTasksRewardsGet
func NewGetAllTasksRewardsTasksRewardsGetRequest(server string, params *GetAllTasksRewardsTasksRewardsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/rewards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTasksRewardTasksRewardsCodeGetRequest generates requests for GetTasksRewardTasksRewardsCodeGet
func NewGetTasksRewardTasksRewardsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/rewards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateTokenTokenPostRequest generates requests for GenerateTokenTokenPost
func NewGenerateTokenTokenPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStatusGetWithResponse request
	GetStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusGetResponse, error)

	// CreateAccountAccountsCreatePostWithBodyWithResponse request with any body
	CreateAccountAccountsCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error)

	CreateAccountAccountsCreatePostWithResponse(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error)

	// GetAccountAccountsAccountGetWithResponse request
	GetAccountAccountsAccountGetWithResponse(ctx context.Context, account string, reqEditors ...RequestEditorFn) (*GetAccountAccountsAccountGetResponse, error)

	// GetAccountAchievementsAccountsAccountAchievementsGetWithResponse request
	GetAccountAchievementsAccountsAccountAchievementsGetWithResponse(ctx context.Context, account string, params *GetAccountAchievementsAccountsAccountAchievementsGetParams, reqEditors ...RequestEditorFn) (*GetAccountAchievementsAccountsAccountAchievementsGetResponse, error)

	// GetAllAchievementsAchievementsGetWithResponse request
	GetAllAchievementsAchievementsGetWithResponse(ctx context.Context, params *GetAllAchievementsAchievementsGetParams, reqEditors ...RequestEditorFn) (*GetAllAchievementsAchievementsGetResponse, error)

	// GetAchievementAchievementsCodeGetWithResponse request
	GetAchievementAchievementsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetAchievementAchievementsCodeGetResponse, error)

	// GetAllBadgesBadgesGetWithResponse request
	GetAllBadgesBadgesGetWithResponse(ctx context.Context, params *GetAllBadgesBadgesGetParams, reqEditors ...RequestEditorFn) (*GetAllBadgesBadgesGetResponse, error)

	// GetBadgeBadgesCodeGetWithResponse request
	GetBadgeBadgesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetBadgeBadgesCodeGetResponse, error)

	// CreateCharacterCharactersCreatePostWithBodyWithResponse request with any body
	CreateCharacterCharactersCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error)

	CreateCharacterCharactersCreatePostWithResponse(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error)

	// DeleteCharacterCharactersDeletePostWithBodyWithResponse request with any body
	DeleteCharacterCharactersDeletePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCharacterCharactersDeletePostResponse, error)

	DeleteCharacterCharactersDeletePostWithResponse(ctx context.Context, body DeleteCharacterCharactersDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCharacterCharactersDeletePostResponse, error)

	// GetCharacterCharactersNameGetWithResponse request
	GetCharacterCharactersNameGetWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterCharactersNameGetResponse, error)

	// GetAllEffectsEffectsGetWithResponse request
	GetAllEffectsEffectsGetWithResponse(ctx context.Context, params *GetAllEffectsEffectsGetParams, reqEditors ...RequestEditorFn) (*GetAllEffectsEffectsGetResponse, error)

	// GetEffectEffectsCodeGetWithResponse request
	GetEffectEffectsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetEffectEffectsCodeGetResponse, error)

	// GetAllEventsEventsGetWithResponse request
	GetAllEventsEventsGetWithResponse(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*GetAllEventsEventsGetResponse, error)

	// GetAllActiveEventsEventsActiveGetWithResponse request
	GetAllActiveEventsEventsActiveGetWithResponse(ctx context.Context, params *GetAllActiveEventsEventsActiveGetParams, reqEditors ...RequestEditorFn) (*GetAllActiveEventsEventsActiveGetResponse, error)

	// GetGeSellHistoryGrandexchangeHistoryCodeGetWithResponse request
	GetGeSellHistoryGrandexchangeHistoryCodeGetWithResponse(ctx context.Context, code string, params *GetGeSellHistoryGrandexchangeHistoryCodeGetParams, reqEditors ...RequestEditorFn) (*GetGeSellHistoryGrandexchangeHistoryCodeGetResponse, error)

	// GetGeSellOrdersGrandexchangeOrdersGetWithResponse request
	GetGeSellOrdersGrandexchangeOrdersGetWithResponse(ctx context.Context, params *GetGeSellOrdersGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*GetGeSellOrdersGrandexchangeOrdersGetResponse, error)

	// GetGeSellOrderGrandexchangeOrdersIdGetWithResponse request
	GetGeSellOrderGrandexchangeOrdersIdGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGeSellOrderGrandexchangeOrdersIdGetResponse, error)

	// GetAllItemsItemsGetWithResponse request
	GetAllItemsItemsGetWithResponse(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*GetAllItemsItemsGetResponse, error)

	// GetItemItemsCodeGetWithResponse request
	GetItemItemsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemItemsCodeGetResponse, error)

	// GetAccountsLeaderboardLeaderboardAccountsGetWithResponse request
	GetAccountsLeaderboardLeaderboardAccountsGetWithResponse(ctx context.Context, params *GetAccountsLeaderboardLeaderboardAccountsGetParams, reqEditors ...RequestEditorFn) (*GetAccountsLeaderboardLeaderboardAccountsGetResponse, error)

	// GetCharactersLeaderboardLeaderboardCharactersGetWithResponse request
	GetCharactersLeaderboardLeaderboardCharactersGetWithResponse(ctx context.Context, params *GetCharactersLeaderboardLeaderboardCharactersGetParams, reqEditors ...RequestEditorFn) (*GetCharactersLeaderboardLeaderboardCharactersGetResponse, error)

	// GetAllMapsMapsGetWithResponse request
	GetAllMapsMapsGetWithResponse(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*GetAllMapsMapsGetResponse, error)

	// GetMapMapsXYGetWithResponse request
	GetMapMapsXYGetWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapMapsXYGetResponse, error)

	// GetAllMonstersMonstersGetWithResponse request
	GetAllMonstersMonstersGetWithResponse(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*GetAllMonstersMonstersGetResponse, error)

	// GetMonsterMonstersCodeGetWithResponse request
	GetMonsterMonstersCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterMonstersCodeGetResponse, error)

	// GetBankDetailsMyBankGetWithResponse request
	GetBankDetailsMyBankGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankDetailsMyBankGetResponse, error)

	// GetBankItemsMyBankItemsGetWithResponse request
	GetBankItemsMyBankItemsGetWithResponse(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*GetBankItemsMyBankItemsGetResponse, error)

	// ChangePasswordMyChangePasswordPostWithBodyWithResponse request with any body
	ChangePasswordMyChangePasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error)

	ChangePasswordMyChangePasswordPostWithResponse(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error)

	// GetMyCharactersMyCharactersGetWithResponse request
	GetMyCharactersMyCharactersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyCharactersMyCharactersGetResponse, error)

	// GetAccountDetailsMyDetailsGetWithResponse request
	GetAccountDetailsMyDetailsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountDetailsMyDetailsGetResponse, error)

	// GetGeSellHistoryMyGrandexchangeHistoryGetWithResponse request
	GetGeSellHistoryMyGrandexchangeHistoryGetWithResponse(ctx context.Context, params *GetGeSellHistoryMyGrandexchangeHistoryGetParams, reqEditors ...RequestEditorFn) (*GetGeSellHistoryMyGrandexchangeHistoryGetResponse, error)

	// GetGeSellOrdersMyGrandexchangeOrdersGetWithResponse request
	GetGeSellOrdersMyGrandexchangeOrdersGetWithResponse(ctx context.Context, params *GetGeSellOrdersMyGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*GetGeSellOrdersMyGrandexchangeOrdersGetResponse, error)

	// GetAllCharactersLogsMyLogsGetWithResponse request
	GetAllCharactersLogsMyLogsGetWithResponse(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersLogsMyLogsGetResponse, error)

	// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostWithResponse request
	ActionBuyBankExpansionMyNameActionBankBuyExpansionPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse, error)

	// ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse request with any body
	ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error)

	ActionDepositBankMyNameActionBankDepositPostWithResponse(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error)

	// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse request with any body
	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error)

	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error)

	// ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse request with any body
	ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error)

	ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error)

	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse request with any body
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error)

	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error)

	// ActionCraftingMyNameActionCraftingPostWithBodyWithResponse request with any body
	ActionCraftingMyNameActionCraftingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error)

	ActionCraftingMyNameActionCraftingPostWithResponse(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error)

	// ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse request with any body
	ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error)

	ActionDeleteItemMyNameActionDeletePostWithResponse(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error)

	// ActionEquipItemMyNameActionEquipPostWithBodyWithResponse request with any body
	ActionEquipItemMyNameActionEquipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error)

	ActionEquipItemMyNameActionEquipPostWithResponse(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error)

	// ActionFightMyNameActionFightPostWithResponse request
	ActionFightMyNameActionFightPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionFightMyNameActionFightPostResponse, error)

	// ActionGatheringMyNameActionGatheringPostWithResponse request
	ActionGatheringMyNameActionGatheringPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionGatheringMyNameActionGatheringPostResponse, error)

	// ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBodyWithResponse request with any body
	ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, error)

	ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithResponse(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, error)

	// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBodyWithResponse request with any body
	ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, error)

	ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithResponse(ctx context.Context, name string, body ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, error)

	// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBodyWithResponse request with any body
	ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, error)

	ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithResponse(ctx context.Context, name string, body ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, error)

	// ActionMoveMyNameActionMovePostWithBodyWithResponse request with any body
	ActionMoveMyNameActionMovePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error)

	ActionMoveMyNameActionMovePostWithResponse(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error)

	// ActionNpcBuyItemMyNameActionNpcBuyPostWithBodyWithResponse request with any body
	ActionNpcBuyItemMyNameActionNpcBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionNpcBuyItemMyNameActionNpcBuyPostResponse, error)

	ActionNpcBuyItemMyNameActionNpcBuyPostWithResponse(ctx context.Context, name string, body ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionNpcBuyItemMyNameActionNpcBuyPostResponse, error)

	// ActionNpcSellItemMyNameActionNpcSellPostWithBodyWithResponse request with any body
	ActionNpcSellItemMyNameActionNpcSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionNpcSellItemMyNameActionNpcSellPostResponse, error)

	ActionNpcSellItemMyNameActionNpcSellPostWithResponse(ctx context.Context, name string, body ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionNpcSellItemMyNameActionNpcSellPostResponse, error)

	// ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse request with any body
	ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error)

	ActionRecyclingMyNameActionRecyclingPostWithResponse(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error)

	// ActionRestMyNameActionRestPostWithResponse request
	ActionRestMyNameActionRestPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionRestMyNameActionRestPostResponse, error)

	// ActionTaskCancelMyNameActionTaskCancelPostWithResponse request
	ActionTaskCancelMyNameActionTaskCancelPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskCancelMyNameActionTaskCancelPostResponse, error)

	// ActionCompleteTaskMyNameActionTaskCompletePostWithResponse request
	ActionCompleteTaskMyNameActionTaskCompletePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error)

	// ActionTaskExchangeMyNameActionTaskExchangePostWithResponse request
	ActionTaskExchangeMyNameActionTaskExchangePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error)

	// ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse request
	ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error)

	// ActionTaskTradeMyNameActionTaskTradePostWithBodyWithResponse request with any body
	ActionTaskTradeMyNameActionTaskTradePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionTaskTradeMyNameActionTaskTradePostResponse, error)

	ActionTaskTradeMyNameActionTaskTradePostWithResponse(ctx context.Context, name string, body ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionTaskTradeMyNameActionTaskTradePostResponse, error)

	// ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse request with any body
	ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error)

	ActionUnequipItemMyNameActionUnequipPostWithResponse(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error)

	// ActionUseItemMyNameActionUsePostWithBodyWithResponse request with any body
	ActionUseItemMyNameActionUsePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUseItemMyNameActionUsePostResponse, error)

	ActionUseItemMyNameActionUsePostWithResponse(ctx context.Context, name string, body ActionUseItemMyNameActionUsePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUseItemMyNameActionUsePostResponse, error)

	// GetAllNpcsNpcsGetWithResponse request
	GetAllNpcsNpcsGetWithResponse(ctx context.Context, params *GetAllNpcsNpcsGetParams, reqEditors ...RequestEditorFn) (*GetAllNpcsNpcsGetResponse, error)

	// GetNpcNpcsCodeGetWithResponse request
	GetNpcNpcsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetNpcNpcsCodeGetResponse, error)

	// GetNpcItemsNpcsCodeItemsGetWithResponse request
	GetNpcItemsNpcsCodeItemsGetWithResponse(ctx context.Context, code string, params *GetNpcItemsNpcsCodeItemsGetParams, reqEditors ...RequestEditorFn) (*GetNpcItemsNpcsCodeItemsGetResponse, error)

	// GetAllResourcesResourcesGetWithResponse request
	GetAllResourcesResourcesGetWithResponse(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResourcesGetResponse, error)

	// GetResourceResourcesCodeGetWithResponse request
	GetResourceResourcesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourceResourcesCodeGetResponse, error)

	// GetAllTasksTasksListGetWithResponse request
	GetAllTasksTasksListGetWithResponse(ctx context.Context, params *GetAllTasksTasksListGetParams, reqEditors ...RequestEditorFn) (*GetAllTasksTasksListGetResponse, error)

	// GetTaskTasksListCodeGetWithResponse request
	GetTaskTasksListCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetTaskTasksListCodeGetResponse, error)

	// GetAllTasksRewardsTasksRewardsGetWithResponse request
	GetAllTasksRewardsTasksRewardsGetWithResponse(ctx context.Context, params *GetAllTasksRewardsTasksRewardsGetParams, reqEditors ...RequestEditorFn) (*GetAllTasksRewardsTasksRewardsGetResponse, error)

	// GetTasksRewardTasksRewardsCodeGetWithResponse request
	GetTasksRewardTasksRewardsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetTasksRewardTasksRewardsCodeGetResponse, error)

	// GenerateTokenTokenPostWithResponse request
	GenerateTokenTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenTokenPostResponse, error)
}

type GetStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountAccountsCreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateAccountAccountsCreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountAccountsCreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountAccountsAccountGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountDetailsSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountAccountsAccountGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountAccountsAccountGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountAchievementsAccountsAccountAchievementsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageAccountAchievementSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountAchievementsAccountsAccountAchievementsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountAchievementsAccountsAccountAchievementsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAchievementsAchievementsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageAchievementSchema
}

// Status returns HTTPResponse.Status
func (r GetAllAchievementsAchievementsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAchievementsAchievementsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAchievementAchievementsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AchievementResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetAchievementAchievementsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAchievementAchievementsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllBadgesBadgesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageBadgeSchema
}

// Status returns HTTPResponse.Status
func (r GetAllBadgesBadgesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllBadgesBadgesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBadgeBadgesCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BadgeResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetBadgeBadgesCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBadgeBadgesCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCharacterCharactersCreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateCharacterCharactersCreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCharacterCharactersCreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCharacterCharactersDeletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r DeleteCharacterCharactersDeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCharacterCharactersDeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterCharactersNameGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetCharacterCharactersNameGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterCharactersNameGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEffectsEffectsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageEffectSchema
}

// Status returns HTTPResponse.Status
func (r GetAllEffectsEffectsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEffectsEffectsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEffectEffectsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EffectResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetEffectEffectsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEffectEffectsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEventsEventsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageEventSchema
}

// Status returns HTTPResponse.Status
func (r GetAllEventsEventsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEventsEventsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllActiveEventsEventsActiveGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageActiveEventSchema
}

// Status returns HTTPResponse.Status
func (r GetAllActiveEventsEventsActiveGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllActiveEventsEventsActiveGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeSellHistoryGrandexchangeHistoryCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGeOrderHistorySchema
}

// Status returns HTTPResponse.Status
func (r GetGeSellHistoryGrandexchangeHistoryCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeSellHistoryGrandexchangeHistoryCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeSellOrdersGrandexchangeOrdersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGEOrderSchema
}

// Status returns HTTPResponse.Status
func (r GetGeSellOrdersGrandexchangeOrdersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeSellOrdersGrandexchangeOrdersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeSellOrderGrandexchangeOrdersIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GEOrderReponseSchema
}

// Status returns HTTPResponse.Status
func (r GetGeSellOrderGrandexchangeOrdersIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeSellOrderGrandexchangeOrdersIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllItemsItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllItemsItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllItemsItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemItemsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetItemItemsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemItemsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsLeaderboardLeaderboardAccountsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageAccountLeaderboardSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountsLeaderboardLeaderboardAccountsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsLeaderboardLeaderboardAccountsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersLeaderboardLeaderboardCharactersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageCharacterLeaderboardSchema
}

// Status returns HTTPResponse.Status
func (r GetCharactersLeaderboardLeaderboardCharactersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersLeaderboardLeaderboardCharactersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMapsMapsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMapSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMapsMapsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMapsMapsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapMapsXYGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMapMapsXYGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapMapsXYGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMonstersMonstersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMonsterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMonstersMonstersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMonstersMonstersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonsterMonstersCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonsterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMonsterMonstersCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonsterMonstersCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankDetailsMyBankGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetBankDetailsMyBankGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankDetailsMyBankGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankItemsMyBankItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageSimpleItemSchema
}

// Status returns HTTPResponse.Status
func (r GetBankItemsMyBankItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankItemsMyBankItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordMyChangePasswordPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r ChangePasswordMyChangePasswordPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordMyChangePasswordPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyCharactersMyCharactersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyCharactersListSchema
}

// Status returns HTTPResponse.Status
func (r GetMyCharactersMyCharactersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyCharactersMyCharactersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountDetailsMyDetailsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyAccountDetailsSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountDetailsMyDetailsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountDetailsMyDetailsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeSellHistoryMyGrandexchangeHistoryGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGeOrderHistorySchema
}

// Status returns HTTPResponse.Status
func (r GetGeSellHistoryMyGrandexchangeHistoryGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeSellHistoryMyGrandexchangeHistoryGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeSellOrdersMyGrandexchangeOrdersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGEOrderSchema
}

// Status returns HTTPResponse.Status
func (r GetGeSellOrdersMyGrandexchangeOrdersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeSellOrdersMyGrandexchangeOrdersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCharactersLogsMyLogsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageLogSchema
}

// Status returns HTTPResponse.Status
func (r GetAllCharactersLogsMyLogsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCharactersLogsMyLogsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankExtensionTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDepositBankMyNameActionBankDepositPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankItemTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDepositBankMyNameActionBankDepositPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDepositBankMyNameActionBankDepositPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankGoldTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionWithdrawBankMyNameActionBankWithdrawPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankItemTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionWithdrawBankMyNameActionBankWithdrawPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionWithdrawBankMyNameActionBankWithdrawPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankGoldTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionCraftingMyNameActionCraftingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionCraftingMyNameActionCraftingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionCraftingMyNameActionCraftingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDeleteItemMyNameActionDeletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDeleteItemMyNameActionDeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDeleteItemMyNameActionDeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionEquipItemMyNameActionEquipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionEquipItemMyNameActionEquipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionEquipItemMyNameActionEquipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionFightMyNameActionFightPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterFightResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionFightMyNameActionFightPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionFightMyNameActionFightPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGatheringMyNameActionGatheringPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGatheringMyNameActionGatheringPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGatheringMyNameActionGatheringPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GECreateOrderTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionMoveMyNameActionMovePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterMovementResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionMoveMyNameActionMovePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionMoveMyNameActionMovePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionNpcBuyItemMyNameActionNpcBuyPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NpcMerchantTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionNpcBuyItemMyNameActionNpcBuyPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionNpcBuyItemMyNameActionNpcBuyPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionNpcSellItemMyNameActionNpcSellPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NpcMerchantTransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionNpcSellItemMyNameActionNpcSellPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionNpcSellItemMyNameActionNpcSellPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionRecyclingMyNameActionRecyclingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecyclingResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionRecyclingMyNameActionRecyclingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionRecyclingMyNameActionRecyclingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionRestMyNameActionRestPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterRestResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionRestMyNameActionRestPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionRestMyNameActionRestPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionTaskCancelMyNameActionTaskCancelPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskCancelledResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionTaskCancelMyNameActionTaskCancelPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionTaskCancelMyNameActionTaskCancelPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionCompleteTaskMyNameActionTaskCompletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RewardDataResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionCompleteTaskMyNameActionTaskCompletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionCompleteTaskMyNameActionTaskCompletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionTaskExchangeMyNameActionTaskExchangePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RewardDataResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionTaskExchangeMyNameActionTaskExchangePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionTaskExchangeMyNameActionTaskExchangePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionAcceptNewTaskMyNameActionTaskNewPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionAcceptNewTaskMyNameActionTaskNewPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionAcceptNewTaskMyNameActionTaskNewPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionTaskTradeMyNameActionTaskTradePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskTradeResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionTaskTradeMyNameActionTaskTradePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionTaskTradeMyNameActionTaskTradePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionUnequipItemMyNameActionUnequipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionUnequipItemMyNameActionUnequipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionUnequipItemMyNameActionUnequipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionUseItemMyNameActionUsePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UseItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionUseItemMyNameActionUsePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionUseItemMyNameActionUsePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllNpcsNpcsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageNPCSchema
}

// Status returns HTTPResponse.Status
func (r GetAllNpcsNpcsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllNpcsNpcsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNpcNpcsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NPCResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetNpcNpcsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNpcNpcsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNpcItemsNpcsCodeItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageNPCItem
}

// Status returns HTTPResponse.Status
func (r GetNpcItemsNpcsCodeItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNpcItemsNpcsCodeItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllResourcesResourcesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetAllResourcesResourcesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllResourcesResourcesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResourcesCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetResourceResourcesCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResourcesCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTasksTasksListGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageTaskFullSchema
}

// Status returns HTTPResponse.Status
func (r GetAllTasksTasksListGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTasksTasksListGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskTasksListCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskFullResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetTaskTasksListCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskTasksListCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTasksRewardsTasksRewardsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageDropRateSchema
}

// Status returns HTTPResponse.Status
func (r GetAllTasksRewardsTasksRewardsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTasksRewardsTasksRewardsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksRewardTasksRewardsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetTasksRewardTasksRewardsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksRewardTasksRewardsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTokenTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponseSchema
}

// Status returns HTTPResponse.Status
func (r GenerateTokenTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTokenTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStatusGetWithResponse request returning *GetStatusGetResponse
func (c *ClientWithResponses) GetStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusGetResponse, error) {
	rsp, err := c.GetStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusGetResponse(rsp)
}

// CreateAccountAccountsCreatePostWithBodyWithResponse request with arbitrary body returning *CreateAccountAccountsCreatePostResponse
func (c *ClientWithResponses) CreateAccountAccountsCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error) {
	rsp, err := c.CreateAccountAccountsCreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccountsCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountAccountsCreatePostWithResponse(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error) {
	rsp, err := c.CreateAccountAccountsCreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccountsCreatePostResponse(rsp)
}

// GetAccountAccountsAccountGetWithResponse request returning *GetAccountAccountsAccountGetResponse
func (c *ClientWithResponses) GetAccountAccountsAccountGetWithResponse(ctx context.Context, account string, reqEditors ...RequestEditorFn) (*GetAccountAccountsAccountGetResponse, error) {
	rsp, err := c.GetAccountAccountsAccountGet(ctx, account, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountAccountsAccountGetResponse(rsp)
}

// GetAccountAchievementsAccountsAccountAchievementsGetWithResponse request returning *GetAccountAchievementsAccountsAccountAchievementsGetResponse
func (c *ClientWithResponses) GetAccountAchievementsAccountsAccountAchievementsGetWithResponse(ctx context.Context, account string, params *GetAccountAchievementsAccountsAccountAchievementsGetParams, reqEditors ...RequestEditorFn) (*GetAccountAchievementsAccountsAccountAchievementsGetResponse, error) {
	rsp, err := c.GetAccountAchievementsAccountsAccountAchievementsGet(ctx, account, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountAchievementsAccountsAccountAchievementsGetResponse(rsp)
}

// GetAllAchievementsAchievementsGetWithResponse request returning *GetAllAchievementsAchievementsGetResponse
func (c *ClientWithResponses) GetAllAchievementsAchievementsGetWithResponse(ctx context.Context, params *GetAllAchievementsAchievementsGetParams, reqEditors ...RequestEditorFn) (*GetAllAchievementsAchievementsGetResponse, error) {
	rsp, err := c.GetAllAchievementsAchievementsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAchievementsAchievementsGetResponse(rsp)
}

// GetAchievementAchievementsCodeGetWithResponse request returning *GetAchievementAchievementsCodeGetResponse
func (c *ClientWithResponses) GetAchievementAchievementsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetAchievementAchievementsCodeGetResponse, error) {
	rsp, err := c.GetAchievementAchievementsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAchievementAchievementsCodeGetResponse(rsp)
}

// GetAllBadgesBadgesGetWithResponse request returning *GetAllBadgesBadgesGetResponse
func (c *ClientWithResponses) GetAllBadgesBadgesGetWithResponse(ctx context.Context, params *GetAllBadgesBadgesGetParams, reqEditors ...RequestEditorFn) (*GetAllBadgesBadgesGetResponse, error) {
	rsp, err := c.GetAllBadgesBadgesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllBadgesBadgesGetResponse(rsp)
}

// GetBadgeBadgesCodeGetWithResponse request returning *GetBadgeBadgesCodeGetResponse
func (c *ClientWithResponses) GetBadgeBadgesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetBadgeBadgesCodeGetResponse, error) {
	rsp, err := c.GetBadgeBadgesCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBadgeBadgesCodeGetResponse(rsp)
}

// CreateCharacterCharactersCreatePostWithBodyWithResponse request with arbitrary body returning *CreateCharacterCharactersCreatePostResponse
func (c *ClientWithResponses) CreateCharacterCharactersCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error) {
	rsp, err := c.CreateCharacterCharactersCreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterCharactersCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateCharacterCharactersCreatePostWithResponse(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error) {
	rsp, err := c.CreateCharacterCharactersCreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterCharactersCreatePostResponse(rsp)
}

// DeleteCharacterCharactersDeletePostWithBodyWithResponse request with arbitrary body returning *DeleteCharacterCharactersDeletePostResponse
func (c *ClientWithResponses) DeleteCharacterCharactersDeletePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCharacterCharactersDeletePostResponse, error) {
	rsp, err := c.DeleteCharacterCharactersDeletePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharacterCharactersDeletePostResponse(rsp)
}

func (c *ClientWithResponses) DeleteCharacterCharactersDeletePostWithResponse(ctx context.Context, body DeleteCharacterCharactersDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCharacterCharactersDeletePostResponse, error) {
	rsp, err := c.DeleteCharacterCharactersDeletePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCharacterCharactersDeletePostResponse(rsp)
}

// GetCharacterCharactersNameGetWithResponse request returning *GetCharacterCharactersNameGetResponse
func (c *ClientWithResponses) GetCharacterCharactersNameGetWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterCharactersNameGetResponse, error) {
	rsp, err := c.GetCharacterCharactersNameGet(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterCharactersNameGetResponse(rsp)
}

// GetAllEffectsEffectsGetWithResponse request returning *GetAllEffectsEffectsGetResponse
func (c *ClientWithResponses) GetAllEffectsEffectsGetWithResponse(ctx context.Context, params *GetAllEffectsEffectsGetParams, reqEditors ...RequestEditorFn) (*GetAllEffectsEffectsGetResponse, error) {
	rsp, err := c.GetAllEffectsEffectsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEffectsEffectsGetResponse(rsp)
}

// GetEffectEffectsCodeGetWithResponse request returning *GetEffectEffectsCodeGetResponse
func (c *ClientWithResponses) GetEffectEffectsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetEffectEffectsCodeGetResponse, error) {
	rsp, err := c.GetEffectEffectsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEffectEffectsCodeGetResponse(rsp)
}

// GetAllEventsEventsGetWithResponse request returning *GetAllEventsEventsGetResponse
func (c *ClientWithResponses) GetAllEventsEventsGetWithResponse(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*GetAllEventsEventsGetResponse, error) {
	rsp, err := c.GetAllEventsEventsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEventsEventsGetResponse(rsp)
}

// GetAllActiveEventsEventsActiveGetWithResponse request returning *GetAllActiveEventsEventsActiveGetResponse
func (c *ClientWithResponses) GetAllActiveEventsEventsActiveGetWithResponse(ctx context.Context, params *GetAllActiveEventsEventsActiveGetParams, reqEditors ...RequestEditorFn) (*GetAllActiveEventsEventsActiveGetResponse, error) {
	rsp, err := c.GetAllActiveEventsEventsActiveGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllActiveEventsEventsActiveGetResponse(rsp)
}

// GetGeSellHistoryGrandexchangeHistoryCodeGetWithResponse request returning *GetGeSellHistoryGrandexchangeHistoryCodeGetResponse
func (c *ClientWithResponses) GetGeSellHistoryGrandexchangeHistoryCodeGetWithResponse(ctx context.Context, code string, params *GetGeSellHistoryGrandexchangeHistoryCodeGetParams, reqEditors ...RequestEditorFn) (*GetGeSellHistoryGrandexchangeHistoryCodeGetResponse, error) {
	rsp, err := c.GetGeSellHistoryGrandexchangeHistoryCodeGet(ctx, code, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeSellHistoryGrandexchangeHistoryCodeGetResponse(rsp)
}

// GetGeSellOrdersGrandexchangeOrdersGetWithResponse request returning *GetGeSellOrdersGrandexchangeOrdersGetResponse
func (c *ClientWithResponses) GetGeSellOrdersGrandexchangeOrdersGetWithResponse(ctx context.Context, params *GetGeSellOrdersGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*GetGeSellOrdersGrandexchangeOrdersGetResponse, error) {
	rsp, err := c.GetGeSellOrdersGrandexchangeOrdersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeSellOrdersGrandexchangeOrdersGetResponse(rsp)
}

// GetGeSellOrderGrandexchangeOrdersIdGetWithResponse request returning *GetGeSellOrderGrandexchangeOrdersIdGetResponse
func (c *ClientWithResponses) GetGeSellOrderGrandexchangeOrdersIdGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGeSellOrderGrandexchangeOrdersIdGetResponse, error) {
	rsp, err := c.GetGeSellOrderGrandexchangeOrdersIdGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeSellOrderGrandexchangeOrdersIdGetResponse(rsp)
}

// GetAllItemsItemsGetWithResponse request returning *GetAllItemsItemsGetResponse
func (c *ClientWithResponses) GetAllItemsItemsGetWithResponse(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*GetAllItemsItemsGetResponse, error) {
	rsp, err := c.GetAllItemsItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllItemsItemsGetResponse(rsp)
}

// GetItemItemsCodeGetWithResponse request returning *GetItemItemsCodeGetResponse
func (c *ClientWithResponses) GetItemItemsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemItemsCodeGetResponse, error) {
	rsp, err := c.GetItemItemsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemItemsCodeGetResponse(rsp)
}

// GetAccountsLeaderboardLeaderboardAccountsGetWithResponse request returning *GetAccountsLeaderboardLeaderboardAccountsGetResponse
func (c *ClientWithResponses) GetAccountsLeaderboardLeaderboardAccountsGetWithResponse(ctx context.Context, params *GetAccountsLeaderboardLeaderboardAccountsGetParams, reqEditors ...RequestEditorFn) (*GetAccountsLeaderboardLeaderboardAccountsGetResponse, error) {
	rsp, err := c.GetAccountsLeaderboardLeaderboardAccountsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsLeaderboardLeaderboardAccountsGetResponse(rsp)
}

// GetCharactersLeaderboardLeaderboardCharactersGetWithResponse request returning *GetCharactersLeaderboardLeaderboardCharactersGetResponse
func (c *ClientWithResponses) GetCharactersLeaderboardLeaderboardCharactersGetWithResponse(ctx context.Context, params *GetCharactersLeaderboardLeaderboardCharactersGetParams, reqEditors ...RequestEditorFn) (*GetCharactersLeaderboardLeaderboardCharactersGetResponse, error) {
	rsp, err := c.GetCharactersLeaderboardLeaderboardCharactersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersLeaderboardLeaderboardCharactersGetResponse(rsp)
}

// GetAllMapsMapsGetWithResponse request returning *GetAllMapsMapsGetResponse
func (c *ClientWithResponses) GetAllMapsMapsGetWithResponse(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*GetAllMapsMapsGetResponse, error) {
	rsp, err := c.GetAllMapsMapsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMapsMapsGetResponse(rsp)
}

// GetMapMapsXYGetWithResponse request returning *GetMapMapsXYGetResponse
func (c *ClientWithResponses) GetMapMapsXYGetWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapMapsXYGetResponse, error) {
	rsp, err := c.GetMapMapsXYGet(ctx, x, y, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapMapsXYGetResponse(rsp)
}

// GetAllMonstersMonstersGetWithResponse request returning *GetAllMonstersMonstersGetResponse
func (c *ClientWithResponses) GetAllMonstersMonstersGetWithResponse(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*GetAllMonstersMonstersGetResponse, error) {
	rsp, err := c.GetAllMonstersMonstersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMonstersMonstersGetResponse(rsp)
}

// GetMonsterMonstersCodeGetWithResponse request returning *GetMonsterMonstersCodeGetResponse
func (c *ClientWithResponses) GetMonsterMonstersCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterMonstersCodeGetResponse, error) {
	rsp, err := c.GetMonsterMonstersCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonsterMonstersCodeGetResponse(rsp)
}

// GetBankDetailsMyBankGetWithResponse request returning *GetBankDetailsMyBankGetResponse
func (c *ClientWithResponses) GetBankDetailsMyBankGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankDetailsMyBankGetResponse, error) {
	rsp, err := c.GetBankDetailsMyBankGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankDetailsMyBankGetResponse(rsp)
}

// GetBankItemsMyBankItemsGetWithResponse request returning *GetBankItemsMyBankItemsGetResponse
func (c *ClientWithResponses) GetBankItemsMyBankItemsGetWithResponse(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*GetBankItemsMyBankItemsGetResponse, error) {
	rsp, err := c.GetBankItemsMyBankItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankItemsMyBankItemsGetResponse(rsp)
}

// ChangePasswordMyChangePasswordPostWithBodyWithResponse request with arbitrary body returning *ChangePasswordMyChangePasswordPostResponse
func (c *ClientWithResponses) ChangePasswordMyChangePasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error) {
	rsp, err := c.ChangePasswordMyChangePasswordPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordMyChangePasswordPostResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordMyChangePasswordPostWithResponse(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error) {
	rsp, err := c.ChangePasswordMyChangePasswordPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordMyChangePasswordPostResponse(rsp)
}

// GetMyCharactersMyCharactersGetWithResponse request returning *GetMyCharactersMyCharactersGetResponse
func (c *ClientWithResponses) GetMyCharactersMyCharactersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyCharactersMyCharactersGetResponse, error) {
	rsp, err := c.GetMyCharactersMyCharactersGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyCharactersMyCharactersGetResponse(rsp)
}

// GetAccountDetailsMyDetailsGetWithResponse request returning *GetAccountDetailsMyDetailsGetResponse
func (c *ClientWithResponses) GetAccountDetailsMyDetailsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountDetailsMyDetailsGetResponse, error) {
	rsp, err := c.GetAccountDetailsMyDetailsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountDetailsMyDetailsGetResponse(rsp)
}

// GetGeSellHistoryMyGrandexchangeHistoryGetWithResponse request returning *GetGeSellHistoryMyGrandexchangeHistoryGetResponse
func (c *ClientWithResponses) GetGeSellHistoryMyGrandexchangeHistoryGetWithResponse(ctx context.Context, params *GetGeSellHistoryMyGrandexchangeHistoryGetParams, reqEditors ...RequestEditorFn) (*GetGeSellHistoryMyGrandexchangeHistoryGetResponse, error) {
	rsp, err := c.GetGeSellHistoryMyGrandexchangeHistoryGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeSellHistoryMyGrandexchangeHistoryGetResponse(rsp)
}

// GetGeSellOrdersMyGrandexchangeOrdersGetWithResponse request returning *GetGeSellOrdersMyGrandexchangeOrdersGetResponse
func (c *ClientWithResponses) GetGeSellOrdersMyGrandexchangeOrdersGetWithResponse(ctx context.Context, params *GetGeSellOrdersMyGrandexchangeOrdersGetParams, reqEditors ...RequestEditorFn) (*GetGeSellOrdersMyGrandexchangeOrdersGetResponse, error) {
	rsp, err := c.GetGeSellOrdersMyGrandexchangeOrdersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeSellOrdersMyGrandexchangeOrdersGetResponse(rsp)
}

// GetAllCharactersLogsMyLogsGetWithResponse request returning *GetAllCharactersLogsMyLogsGetResponse
func (c *ClientWithResponses) GetAllCharactersLogsMyLogsGetWithResponse(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersLogsMyLogsGetResponse, error) {
	rsp, err := c.GetAllCharactersLogsMyLogsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCharactersLogsMyLogsGetResponse(rsp)
}

// ActionBuyBankExpansionMyNameActionBankBuyExpansionPostWithResponse request returning *ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse
func (c *ClientWithResponses) ActionBuyBankExpansionMyNameActionBankBuyExpansionPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse, error) {
	rsp, err := c.ActionBuyBankExpansionMyNameActionBankBuyExpansionPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse(rsp)
}

// ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse request with arbitrary body returning *ActionDepositBankMyNameActionBankDepositPostResponse
func (c *ClientWithResponses) ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	rsp, err := c.ActionDepositBankMyNameActionBankDepositPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp)
}

func (c *ClientWithResponses) ActionDepositBankMyNameActionBankDepositPostWithResponse(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	rsp, err := c.ActionDepositBankMyNameActionBankDepositPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp)
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse request with arbitrary body returning *ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse
func (c *ClientWithResponses) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	rsp, err := c.ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp)
}

func (c *ClientWithResponses) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	rsp, err := c.ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp)
}

// ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse request with arbitrary body returning *ActionWithdrawBankMyNameActionBankWithdrawPostResponse
func (c *ClientWithResponses) ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	rsp, err := c.ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp)
}

func (c *ClientWithResponses) ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	rsp, err := c.ActionWithdrawBankMyNameActionBankWithdrawPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp)
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse request with arbitrary body returning *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse
func (c *ClientWithResponses) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	rsp, err := c.ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp)
}

func (c *ClientWithResponses) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	rsp, err := c.ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp)
}

// ActionCraftingMyNameActionCraftingPostWithBodyWithResponse request with arbitrary body returning *ActionCraftingMyNameActionCraftingPostResponse
func (c *ClientWithResponses) ActionCraftingMyNameActionCraftingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	rsp, err := c.ActionCraftingMyNameActionCraftingPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCraftingMyNameActionCraftingPostResponse(rsp)
}

func (c *ClientWithResponses) ActionCraftingMyNameActionCraftingPostWithResponse(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	rsp, err := c.ActionCraftingMyNameActionCraftingPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCraftingMyNameActionCraftingPostResponse(rsp)
}

// ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse request with arbitrary body returning *ActionDeleteItemMyNameActionDeletePostResponse
func (c *ClientWithResponses) ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	rsp, err := c.ActionDeleteItemMyNameActionDeletePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDeleteItemMyNameActionDeletePostResponse(rsp)
}

func (c *ClientWithResponses) ActionDeleteItemMyNameActionDeletePostWithResponse(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	rsp, err := c.ActionDeleteItemMyNameActionDeletePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDeleteItemMyNameActionDeletePostResponse(rsp)
}

// ActionEquipItemMyNameActionEquipPostWithBodyWithResponse request with arbitrary body returning *ActionEquipItemMyNameActionEquipPostResponse
func (c *ClientWithResponses) ActionEquipItemMyNameActionEquipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	rsp, err := c.ActionEquipItemMyNameActionEquipPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionEquipItemMyNameActionEquipPostResponse(rsp)
}

func (c *ClientWithResponses) ActionEquipItemMyNameActionEquipPostWithResponse(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	rsp, err := c.ActionEquipItemMyNameActionEquipPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionEquipItemMyNameActionEquipPostResponse(rsp)
}

// ActionFightMyNameActionFightPostWithResponse request returning *ActionFightMyNameActionFightPostResponse
func (c *ClientWithResponses) ActionFightMyNameActionFightPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionFightMyNameActionFightPostResponse, error) {
	rsp, err := c.ActionFightMyNameActionFightPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionFightMyNameActionFightPostResponse(rsp)
}

// ActionGatheringMyNameActionGatheringPostWithResponse request returning *ActionGatheringMyNameActionGatheringPostResponse
func (c *ClientWithResponses) ActionGatheringMyNameActionGatheringPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionGatheringMyNameActionGatheringPostResponse, error) {
	rsp, err := c.ActionGatheringMyNameActionGatheringPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGatheringMyNameActionGatheringPostResponse(rsp)
}

// ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBodyWithResponse request with arbitrary body returning *ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse
func (c *ClientWithResponses) ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, error) {
	rsp, err := c.ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithResponse(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGrandexchangeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, error) {
	rsp, err := c.ActionGeBuyItemMyNameActionGrandexchangeBuyPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse(rsp)
}

// ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBodyWithResponse request with arbitrary body returning *ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse
func (c *ClientWithResponses) ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, error) {
	rsp, err := c.ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithResponse(ctx context.Context, name string, body ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, error) {
	rsp, err := c.ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse(rsp)
}

// ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBodyWithResponse request with arbitrary body returning *ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse
func (c *ClientWithResponses) ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, error) {
	rsp, err := c.ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithResponse(ctx context.Context, name string, body ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, error) {
	rsp, err := c.ActionGeCreateSellOrderMyNameActionGrandexchangeSellPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse(rsp)
}

// ActionMoveMyNameActionMovePostWithBodyWithResponse request with arbitrary body returning *ActionMoveMyNameActionMovePostResponse
func (c *ClientWithResponses) ActionMoveMyNameActionMovePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error) {
	rsp, err := c.ActionMoveMyNameActionMovePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionMoveMyNameActionMovePostResponse(rsp)
}

func (c *ClientWithResponses) ActionMoveMyNameActionMovePostWithResponse(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error) {
	rsp, err := c.ActionMoveMyNameActionMovePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionMoveMyNameActionMovePostResponse(rsp)
}

// ActionNpcBuyItemMyNameActionNpcBuyPostWithBodyWithResponse request with arbitrary body returning *ActionNpcBuyItemMyNameActionNpcBuyPostResponse
func (c *ClientWithResponses) ActionNpcBuyItemMyNameActionNpcBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionNpcBuyItemMyNameActionNpcBuyPostResponse, error) {
	rsp, err := c.ActionNpcBuyItemMyNameActionNpcBuyPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionNpcBuyItemMyNameActionNpcBuyPostResponse(rsp)
}

func (c *ClientWithResponses) ActionNpcBuyItemMyNameActionNpcBuyPostWithResponse(ctx context.Context, name string, body ActionNpcBuyItemMyNameActionNpcBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionNpcBuyItemMyNameActionNpcBuyPostResponse, error) {
	rsp, err := c.ActionNpcBuyItemMyNameActionNpcBuyPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionNpcBuyItemMyNameActionNpcBuyPostResponse(rsp)
}

// ActionNpcSellItemMyNameActionNpcSellPostWithBodyWithResponse request with arbitrary body returning *ActionNpcSellItemMyNameActionNpcSellPostResponse
func (c *ClientWithResponses) ActionNpcSellItemMyNameActionNpcSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionNpcSellItemMyNameActionNpcSellPostResponse, error) {
	rsp, err := c.ActionNpcSellItemMyNameActionNpcSellPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionNpcSellItemMyNameActionNpcSellPostResponse(rsp)
}

func (c *ClientWithResponses) ActionNpcSellItemMyNameActionNpcSellPostWithResponse(ctx context.Context, name string, body ActionNpcSellItemMyNameActionNpcSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionNpcSellItemMyNameActionNpcSellPostResponse, error) {
	rsp, err := c.ActionNpcSellItemMyNameActionNpcSellPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionNpcSellItemMyNameActionNpcSellPostResponse(rsp)
}

// ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse request with arbitrary body returning *ActionRecyclingMyNameActionRecyclingPostResponse
func (c *ClientWithResponses) ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	rsp, err := c.ActionRecyclingMyNameActionRecyclingPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp)
}

func (c *ClientWithResponses) ActionRecyclingMyNameActionRecyclingPostWithResponse(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	rsp, err := c.ActionRecyclingMyNameActionRecyclingPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp)
}

// ActionRestMyNameActionRestPostWithResponse request returning *ActionRestMyNameActionRestPostResponse
func (c *ClientWithResponses) ActionRestMyNameActionRestPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionRestMyNameActionRestPostResponse, error) {
	rsp, err := c.ActionRestMyNameActionRestPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRestMyNameActionRestPostResponse(rsp)
}

// ActionTaskCancelMyNameActionTaskCancelPostWithResponse request returning *ActionTaskCancelMyNameActionTaskCancelPostResponse
func (c *ClientWithResponses) ActionTaskCancelMyNameActionTaskCancelPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskCancelMyNameActionTaskCancelPostResponse, error) {
	rsp, err := c.ActionTaskCancelMyNameActionTaskCancelPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionTaskCancelMyNameActionTaskCancelPostResponse(rsp)
}

// ActionCompleteTaskMyNameActionTaskCompletePostWithResponse request returning *ActionCompleteTaskMyNameActionTaskCompletePostResponse
func (c *ClientWithResponses) ActionCompleteTaskMyNameActionTaskCompletePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error) {
	rsp, err := c.ActionCompleteTaskMyNameActionTaskCompletePost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCompleteTaskMyNameActionTaskCompletePostResponse(rsp)
}

// ActionTaskExchangeMyNameActionTaskExchangePostWithResponse request returning *ActionTaskExchangeMyNameActionTaskExchangePostResponse
func (c *ClientWithResponses) ActionTaskExchangeMyNameActionTaskExchangePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error) {
	rsp, err := c.ActionTaskExchangeMyNameActionTaskExchangePost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionTaskExchangeMyNameActionTaskExchangePostResponse(rsp)
}

// ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse request returning *ActionAcceptNewTaskMyNameActionTaskNewPostResponse
func (c *ClientWithResponses) ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error) {
	rsp, err := c.ActionAcceptNewTaskMyNameActionTaskNewPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse(rsp)
}

// ActionTaskTradeMyNameActionTaskTradePostWithBodyWithResponse request with arbitrary body returning *ActionTaskTradeMyNameActionTaskTradePostResponse
func (c *ClientWithResponses) ActionTaskTradeMyNameActionTaskTradePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionTaskTradeMyNameActionTaskTradePostResponse, error) {
	rsp, err := c.ActionTaskTradeMyNameActionTaskTradePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionTaskTradeMyNameActionTaskTradePostResponse(rsp)
}

func (c *ClientWithResponses) ActionTaskTradeMyNameActionTaskTradePostWithResponse(ctx context.Context, name string, body ActionTaskTradeMyNameActionTaskTradePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionTaskTradeMyNameActionTaskTradePostResponse, error) {
	rsp, err := c.ActionTaskTradeMyNameActionTaskTradePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionTaskTradeMyNameActionTaskTradePostResponse(rsp)
}

// ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse request with arbitrary body returning *ActionUnequipItemMyNameActionUnequipPostResponse
func (c *ClientWithResponses) ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	rsp, err := c.ActionUnequipItemMyNameActionUnequipPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp)
}

func (c *ClientWithResponses) ActionUnequipItemMyNameActionUnequipPostWithResponse(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	rsp, err := c.ActionUnequipItemMyNameActionUnequipPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp)
}

// ActionUseItemMyNameActionUsePostWithBodyWithResponse request with arbitrary body returning *ActionUseItemMyNameActionUsePostResponse
func (c *ClientWithResponses) ActionUseItemMyNameActionUsePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUseItemMyNameActionUsePostResponse, error) {
	rsp, err := c.ActionUseItemMyNameActionUsePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUseItemMyNameActionUsePostResponse(rsp)
}

func (c *ClientWithResponses) ActionUseItemMyNameActionUsePostWithResponse(ctx context.Context, name string, body ActionUseItemMyNameActionUsePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUseItemMyNameActionUsePostResponse, error) {
	rsp, err := c.ActionUseItemMyNameActionUsePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUseItemMyNameActionUsePostResponse(rsp)
}

// GetAllNpcsNpcsGetWithResponse request returning *GetAllNpcsNpcsGetResponse
func (c *ClientWithResponses) GetAllNpcsNpcsGetWithResponse(ctx context.Context, params *GetAllNpcsNpcsGetParams, reqEditors ...RequestEditorFn) (*GetAllNpcsNpcsGetResponse, error) {
	rsp, err := c.GetAllNpcsNpcsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllNpcsNpcsGetResponse(rsp)
}

// GetNpcNpcsCodeGetWithResponse request returning *GetNpcNpcsCodeGetResponse
func (c *ClientWithResponses) GetNpcNpcsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetNpcNpcsCodeGetResponse, error) {
	rsp, err := c.GetNpcNpcsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNpcNpcsCodeGetResponse(rsp)
}

// GetNpcItemsNpcsCodeItemsGetWithResponse request returning *GetNpcItemsNpcsCodeItemsGetResponse
func (c *ClientWithResponses) GetNpcItemsNpcsCodeItemsGetWithResponse(ctx context.Context, code string, params *GetNpcItemsNpcsCodeItemsGetParams, reqEditors ...RequestEditorFn) (*GetNpcItemsNpcsCodeItemsGetResponse, error) {
	rsp, err := c.GetNpcItemsNpcsCodeItemsGet(ctx, code, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNpcItemsNpcsCodeItemsGetResponse(rsp)
}

// GetAllResourcesResourcesGetWithResponse request returning *GetAllResourcesResourcesGetResponse
func (c *ClientWithResponses) GetAllResourcesResourcesGetWithResponse(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResourcesGetResponse, error) {
	rsp, err := c.GetAllResourcesResourcesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllResourcesResourcesGetResponse(rsp)
}

// GetResourceResourcesCodeGetWithResponse request returning *GetResourceResourcesCodeGetResponse
func (c *ClientWithResponses) GetResourceResourcesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourceResourcesCodeGetResponse, error) {
	rsp, err := c.GetResourceResourcesCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResourcesCodeGetResponse(rsp)
}

// GetAllTasksTasksListGetWithResponse request returning *GetAllTasksTasksListGetResponse
func (c *ClientWithResponses) GetAllTasksTasksListGetWithResponse(ctx context.Context, params *GetAllTasksTasksListGetParams, reqEditors ...RequestEditorFn) (*GetAllTasksTasksListGetResponse, error) {
	rsp, err := c.GetAllTasksTasksListGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTasksTasksListGetResponse(rsp)
}

// GetTaskTasksListCodeGetWithResponse request returning *GetTaskTasksListCodeGetResponse
func (c *ClientWithResponses) GetTaskTasksListCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetTaskTasksListCodeGetResponse, error) {
	rsp, err := c.GetTaskTasksListCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskTasksListCodeGetResponse(rsp)
}

// GetAllTasksRewardsTasksRewardsGetWithResponse request returning *GetAllTasksRewardsTasksRewardsGetResponse
func (c *ClientWithResponses) GetAllTasksRewardsTasksRewardsGetWithResponse(ctx context.Context, params *GetAllTasksRewardsTasksRewardsGetParams, reqEditors ...RequestEditorFn) (*GetAllTasksRewardsTasksRewardsGetResponse, error) {
	rsp, err := c.GetAllTasksRewardsTasksRewardsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTasksRewardsTasksRewardsGetResponse(rsp)
}

// GetTasksRewardTasksRewardsCodeGetWithResponse request returning *GetTasksRewardTasksRewardsCodeGetResponse
func (c *ClientWithResponses) GetTasksRewardTasksRewardsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetTasksRewardTasksRewardsCodeGetResponse, error) {
	rsp, err := c.GetTasksRewardTasksRewardsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksRewardTasksRewardsCodeGetResponse(rsp)
}

// GenerateTokenTokenPostWithResponse request returning *GenerateTokenTokenPostResponse
func (c *ClientWithResponses) GenerateTokenTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenTokenPostResponse, error) {
	rsp, err := c.GenerateTokenTokenPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTokenTokenPostResponse(rsp)
}

// ParseGetStatusGetResponse parses an HTTP response from a GetStatusGetWithResponse call
func ParseGetStatusGetResponse(rsp *http.Response) (*GetStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountAccountsCreatePostResponse parses an HTTP response from a CreateAccountAccountsCreatePostWithResponse call
func ParseCreateAccountAccountsCreatePostResponse(rsp *http.Response) (*CreateAccountAccountsCreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountAccountsCreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountAccountsAccountGetResponse parses an HTTP response from a GetAccountAccountsAccountGetWithResponse call
func ParseGetAccountAccountsAccountGetResponse(rsp *http.Response) (*GetAccountAccountsAccountGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountAccountsAccountGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountDetailsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountAchievementsAccountsAccountAchievementsGetResponse parses an HTTP response from a GetAccountAchievementsAccountsAccountAchievementsGetWithResponse call
func ParseGetAccountAchievementsAccountsAccountAchievementsGetResponse(rsp *http.Response) (*GetAccountAchievementsAccountsAccountAchievementsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountAchievementsAccountsAccountAchievementsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageAccountAchievementSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllAchievementsAchievementsGetResponse parses an HTTP response from a GetAllAchievementsAchievementsGetWithResponse call
func ParseGetAllAchievementsAchievementsGetResponse(rsp *http.Response) (*GetAllAchievementsAchievementsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAchievementsAchievementsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageAchievementSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAchievementAchievementsCodeGetResponse parses an HTTP response from a GetAchievementAchievementsCodeGetWithResponse call
func ParseGetAchievementAchievementsCodeGetResponse(rsp *http.Response) (*GetAchievementAchievementsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAchievementAchievementsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AchievementResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllBadgesBadgesGetResponse parses an HTTP response from a GetAllBadgesBadgesGetWithResponse call
func ParseGetAllBadgesBadgesGetResponse(rsp *http.Response) (*GetAllBadgesBadgesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllBadgesBadgesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageBadgeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBadgeBadgesCodeGetResponse parses an HTTP response from a GetBadgeBadgesCodeGetWithResponse call
func ParseGetBadgeBadgesCodeGetResponse(rsp *http.Response) (*GetBadgeBadgesCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBadgeBadgesCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BadgeResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCharacterCharactersCreatePostResponse parses an HTTP response from a CreateCharacterCharactersCreatePostWithResponse call
func ParseCreateCharacterCharactersCreatePostResponse(rsp *http.Response) (*CreateCharacterCharactersCreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCharacterCharactersCreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCharacterCharactersDeletePostResponse parses an HTTP response from a DeleteCharacterCharactersDeletePostWithResponse call
func ParseDeleteCharacterCharactersDeletePostResponse(rsp *http.Response) (*DeleteCharacterCharactersDeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCharacterCharactersDeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterCharactersNameGetResponse parses an HTTP response from a GetCharacterCharactersNameGetWithResponse call
func ParseGetCharacterCharactersNameGetResponse(rsp *http.Response) (*GetCharacterCharactersNameGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterCharactersNameGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEffectsEffectsGetResponse parses an HTTP response from a GetAllEffectsEffectsGetWithResponse call
func ParseGetAllEffectsEffectsGetResponse(rsp *http.Response) (*GetAllEffectsEffectsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEffectsEffectsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageEffectSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEffectEffectsCodeGetResponse parses an HTTP response from a GetEffectEffectsCodeGetWithResponse call
func ParseGetEffectEffectsCodeGetResponse(rsp *http.Response) (*GetEffectEffectsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEffectEffectsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EffectResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEventsEventsGetResponse parses an HTTP response from a GetAllEventsEventsGetWithResponse call
func ParseGetAllEventsEventsGetResponse(rsp *http.Response) (*GetAllEventsEventsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEventsEventsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllActiveEventsEventsActiveGetResponse parses an HTTP response from a GetAllActiveEventsEventsActiveGetWithResponse call
func ParseGetAllActiveEventsEventsActiveGetResponse(rsp *http.Response) (*GetAllActiveEventsEventsActiveGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllActiveEventsEventsActiveGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageActiveEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeSellHistoryGrandexchangeHistoryCodeGetResponse parses an HTTP response from a GetGeSellHistoryGrandexchangeHistoryCodeGetWithResponse call
func ParseGetGeSellHistoryGrandexchangeHistoryCodeGetResponse(rsp *http.Response) (*GetGeSellHistoryGrandexchangeHistoryCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeSellHistoryGrandexchangeHistoryCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGeOrderHistorySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeSellOrdersGrandexchangeOrdersGetResponse parses an HTTP response from a GetGeSellOrdersGrandexchangeOrdersGetWithResponse call
func ParseGetGeSellOrdersGrandexchangeOrdersGetResponse(rsp *http.Response) (*GetGeSellOrdersGrandexchangeOrdersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeSellOrdersGrandexchangeOrdersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGEOrderSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeSellOrderGrandexchangeOrdersIdGetResponse parses an HTTP response from a GetGeSellOrderGrandexchangeOrdersIdGetWithResponse call
func ParseGetGeSellOrderGrandexchangeOrdersIdGetResponse(rsp *http.Response) (*GetGeSellOrderGrandexchangeOrdersIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeSellOrderGrandexchangeOrdersIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GEOrderReponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllItemsItemsGetResponse parses an HTTP response from a GetAllItemsItemsGetWithResponse call
func ParseGetAllItemsItemsGetResponse(rsp *http.Response) (*GetAllItemsItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllItemsItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetItemItemsCodeGetResponse parses an HTTP response from a GetItemItemsCodeGetWithResponse call
func ParseGetItemItemsCodeGetResponse(rsp *http.Response) (*GetItemItemsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemItemsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountsLeaderboardLeaderboardAccountsGetResponse parses an HTTP response from a GetAccountsLeaderboardLeaderboardAccountsGetWithResponse call
func ParseGetAccountsLeaderboardLeaderboardAccountsGetResponse(rsp *http.Response) (*GetAccountsLeaderboardLeaderboardAccountsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsLeaderboardLeaderboardAccountsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageAccountLeaderboardSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharactersLeaderboardLeaderboardCharactersGetResponse parses an HTTP response from a GetCharactersLeaderboardLeaderboardCharactersGetWithResponse call
func ParseGetCharactersLeaderboardLeaderboardCharactersGetResponse(rsp *http.Response) (*GetCharactersLeaderboardLeaderboardCharactersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersLeaderboardLeaderboardCharactersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageCharacterLeaderboardSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMapsMapsGetResponse parses an HTTP response from a GetAllMapsMapsGetWithResponse call
func ParseGetAllMapsMapsGetResponse(rsp *http.Response) (*GetAllMapsMapsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMapsMapsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMapSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapMapsXYGetResponse parses an HTTP response from a GetMapMapsXYGetWithResponse call
func ParseGetMapMapsXYGetResponse(rsp *http.Response) (*GetMapMapsXYGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapMapsXYGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMonstersMonstersGetResponse parses an HTTP response from a GetAllMonstersMonstersGetWithResponse call
func ParseGetAllMonstersMonstersGetResponse(rsp *http.Response) (*GetAllMonstersMonstersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMonstersMonstersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMonsterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonsterMonstersCodeGetResponse parses an HTTP response from a GetMonsterMonstersCodeGetWithResponse call
func ParseGetMonsterMonstersCodeGetResponse(rsp *http.Response) (*GetMonsterMonstersCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonsterMonstersCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonsterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankDetailsMyBankGetResponse parses an HTTP response from a GetBankDetailsMyBankGetWithResponse call
func ParseGetBankDetailsMyBankGetResponse(rsp *http.Response) (*GetBankDetailsMyBankGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankDetailsMyBankGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankItemsMyBankItemsGetResponse parses an HTTP response from a GetBankItemsMyBankItemsGetWithResponse call
func ParseGetBankItemsMyBankItemsGetResponse(rsp *http.Response) (*GetBankItemsMyBankItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankItemsMyBankItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageSimpleItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangePasswordMyChangePasswordPostResponse parses an HTTP response from a ChangePasswordMyChangePasswordPostWithResponse call
func ParseChangePasswordMyChangePasswordPostResponse(rsp *http.Response) (*ChangePasswordMyChangePasswordPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordMyChangePasswordPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyCharactersMyCharactersGetResponse parses an HTTP response from a GetMyCharactersMyCharactersGetWithResponse call
func ParseGetMyCharactersMyCharactersGetResponse(rsp *http.Response) (*GetMyCharactersMyCharactersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyCharactersMyCharactersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyCharactersListSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountDetailsMyDetailsGetResponse parses an HTTP response from a GetAccountDetailsMyDetailsGetWithResponse call
func ParseGetAccountDetailsMyDetailsGetResponse(rsp *http.Response) (*GetAccountDetailsMyDetailsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountDetailsMyDetailsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyAccountDetailsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeSellHistoryMyGrandexchangeHistoryGetResponse parses an HTTP response from a GetGeSellHistoryMyGrandexchangeHistoryGetWithResponse call
func ParseGetGeSellHistoryMyGrandexchangeHistoryGetResponse(rsp *http.Response) (*GetGeSellHistoryMyGrandexchangeHistoryGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeSellHistoryMyGrandexchangeHistoryGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGeOrderHistorySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeSellOrdersMyGrandexchangeOrdersGetResponse parses an HTTP response from a GetGeSellOrdersMyGrandexchangeOrdersGetWithResponse call
func ParseGetGeSellOrdersMyGrandexchangeOrdersGetResponse(rsp *http.Response) (*GetGeSellOrdersMyGrandexchangeOrdersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeSellOrdersMyGrandexchangeOrdersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGEOrderSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCharactersLogsMyLogsGetResponse parses an HTTP response from a GetAllCharactersLogsMyLogsGetWithResponse call
func ParseGetAllCharactersLogsMyLogsGetResponse(rsp *http.Response) (*GetAllCharactersLogsMyLogsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCharactersLogsMyLogsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageLogSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse parses an HTTP response from a ActionBuyBankExpansionMyNameActionBankBuyExpansionPostWithResponse call
func ParseActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse(rsp *http.Response) (*ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankExtensionTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDepositBankMyNameActionBankDepositPostResponse parses an HTTP response from a ActionDepositBankMyNameActionBankDepositPostWithResponse call
func ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp *http.Response) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDepositBankMyNameActionBankDepositPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankItemTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse parses an HTTP response from a ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse call
func ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp *http.Response) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankGoldTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse parses an HTTP response from a ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse call
func ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp *http.Response) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionWithdrawBankMyNameActionBankWithdrawPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankItemTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse parses an HTTP response from a ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse call
func ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp *http.Response) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankGoldTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionCraftingMyNameActionCraftingPostResponse parses an HTTP response from a ActionCraftingMyNameActionCraftingPostWithResponse call
func ParseActionCraftingMyNameActionCraftingPostResponse(rsp *http.Response) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionCraftingMyNameActionCraftingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDeleteItemMyNameActionDeletePostResponse parses an HTTP response from a ActionDeleteItemMyNameActionDeletePostWithResponse call
func ParseActionDeleteItemMyNameActionDeletePostResponse(rsp *http.Response) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDeleteItemMyNameActionDeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionEquipItemMyNameActionEquipPostResponse parses an HTTP response from a ActionEquipItemMyNameActionEquipPostWithResponse call
func ParseActionEquipItemMyNameActionEquipPostResponse(rsp *http.Response) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionEquipItemMyNameActionEquipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionFightMyNameActionFightPostResponse parses an HTTP response from a ActionFightMyNameActionFightPostWithResponse call
func ParseActionFightMyNameActionFightPostResponse(rsp *http.Response) (*ActionFightMyNameActionFightPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionFightMyNameActionFightPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterFightResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGatheringMyNameActionGatheringPostResponse parses an HTTP response from a ActionGatheringMyNameActionGatheringPostWithResponse call
func ParseActionGatheringMyNameActionGatheringPostResponse(rsp *http.Response) (*ActionGatheringMyNameActionGatheringPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGatheringMyNameActionGatheringPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse parses an HTTP response from a ActionGeBuyItemMyNameActionGrandexchangeBuyPostWithResponse call
func ParseActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse(rsp *http.Response) (*ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse parses an HTTP response from a ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostWithResponse call
func ParseActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse(rsp *http.Response) (*ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse parses an HTTP response from a ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostWithResponse call
func ParseActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse(rsp *http.Response) (*ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GECreateOrderTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionMoveMyNameActionMovePostResponse parses an HTTP response from a ActionMoveMyNameActionMovePostWithResponse call
func ParseActionMoveMyNameActionMovePostResponse(rsp *http.Response) (*ActionMoveMyNameActionMovePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionMoveMyNameActionMovePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterMovementResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionNpcBuyItemMyNameActionNpcBuyPostResponse parses an HTTP response from a ActionNpcBuyItemMyNameActionNpcBuyPostWithResponse call
func ParseActionNpcBuyItemMyNameActionNpcBuyPostResponse(rsp *http.Response) (*ActionNpcBuyItemMyNameActionNpcBuyPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionNpcBuyItemMyNameActionNpcBuyPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NpcMerchantTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionNpcSellItemMyNameActionNpcSellPostResponse parses an HTTP response from a ActionNpcSellItemMyNameActionNpcSellPostWithResponse call
func ParseActionNpcSellItemMyNameActionNpcSellPostResponse(rsp *http.Response) (*ActionNpcSellItemMyNameActionNpcSellPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionNpcSellItemMyNameActionNpcSellPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NpcMerchantTransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionRecyclingMyNameActionRecyclingPostResponse parses an HTTP response from a ActionRecyclingMyNameActionRecyclingPostWithResponse call
func ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp *http.Response) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionRecyclingMyNameActionRecyclingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecyclingResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionRestMyNameActionRestPostResponse parses an HTTP response from a ActionRestMyNameActionRestPostWithResponse call
func ParseActionRestMyNameActionRestPostResponse(rsp *http.Response) (*ActionRestMyNameActionRestPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionRestMyNameActionRestPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterRestResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionTaskCancelMyNameActionTaskCancelPostResponse parses an HTTP response from a ActionTaskCancelMyNameActionTaskCancelPostWithResponse call
func ParseActionTaskCancelMyNameActionTaskCancelPostResponse(rsp *http.Response) (*ActionTaskCancelMyNameActionTaskCancelPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionTaskCancelMyNameActionTaskCancelPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskCancelledResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionCompleteTaskMyNameActionTaskCompletePostResponse parses an HTTP response from a ActionCompleteTaskMyNameActionTaskCompletePostWithResponse call
func ParseActionCompleteTaskMyNameActionTaskCompletePostResponse(rsp *http.Response) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionCompleteTaskMyNameActionTaskCompletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RewardDataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionTaskExchangeMyNameActionTaskExchangePostResponse parses an HTTP response from a ActionTaskExchangeMyNameActionTaskExchangePostWithResponse call
func ParseActionTaskExchangeMyNameActionTaskExchangePostResponse(rsp *http.Response) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionTaskExchangeMyNameActionTaskExchangePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RewardDataResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse parses an HTTP response from a ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse call
func ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse(rsp *http.Response) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionAcceptNewTaskMyNameActionTaskNewPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionTaskTradeMyNameActionTaskTradePostResponse parses an HTTP response from a ActionTaskTradeMyNameActionTaskTradePostWithResponse call
func ParseActionTaskTradeMyNameActionTaskTradePostResponse(rsp *http.Response) (*ActionTaskTradeMyNameActionTaskTradePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionTaskTradeMyNameActionTaskTradePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskTradeResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionUnequipItemMyNameActionUnequipPostResponse parses an HTTP response from a ActionUnequipItemMyNameActionUnequipPostWithResponse call
func ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp *http.Response) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionUnequipItemMyNameActionUnequipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionUseItemMyNameActionUsePostResponse parses an HTTP response from a ActionUseItemMyNameActionUsePostWithResponse call
func ParseActionUseItemMyNameActionUsePostResponse(rsp *http.Response) (*ActionUseItemMyNameActionUsePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionUseItemMyNameActionUsePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UseItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllNpcsNpcsGetResponse parses an HTTP response from a GetAllNpcsNpcsGetWithResponse call
func ParseGetAllNpcsNpcsGetResponse(rsp *http.Response) (*GetAllNpcsNpcsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllNpcsNpcsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageNPCSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNpcNpcsCodeGetResponse parses an HTTP response from a GetNpcNpcsCodeGetWithResponse call
func ParseGetNpcNpcsCodeGetResponse(rsp *http.Response) (*GetNpcNpcsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNpcNpcsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NPCResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNpcItemsNpcsCodeItemsGetResponse parses an HTTP response from a GetNpcItemsNpcsCodeItemsGetWithResponse call
func ParseGetNpcItemsNpcsCodeItemsGetResponse(rsp *http.Response) (*GetNpcItemsNpcsCodeItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNpcItemsNpcsCodeItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageNPCItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllResourcesResourcesGetResponse parses an HTTP response from a GetAllResourcesResourcesGetWithResponse call
func ParseGetAllResourcesResourcesGetResponse(rsp *http.Response) (*GetAllResourcesResourcesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllResourcesResourcesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResourceResourcesCodeGetResponse parses an HTTP response from a GetResourceResourcesCodeGetWithResponse call
func ParseGetResourceResourcesCodeGetResponse(rsp *http.Response) (*GetResourceResourcesCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResourcesCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllTasksTasksListGetResponse parses an HTTP response from a GetAllTasksTasksListGetWithResponse call
func ParseGetAllTasksTasksListGetResponse(rsp *http.Response) (*GetAllTasksTasksListGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTasksTasksListGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageTaskFullSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskTasksListCodeGetResponse parses an HTTP response from a GetTaskTasksListCodeGetWithResponse call
func ParseGetTaskTasksListCodeGetResponse(rsp *http.Response) (*GetTaskTasksListCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskTasksListCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskFullResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllTasksRewardsTasksRewardsGetResponse parses an HTTP response from a GetAllTasksRewardsTasksRewardsGetWithResponse call
func ParseGetAllTasksRewardsTasksRewardsGetResponse(rsp *http.Response) (*GetAllTasksRewardsTasksRewardsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTasksRewardsTasksRewardsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageDropRateSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTasksRewardTasksRewardsCodeGetResponse parses an HTTP response from a GetTasksRewardTasksRewardsCodeGetWithResponse call
func ParseGetTasksRewardTasksRewardsCodeGetResponse(rsp *http.Response) (*GetTasksRewardTasksRewardsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksRewardTasksRewardsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateTokenTokenPostResponse parses an HTTP response from a GenerateTokenTokenPostWithResponse call
func ParseGenerateTokenTokenPostResponse(rsp *http.Response) (*GenerateTokenTokenPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateTokenTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
